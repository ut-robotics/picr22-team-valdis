from re import S
import image_processor
import camera
import cv2
import time
from enum import Enum
from motion import SerialOmniMotion


class Machine_state(Enum):
    FIND_BALL = 1  # ---> ball found 
    MOVE_TO_BALL = 2  # ---> ball in optimal pos
    ORBIT_BALL = 3  # (right) ---> Orbit ball till aligned with Right Basket or ball not in optimal pos
    ORBIT_BALL_LEFT = 4  # kui on korvi näha vasakul
    ORBIT_BALL_RIGHT = 5  # kui on korvi näha paremal
    THROW_BALL = 6  # ---> run ball throwing
    # let it be for now


# sudo chmod a=rwx /dev/ttyACM0
def main_loop():
    debug = False
    # 0 - magenta 1 -blue
    print("[RUNNING]")
    # default first thing find ball
    # camera instance for normal web cameras
    # cam = camera.OpenCVCamera(id = 2)
    # camera instance for realsense cameras
    
    # CAMERA_WIDTH = 480
    # CAMERA_HEIGHT = 848
    cam = camera.RealsenseCamera(exposure=100)
    processor = image_processor.ImageProcessor(cam, debug=debug)
    processor.start()
    frame = 0
    frame_cnt = 0
    state = Machine_state.FIND_BALL
    move = SerialOmniMotion()  # opens itself
    throw_time = -1
    try:
        while True:
            
            
            
            # if signal == start (continue)
            # else break
            # has argument aligned_depth that enables depth frame to color frame alignment. Costs performance
            if state is Machine_state.THROW_BALL:
                processedData = processor.process_frame(aligned_depth=True)
            else:
                processedData = processor.process_frame(aligned_depth=False)
                
            basket = processedData.basket_b
            # praegu hard code 
            # This is where you add the driving behaviour of your robot. It should be able to filter out
            # objects of interest and calculate the required motion for reaching the objects

            if state is not Machine_state.THROW_BALL:
                throw_time = -1

            if state is Machine_state.FIND_BALL:
                
                move.spin(-1.7)
            # Kui me leiame palli, mis on lähim, siis võrdleme neid oma seatud parameetritega ja liigume selle poole
            elif state is Machine_state.MOVE_TO_BALL:
                
                move.move_robot(ball.x, ball.y)
            # Orbitib palli, kui on leidnud ülesse, milline on talle kõige lähemal on ja hakkame korvi otsima
            elif state is Machine_state.ORBIT_BALL:
                
                move.orbit(-1)
            # Kui korv on meist paremale poole orbitime tollele poole
            elif state is Machine_state.ORBIT_BALL_LEFT:
                
                move.orbit(-0.5)
            # Kui korv on meist vasakule orbitime tollele poole
            elif state is Machine_state.ORBIT_BALL_RIGHT:
                
                move.orbit(0.5)
            # Kui oleme ennast sättinud heasse positsiooni korvi suhtes, siis viskame
            elif state is Machine_state.THROW_BALL:
                print(ball.y, " Y")
                print(ball.x, " X")
                print('State', state)
                print(basket.distance, " distance")
                print(basket.x)
                move.throw_ball(basket.distance)

                # move.send_to_robot(0,1,0,sped)
            
            if state is Machine_state.THROW_BALL and throw_time == -1:
                print("STARTING THROWING MODE!")
                throw_time = time.time()

            if state is Machine_state.THROW_BALL and throw_time != -1 and throw_time + 1 > time.time():
                print("STAYING IN THROW", throw_time + 2, time.time())
                state = Machine_state.THROW_BALL

            elif len(processedData.balls) > 0:
                # on pall
                ball = processedData.balls[-1]
                if state is Machine_state.FIND_BALL or state is Machine_state.MOVE_TO_BALL or state is Machine_state.THROW_BALL:
                    state = Machine_state.MOVE_TO_BALL
                # kui pall õiges kohas 
                # ToDO make those values depend on a CAMERA_WIDTH and CAMERA_HEIGHT
                # kas see oleks parem ? -> 
                # if (ball.x > CAMERA_WIDTH/2 - 9 and ball.x < CAMERA_WIDTH/2 +21  and ball.y < CAMERA_HEIGHT - 40 and ball.y > CAMERA_HEIGHT-70)
                if (ball.x > 425 and ball.x < 445  and ball.y < 440 and ball.y > 410) or (
                        state is Machine_state.ORBIT_BALL or state is Machine_state.ORBIT_BALL_LEFT or
                        state is Machine_state.ORBIT_BALL_RIGHT):
                    # print(basket.exists,"basket")
                    if basket.exists == 0:
                        state = Machine_state.ORBIT_BALL
                    # orbit ball
                    # ToDO make those values depend on a CAMERA_WIDTH and CAMERA_HEIGHT
                    if basket.exists:
                        if basket.x > 430: 
                            state = Machine_state.ORBIT_BALL_LEFT
                        elif basket.x < 410:
                            state = Machine_state.ORBIT_BALL_RIGHT
                        elif basket.x < 430 and basket.x > 410:
                            state = Machine_state.THROW_BALL
                            move.send_to_robot(0,0,0,0)
                            if not (ball.x > 425 and ball.x < 445  and ball.y < 440 and ball.y > 410):
                                state = Machine_state.MOVE_TO_BALL

            else:
                # otsi palli
                state = Machine_state.FIND_BALL
            
            # print(processedData.basket_b.x ,"BASKET")
            # move = SerialOmniMotion() # opens itself
            # Hakkame keerama ennast, et otsida palle.
            if debug:
                debug_frame = processedData.debug_frame
                cv2.imshow('debug', debug_frame)
                k = cv2.waitKey(1) & 0xff
                if k == ord('q'):
                    break
                
        move.close()
    except KeyboardInterrupt:
        print("losing....")
    finally:
        cv2.destroyAllWindows()
        move.close()
        processor.stop()
print("homer")
main_loop()
i = SerialOmniMotion()
i.send_to_robot(0, 0, 0, 0)
i.close