
ValdisFirmware.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1b8  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  0800a390  0800a390  0001a390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3e8  0800a3e8  000201cc  2**0
                  CONTENTS
  4 .ARM          00000000  0800a3e8  0800a3e8  000201cc  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a3e8  0800a3e8  000201cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3e8  0800a3e8  0001a3e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3ec  0800a3ec  0001a3ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001cc  20000000  0800a3f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000013f0  200001cc  0800a5bc  000201cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200015bc  0800a5bc  000215bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016839  00000000  00000000  000201fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035bd  00000000  00000000  00036a35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001350  00000000  00000000  00039ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000011d8  00000000  00000000  0003b348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000207e7  00000000  00000000  0003c520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016533  00000000  00000000  0005cd07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c4dee  00000000  00000000  0007323a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00138028  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005018  00000000  00000000  00138078  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	200001cc 	.word	0x200001cc
 80001f4:	00000000 	.word	0x00000000
 80001f8:	0800a378 	.word	0x0800a378

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	200001d0 	.word	0x200001d0
 8000214:	0800a378 	.word	0x0800a378

08000218 <clmp>:
	        .delimiter = 0xAAAA
	    };
	volatile uint8_t isCommandReceived = 0;
	volatile uint8_t driverReset = 0;

	int32_t clmp(int16_t val, int32_t minVal, int32_t maxVal){
 8000218:	b480      	push	{r7}
 800021a:	b085      	sub	sp, #20
 800021c:	af00      	add	r7, sp, #0
 800021e:	4603      	mov	r3, r0
 8000220:	60b9      	str	r1, [r7, #8]
 8000222:	607a      	str	r2, [r7, #4]
 8000224:	81fb      	strh	r3, [r7, #14]
		if(val>maxVal){
 8000226:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800022a:	687a      	ldr	r2, [r7, #4]
 800022c:	429a      	cmp	r2, r3
 800022e:	da01      	bge.n	8000234 <clmp+0x1c>
			return maxVal;
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	e008      	b.n	8000246 <clmp+0x2e>
		}
		if(val<minVal){
 8000234:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000238:	68ba      	ldr	r2, [r7, #8]
 800023a:	429a      	cmp	r2, r3
 800023c:	dd01      	ble.n	8000242 <clmp+0x2a>
			return minVal;
 800023e:	68bb      	ldr	r3, [r7, #8]
 8000240:	e001      	b.n	8000246 <clmp+0x2e>
		}
		return val;
 8000242:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
	};
 8000246:	4618      	mov	r0, r3
 8000248:	3714      	adds	r7, #20
 800024a:	46bd      	mov	sp, r7
 800024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000250:	4770      	bx	lr
	...

08000254 <PID>:


	int32_t PID(MotorInfo* control, int16_t position){
 8000254:	b580      	push	{r7, lr}
 8000256:	b084      	sub	sp, #16
 8000258:	af00      	add	r7, sp, #0
 800025a:	6078      	str	r0, [r7, #4]
 800025c:	460b      	mov	r3, r1
 800025e:	807b      	strh	r3, [r7, #2]
		control->positionChange = position - control->position;
 8000260:	887a      	ldrh	r2, [r7, #2]
 8000262:	687b      	ldr	r3, [r7, #4]
 8000264:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000268:	b29b      	uxth	r3, r3
 800026a:	1ad3      	subs	r3, r2, r3
 800026c:	b29b      	uxth	r3, r3
 800026e:	b21a      	sxth	r2, r3
 8000270:	687b      	ldr	r3, [r7, #4]
 8000272:	821a      	strh	r2, [r3, #16]
		control->position = position;
 8000274:	687b      	ldr	r3, [r7, #4]
 8000276:	887a      	ldrh	r2, [r7, #2]
 8000278:	805a      	strh	r2, [r3, #2]
		int32_t error = control->speed -control->positionChange;
 800027a:	687b      	ldr	r3, [r7, #4]
 800027c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000280:	461a      	mov	r2, r3
 8000282:	687b      	ldr	r3, [r7, #4]
 8000284:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8000288:	1ad3      	subs	r3, r2, r3
 800028a:	60fb      	str	r3, [r7, #12]
		control->integraal += error;
 800028c:	687b      	ldr	r3, [r7, #4]
 800028e:	685a      	ldr	r2, [r3, #4]
 8000290:	68fb      	ldr	r3, [r7, #12]
 8000292:	441a      	add	r2, r3
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	605a      	str	r2, [r3, #4]
		clmp(control->integraal, -70000 / control->i_gain, 70000 / control->i_gain);
 8000298:	687b      	ldr	r3, [r7, #4]
 800029a:	685b      	ldr	r3, [r3, #4]
 800029c:	b218      	sxth	r0, r3
 800029e:	687b      	ldr	r3, [r7, #4]
 80002a0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80002a4:	461a      	mov	r2, r3
 80002a6:	4b10      	ldr	r3, [pc, #64]	; (80002e8 <PID+0x94>)
 80002a8:	fb93 f1f2 	sdiv	r1, r3, r2
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80002b2:	461a      	mov	r2, r3
 80002b4:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <PID+0x98>)
 80002b6:	fb93 f3f2 	sdiv	r3, r3, r2
 80002ba:	461a      	mov	r2, r3
 80002bc:	f7ff ffac 	bl	8000218 <clmp>

		return control->p_gain * error + control->i_gain * control->integraal;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80002c6:	461a      	mov	r2, r3
 80002c8:	68fb      	ldr	r3, [r7, #12]
 80002ca:	fb03 f202 	mul.w	r2, r3, r2
 80002ce:	687b      	ldr	r3, [r7, #4]
 80002d0:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80002d4:	4619      	mov	r1, r3
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	685b      	ldr	r3, [r3, #4]
 80002da:	fb01 f303 	mul.w	r3, r1, r3
 80002de:	4413      	add	r3, r2
	}
 80002e0:	4618      	mov	r0, r3
 80002e2:	3710      	adds	r7, #16
 80002e4:	46bd      	mov	sp, r7
 80002e6:	bd80      	pop	{r7, pc}
 80002e8:	fffeee90 	.word	0xfffeee90
 80002ec:	00011170 	.word	0x00011170

080002f0 <CDC_On_Receive>:

	void CDC_On_Receive(uint8_t* buffer, uint32_t* length) {
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	6078      	str	r0, [r7, #4]
 80002f8:	6039      	str	r1, [r7, #0]
	  if (*length == sizeof(Command)) {
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	2b0a      	cmp	r3, #10
 8000300:	d116      	bne.n	8000330 <CDC_On_Receive+0x40>
	    memcpy(&command, buffer, sizeof(Command));
 8000302:	220a      	movs	r2, #10
 8000304:	6879      	ldr	r1, [r7, #4]
 8000306:	480c      	ldr	r0, [pc, #48]	; (8000338 <CDC_On_Receive+0x48>)
 8000308:	f00a f820 	bl	800a34c <memcpy>
	    if (command.delimiter == 0xAAAA) {
 800030c:	4b0a      	ldr	r3, [pc, #40]	; (8000338 <CDC_On_Receive+0x48>)
 800030e:	891b      	ldrh	r3, [r3, #8]
 8000310:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 8000314:	4293      	cmp	r3, r2
 8000316:	d102      	bne.n	800031e <CDC_On_Receive+0x2e>
	      isCommandReceived = 1;
 8000318:	4b08      	ldr	r3, [pc, #32]	; (800033c <CDC_On_Receive+0x4c>)
 800031a:	2201      	movs	r2, #1
 800031c:	701a      	strb	r2, [r3, #0]
	    }
	    if (command.delimiter == 0xBBBB) {
 800031e:	4b06      	ldr	r3, [pc, #24]	; (8000338 <CDC_On_Receive+0x48>)
 8000320:	891b      	ldrh	r3, [r3, #8]
 8000322:	f64b 32bb 	movw	r2, #48059	; 0xbbbb
 8000326:	4293      	cmp	r3, r2
 8000328:	d102      	bne.n	8000330 <CDC_On_Receive+0x40>
	    	  		driverReset = 1;
 800032a:	4b05      	ldr	r3, [pc, #20]	; (8000340 <CDC_On_Receive+0x50>)
 800032c:	2201      	movs	r2, #1
 800032e:	701a      	strb	r2, [r3, #0]
	    		}
	  }
	}
 8000330:	bf00      	nop
 8000332:	3708      	adds	r7, #8
 8000334:	46bd      	mov	sp, r7
 8000336:	bd80      	pop	{r7, pc}
 8000338:	2000003c 	.word	0x2000003c
 800033c:	200003fc 	.word	0x200003fc
 8000340:	200003fd 	.word	0x200003fd

08000344 <toggle_nSleep>:
			pwmData[i] = 0;
		}
		HAL_TIM_PWM_Start_DMA(&htim8, TIM_CHANNEL_1, (uint32_t *)pwmData, 20);
	}

	void toggle_nSleep(){
 8000344:	b580      	push	{r7, lr}
 8000346:	b082      	sub	sp, #8
 8000348:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(SLEEP_N_GPIO_Port,SLEEP_N_Pin,0);
 800034a:	2200      	movs	r2, #0
 800034c:	2108      	movs	r1, #8
 800034e:	480b      	ldr	r0, [pc, #44]	; (800037c <toggle_nSleep+0x38>)
 8000350:	f001 fa06 	bl	8001760 <HAL_GPIO_WritePin>
		for(int i =0;i<350;i++){
 8000354:	2300      	movs	r3, #0
 8000356:	607b      	str	r3, [r7, #4]
 8000358:	e003      	b.n	8000362 <toggle_nSleep+0x1e>
			__asm("nop");
 800035a:	bf00      	nop
		for(int i =0;i<350;i++){
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	3301      	adds	r3, #1
 8000360:	607b      	str	r3, [r7, #4]
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	f5b3 7faf 	cmp.w	r3, #350	; 0x15e
 8000368:	dbf7      	blt.n	800035a <toggle_nSleep+0x16>
		}
		HAL_GPIO_WritePin(SLEEP_N_GPIO_Port,SLEEP_N_Pin,1);
 800036a:	2201      	movs	r2, #1
 800036c:	2108      	movs	r1, #8
 800036e:	4803      	ldr	r0, [pc, #12]	; (800037c <toggle_nSleep+0x38>)
 8000370:	f001 f9f6 	bl	8001760 <HAL_GPIO_WritePin>
	}
 8000374:	bf00      	nop
 8000376:	3708      	adds	r7, #8
 8000378:	46bd      	mov	sp, r7
 800037a:	bd80      	pop	{r7, pc}
 800037c:	48000400 	.word	0x48000400

08000380 <HAL_TIM_PeriodElapsedCallback>:
	void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim6) {
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	6078      	str	r0, [r7, #4]
			int16_t pos;

			int32_t pwmValue;

			pos = (int16_t)TIM1->CNT;
 8000388:	4b37      	ldr	r3, [pc, #220]	; (8000468 <HAL_TIM_PeriodElapsedCallback+0xe8>)
 800038a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800038c:	81fb      	strh	r3, [r7, #14]
			pwmValue = PID(&M1, pos);
 800038e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000392:	4619      	mov	r1, r3
 8000394:	4835      	ldr	r0, [pc, #212]	; (800046c <HAL_TIM_PeriodElapsedCallback+0xec>)
 8000396:	f7ff ff5d 	bl	8000254 <PID>
 800039a:	60b8      	str	r0, [r7, #8]
			HAL_GPIO_WritePin(M1_DIR_A_GPIO_Port, M1_DIR_A_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800039c:	68bb      	ldr	r3, [r7, #8]
 800039e:	0fdb      	lsrs	r3, r3, #31
 80003a0:	b2db      	uxtb	r3, r3
 80003a2:	461a      	mov	r2, r3
 80003a4:	2120      	movs	r1, #32
 80003a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003aa:	f001 f9d9 	bl	8001760 <HAL_GPIO_WritePin>
			TIM2->CCR1 =(uint16_t)clmp((pwmValue < 0) ? -pwmValue : pwmValue, 0 , 65535);
 80003ae:	68bb      	ldr	r3, [r7, #8]
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	bfb8      	it	lt
 80003b4:	425b      	neglt	r3, r3
 80003b6:	b21b      	sxth	r3, r3
 80003b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80003bc:	2100      	movs	r1, #0
 80003be:	4618      	mov	r0, r3
 80003c0:	f7ff ff2a 	bl	8000218 <clmp>
 80003c4:	4603      	mov	r3, r0
 80003c6:	b29a      	uxth	r2, r3
 80003c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003cc:	635a      	str	r2, [r3, #52]	; 0x34

			pos = (int16_t)TIM3->CNT;
 80003ce:	4b28      	ldr	r3, [pc, #160]	; (8000470 <HAL_TIM_PeriodElapsedCallback+0xf0>)
 80003d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003d2:	81fb      	strh	r3, [r7, #14]
			pwmValue = PID(&M2, pos);
 80003d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80003d8:	4619      	mov	r1, r3
 80003da:	4826      	ldr	r0, [pc, #152]	; (8000474 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 80003dc:	f7ff ff3a 	bl	8000254 <PID>
 80003e0:	60b8      	str	r0, [r7, #8]
			HAL_GPIO_WritePin(M2_DIR_A_GPIO_Port, M2_DIR_A_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80003e2:	68bb      	ldr	r3, [r7, #8]
 80003e4:	0fdb      	lsrs	r3, r3, #31
 80003e6:	b2db      	uxtb	r3, r3
 80003e8:	461a      	mov	r2, r3
 80003ea:	2140      	movs	r1, #64	; 0x40
 80003ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003f0:	f001 f9b6 	bl	8001760 <HAL_GPIO_WritePin>
			TIM2->CCR2 =(uint16_t)clmp((pwmValue < 0) ? -pwmValue : pwmValue, 0 , 65535);
 80003f4:	68bb      	ldr	r3, [r7, #8]
 80003f6:	2b00      	cmp	r3, #0
 80003f8:	bfb8      	it	lt
 80003fa:	425b      	neglt	r3, r3
 80003fc:	b21b      	sxth	r3, r3
 80003fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000402:	2100      	movs	r1, #0
 8000404:	4618      	mov	r0, r3
 8000406:	f7ff ff07 	bl	8000218 <clmp>
 800040a:	4603      	mov	r3, r0
 800040c:	b29a      	uxth	r2, r3
 800040e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000412:	639a      	str	r2, [r3, #56]	; 0x38

			pos = (int16_t)TIM4->CNT;
 8000414:	4b18      	ldr	r3, [pc, #96]	; (8000478 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8000416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000418:	81fb      	strh	r3, [r7, #14]
			pwmValue = PID(&M3, pos);
 800041a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800041e:	4619      	mov	r1, r3
 8000420:	4816      	ldr	r0, [pc, #88]	; (800047c <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8000422:	f7ff ff17 	bl	8000254 <PID>
 8000426:	60b8      	str	r0, [r7, #8]
			HAL_GPIO_WritePin(M3_DIR_A_GPIO_Port, M3_DIR_A_Pin, (pwmValue < 0) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	0fdb      	lsrs	r3, r3, #31
 800042c:	b2db      	uxtb	r3, r3
 800042e:	461a      	mov	r2, r3
 8000430:	2180      	movs	r1, #128	; 0x80
 8000432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000436:	f001 f993 	bl	8001760 <HAL_GPIO_WritePin>
			TIM2->CCR3 =(uint16_t)clmp((pwmValue < 0) ? -pwmValue : pwmValue, 0 , 65535);
 800043a:	68bb      	ldr	r3, [r7, #8]
 800043c:	2b00      	cmp	r3, #0
 800043e:	bfb8      	it	lt
 8000440:	425b      	neglt	r3, r3
 8000442:	b21b      	sxth	r3, r3
 8000444:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000448:	2100      	movs	r1, #0
 800044a:	4618      	mov	r0, r3
 800044c:	f7ff fee4 	bl	8000218 <clmp>
 8000450:	4603      	mov	r3, r0
 8000452:	b29a      	uxth	r2, r3
 8000454:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000458:	63da      	str	r2, [r3, #60]	; 0x3c
			/*
			TIM2->CCR1 = 10000;
			TIM2->CCR2 = 10000;
			TIM2->CCR3 = 10000;
			*/
			toggle_nSleep();
 800045a:	f7ff ff73 	bl	8000344 <toggle_nSleep>


		  // Motor control calculations can be called from here
		}
 800045e:	bf00      	nop
 8000460:	3710      	adds	r7, #16
 8000462:	46bd      	mov	sp, r7
 8000464:	bd80      	pop	{r7, pc}
 8000466:	bf00      	nop
 8000468:	40012c00 	.word	0x40012c00
 800046c:	20000000 	.word	0x20000000
 8000470:	40000400 	.word	0x40000400
 8000474:	20000014 	.word	0x20000014
 8000478:	40000800 	.word	0x40000800
 800047c:	20000028 	.word	0x20000028

08000480 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000486:	f000 fe46 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800048a:	f000 f89d 	bl	80005c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800048e:	f000 fb89 	bl	8000ba4 <MX_GPIO_Init>
  MX_USB_Device_Init();
 8000492:	f009 fa27 	bl	80098e4 <MX_USB_Device_Init>
  MX_TIM1_Init();
 8000496:	f000 f8ff 	bl	8000698 <MX_TIM1_Init>
  MX_TIM2_Init();
 800049a:	f000 f957 	bl	800074c <MX_TIM2_Init>
  MX_TIM3_Init();
 800049e:	f000 f9c5 	bl	800082c <MX_TIM3_Init>
  MX_TIM4_Init();
 80004a2:	f000 fa19 	bl	80008d8 <MX_TIM4_Init>
  MX_TIM15_Init();
 80004a6:	f000 faf7 	bl	8000a98 <MX_TIM15_Init>
  MX_TIM6_Init();
 80004aa:	f000 fa6b 	bl	8000984 <MX_TIM6_Init>
  MX_TIM8_Init();
 80004ae:	f000 fa9f 	bl	80009f0 <MX_TIM8_Init>

  //start motor PWM



    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80004b2:	2100      	movs	r1, #0
 80004b4:	4837      	ldr	r0, [pc, #220]	; (8000594 <main+0x114>)
 80004b6:	f003 ff63 	bl	8004380 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 80004ba:	2104      	movs	r1, #4
 80004bc:	4835      	ldr	r0, [pc, #212]	; (8000594 <main+0x114>)
 80004be:	f003 ff5f 	bl	8004380 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80004c2:	2108      	movs	r1, #8
 80004c4:	4833      	ldr	r0, [pc, #204]	; (8000594 <main+0x114>)
 80004c6:	f003 ff5b 	bl	8004380 <HAL_TIM_PWM_Start>

    HAL_TIM_PWM_Start(&htim15, TIM_CHANNEL_2);
 80004ca:	2104      	movs	r1, #4
 80004cc:	4832      	ldr	r0, [pc, #200]	; (8000598 <main+0x118>)
 80004ce:	f003 ff57 	bl	8004380 <HAL_TIM_PWM_Start>

    TIM2->CCR1 = 0;
 80004d2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004d6:	2200      	movs	r2, #0
 80004d8:	635a      	str	r2, [r3, #52]	; 0x34
    TIM2->CCR2 = 0;
 80004da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004de:	2200      	movs	r2, #0
 80004e0:	639a      	str	r2, [r3, #56]	; 0x38
    TIM2->CCR3 = 0;
 80004e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004e6:	2200      	movs	r2, #0
 80004e8:	63da      	str	r2, [r3, #60]	; 0x3c
    HAL_Delay(100);
 80004ea:	2064      	movs	r0, #100	; 0x64
 80004ec:	f000 fe84 	bl	80011f8 <HAL_Delay>
        //TIM15->CCR2 = 4875;
    TIM15->CCR2 = 3000;
 80004f0:	4b2a      	ldr	r3, [pc, #168]	; (800059c <main+0x11c>)
 80004f2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80004f6:	639a      	str	r2, [r3, #56]	; 0x38


    toggle_nSleep();
 80004f8:	f7ff ff24 	bl	8000344 <toggle_nSleep>

    //start encoders
        HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80004fc:	2104      	movs	r1, #4
 80004fe:	4828      	ldr	r0, [pc, #160]	; (80005a0 <main+0x120>)
 8000500:	f004 f8e4 	bl	80046cc <HAL_TIM_Encoder_Start>
        HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 8000504:	2104      	movs	r1, #4
 8000506:	4827      	ldr	r0, [pc, #156]	; (80005a4 <main+0x124>)
 8000508:	f004 f8e0 	bl	80046cc <HAL_TIM_Encoder_Start>
        HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 800050c:	2104      	movs	r1, #4
 800050e:	4826      	ldr	r0, [pc, #152]	; (80005a8 <main+0x128>)
 8000510:	f004 f8dc 	bl	80046cc <HAL_TIM_Encoder_Start>


        Feedback feedback = { // (1)
 8000514:	2300      	movs	r3, #0
 8000516:	803b      	strh	r3, [r7, #0]
 8000518:	2300      	movs	r3, #0
 800051a:	807b      	strh	r3, [r7, #2]
 800051c:	2300      	movs	r3, #0
 800051e:	80bb      	strh	r3, [r7, #4]
 8000520:	f64a 23aa 	movw	r3, #43690	; 0xaaaa
 8000524:	80fb      	strh	r3, [r7, #6]
        	        .delimiter = 0xAAAA
        	    };


        //Thrower_Send(0);
    HAL_TIM_Base_Start_IT(&htim6);
 8000526:	4821      	ldr	r0, [pc, #132]	; (80005ac <main+0x12c>)
 8000528:	f003 fe68 	bl	80041fc <HAL_TIM_Base_Start_IT>
		  //TIM15->CCR2 = 61750;
		  //HAL_Delay(100);
		  //TIM15->CCR2 = 65535;
	   //}

  if (isCommandReceived) {
 800052c:	4b20      	ldr	r3, [pc, #128]	; (80005b0 <main+0x130>)
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	2b00      	cmp	r3, #0
 8000534:	d0fa      	beq.n	800052c <main+0xac>
		isCommandReceived = 0;
 8000536:	4b1e      	ldr	r3, [pc, #120]	; (80005b0 <main+0x130>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
		toggle_nSleep();
 800053c:	f7ff ff02 	bl	8000344 <toggle_nSleep>
		HAL_GPIO_TogglePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin);
 8000540:	2101      	movs	r1, #1
 8000542:	481c      	ldr	r0, [pc, #112]	; (80005b4 <main+0x134>)
 8000544:	f001 f924 	bl	8001790 <HAL_GPIO_TogglePin>

		M1.speed = command.speed1;
 8000548:	4b1b      	ldr	r3, [pc, #108]	; (80005b8 <main+0x138>)
 800054a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800054e:	4b1b      	ldr	r3, [pc, #108]	; (80005bc <main+0x13c>)
 8000550:	801a      	strh	r2, [r3, #0]
		M2.speed = command.speed2;
 8000552:	4b19      	ldr	r3, [pc, #100]	; (80005b8 <main+0x138>)
 8000554:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000558:	4b19      	ldr	r3, [pc, #100]	; (80005c0 <main+0x140>)
 800055a:	801a      	strh	r2, [r3, #0]
		M3.speed = command.speed3;
 800055c:	4b16      	ldr	r3, [pc, #88]	; (80005b8 <main+0x138>)
 800055e:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <main+0x144>)
 8000564:	801a      	strh	r2, [r3, #0]

		TIM15->CCR2 = command.throwerSpeed;
 8000566:	4b14      	ldr	r3, [pc, #80]	; (80005b8 <main+0x138>)
 8000568:	88da      	ldrh	r2, [r3, #6]
 800056a:	4b0c      	ldr	r3, [pc, #48]	; (800059c <main+0x11c>)
 800056c:	639a      	str	r2, [r3, #56]	; 0x38

		//Thrower_Send(command.throwerSpeed);


		feedback.speed1 = M1.speed;
 800056e:	4b13      	ldr	r3, [pc, #76]	; (80005bc <main+0x13c>)
 8000570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000574:	803b      	strh	r3, [r7, #0]
		feedback.speed2 = M2.speed;
 8000576:	4b12      	ldr	r3, [pc, #72]	; (80005c0 <main+0x140>)
 8000578:	f9b3 3000 	ldrsh.w	r3, [r3]
 800057c:	807b      	strh	r3, [r7, #2]
		feedback.speed3 = M3.speed;
 800057e:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <main+0x144>)
 8000580:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000584:	80bb      	strh	r3, [r7, #4]

		CDC_Transmit_FS(&feedback, sizeof(feedback));
 8000586:	463b      	mov	r3, r7
 8000588:	2108      	movs	r1, #8
 800058a:	4618      	mov	r0, r3
 800058c:	f009 fa6c 	bl	8009a68 <CDC_Transmit_FS>
  if (isCommandReceived) {
 8000590:	e7cc      	b.n	800052c <main+0xac>
 8000592:	bf00      	nop
 8000594:	20000234 	.word	0x20000234
 8000598:	200003b0 	.word	0x200003b0
 800059c:	40014000 	.word	0x40014000
 80005a0:	200001e8 	.word	0x200001e8
 80005a4:	20000280 	.word	0x20000280
 80005a8:	200002cc 	.word	0x200002cc
 80005ac:	20000318 	.word	0x20000318
 80005b0:	200003fc 	.word	0x200003fc
 80005b4:	48001400 	.word	0x48001400
 80005b8:	2000003c 	.word	0x2000003c
 80005bc:	20000000 	.word	0x20000000
 80005c0:	20000014 	.word	0x20000014
 80005c4:	20000028 	.word	0x20000028

080005c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b0a4      	sub	sp, #144	; 0x90
 80005cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ce:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80005d2:	2238      	movs	r2, #56	; 0x38
 80005d4:	2100      	movs	r1, #0
 80005d6:	4618      	mov	r0, r3
 80005d8:	f009 fec6 	bl	800a368 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005dc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80005e0:	2200      	movs	r2, #0
 80005e2:	601a      	str	r2, [r3, #0]
 80005e4:	605a      	str	r2, [r3, #4]
 80005e6:	609a      	str	r2, [r3, #8]
 80005e8:	60da      	str	r2, [r3, #12]
 80005ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005ec:	463b      	mov	r3, r7
 80005ee:	2244      	movs	r2, #68	; 0x44
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f009 feb8 	bl	800a368 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005f8:	2000      	movs	r0, #0
 80005fa:	f002 fe17 	bl	800322c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI48;
 80005fe:	2322      	movs	r3, #34	; 0x22
 8000600:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000602:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000606:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2340      	movs	r3, #64	; 0x40
 800060a:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000610:	2302      	movs	r3, #2
 8000612:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000614:	2302      	movs	r3, #2
 8000616:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000618:	2301      	movs	r3, #1
 800061a:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLN = 20;
 800061c:	2314      	movs	r3, #20
 800061e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000622:	2302      	movs	r3, #2
 8000624:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV4;
 8000628:	2304      	movs	r3, #4
 800062a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800062e:	2302      	movs	r3, #2
 8000630:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000634:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000638:	4618      	mov	r0, r3
 800063a:	f002 fe9b 	bl	8003374 <HAL_RCC_OscConfig>
 800063e:	4603      	mov	r3, r0
 8000640:	2b00      	cmp	r3, #0
 8000642:	d001      	beq.n	8000648 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8000644:	f000 fb46 	bl	8000cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000648:	230f      	movs	r3, #15
 800064a:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064c:	2303      	movs	r3, #3
 800064e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	657b      	str	r3, [r7, #84]	; 0x54

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800065c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000660:	2104      	movs	r1, #4
 8000662:	4618      	mov	r0, r3
 8000664:	f003 f99e 	bl	80039a4 <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800066e:	f000 fb31 	bl	8000cd4 <Error_Handler>
  }
  /** Initializes the peripherals clocks
    */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000672:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000676:	603b      	str	r3, [r7, #0]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000678:	2300      	movs	r3, #0
 800067a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800067c:	463b      	mov	r3, r7
 800067e:	4618      	mov	r0, r3
 8000680:	f003 fb74 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d001      	beq.n	800068e <SystemClock_Config+0xc6>
    {
      Error_Handler();
 800068a:	f000 fb23 	bl	8000cd4 <Error_Handler>
    }
}
 800068e:	bf00      	nop
 8000690:	3790      	adds	r7, #144	; 0x90
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
	...

08000698 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08c      	sub	sp, #48	; 0x30
 800069c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800069e:	f107 030c 	add.w	r3, r7, #12
 80006a2:	2224      	movs	r2, #36	; 0x24
 80006a4:	2100      	movs	r1, #0
 80006a6:	4618      	mov	r0, r3
 80006a8:	f009 fe5e 	bl	800a368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80006ac:	463b      	mov	r3, r7
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
 80006b4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80006b6:	4b23      	ldr	r3, [pc, #140]	; (8000744 <MX_TIM1_Init+0xac>)
 80006b8:	4a23      	ldr	r2, [pc, #140]	; (8000748 <MX_TIM1_Init+0xb0>)
 80006ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80006bc:	4b21      	ldr	r3, [pc, #132]	; (8000744 <MX_TIM1_Init+0xac>)
 80006be:	2200      	movs	r2, #0
 80006c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80006c2:	4b20      	ldr	r3, [pc, #128]	; (8000744 <MX_TIM1_Init+0xac>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80006c8:	4b1e      	ldr	r3, [pc, #120]	; (8000744 <MX_TIM1_Init+0xac>)
 80006ca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80006ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80006d0:	4b1c      	ldr	r3, [pc, #112]	; (8000744 <MX_TIM1_Init+0xac>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80006d6:	4b1b      	ldr	r3, [pc, #108]	; (8000744 <MX_TIM1_Init+0xac>)
 80006d8:	2200      	movs	r2, #0
 80006da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006dc:	4b19      	ldr	r3, [pc, #100]	; (8000744 <MX_TIM1_Init+0xac>)
 80006de:	2200      	movs	r2, #0
 80006e0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80006e2:	2303      	movs	r3, #3
 80006e4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80006e6:	2300      	movs	r3, #0
 80006e8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80006ea:	2301      	movs	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80006ee:	2300      	movs	r3, #0
 80006f0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80006f6:	2300      	movs	r3, #0
 80006f8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80006fa:	2301      	movs	r3, #1
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8000706:	f107 030c 	add.w	r3, r7, #12
 800070a:	4619      	mov	r1, r3
 800070c:	480d      	ldr	r0, [pc, #52]	; (8000744 <MX_TIM1_Init+0xac>)
 800070e:	f003 ff37 	bl	8004580 <HAL_TIM_Encoder_Init>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8000718:	f000 fadc 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800071c:	2300      	movs	r3, #0
 800071e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000720:	2300      	movs	r3, #0
 8000722:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000724:	2300      	movs	r3, #0
 8000726:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000728:	463b      	mov	r3, r7
 800072a:	4619      	mov	r1, r3
 800072c:	4805      	ldr	r0, [pc, #20]	; (8000744 <MX_TIM1_Init+0xac>)
 800072e:	f005 f859 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000738:	f000 facc 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800073c:	bf00      	nop
 800073e:	3730      	adds	r7, #48	; 0x30
 8000740:	46bd      	mov	sp, r7
 8000742:	bd80      	pop	{r7, pc}
 8000744:	200001e8 	.word	0x200001e8
 8000748:	40012c00 	.word	0x40012c00

0800074c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000752:	f107 031c 	add.w	r3, r7, #28
 8000756:	2200      	movs	r2, #0
 8000758:	601a      	str	r2, [r3, #0]
 800075a:	605a      	str	r2, [r3, #4]
 800075c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800075e:	463b      	mov	r3, r7
 8000760:	2200      	movs	r2, #0
 8000762:	601a      	str	r2, [r3, #0]
 8000764:	605a      	str	r2, [r3, #4]
 8000766:	609a      	str	r2, [r3, #8]
 8000768:	60da      	str	r2, [r3, #12]
 800076a:	611a      	str	r2, [r3, #16]
 800076c:	615a      	str	r2, [r3, #20]
 800076e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000770:	4b2d      	ldr	r3, [pc, #180]	; (8000828 <MX_TIM2_Init+0xdc>)
 8000772:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000776:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000778:	4b2b      	ldr	r3, [pc, #172]	; (8000828 <MX_TIM2_Init+0xdc>)
 800077a:	2200      	movs	r2, #0
 800077c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800077e:	4b2a      	ldr	r3, [pc, #168]	; (8000828 <MX_TIM2_Init+0xdc>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000784:	4b28      	ldr	r3, [pc, #160]	; (8000828 <MX_TIM2_Init+0xdc>)
 8000786:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800078a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800078c:	4b26      	ldr	r3, [pc, #152]	; (8000828 <MX_TIM2_Init+0xdc>)
 800078e:	2200      	movs	r2, #0
 8000790:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000792:	4b25      	ldr	r3, [pc, #148]	; (8000828 <MX_TIM2_Init+0xdc>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000798:	4823      	ldr	r0, [pc, #140]	; (8000828 <MX_TIM2_Init+0xdc>)
 800079a:	f003 fd99 	bl	80042d0 <HAL_TIM_PWM_Init>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d001      	beq.n	80007a8 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80007a4:	f000 fa96 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a8:	2300      	movs	r3, #0
 80007aa:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007ac:	2300      	movs	r3, #0
 80007ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007b0:	f107 031c 	add.w	r3, r7, #28
 80007b4:	4619      	mov	r1, r3
 80007b6:	481c      	ldr	r0, [pc, #112]	; (8000828 <MX_TIM2_Init+0xdc>)
 80007b8:	f005 f814 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80007c2:	f000 fa87 	bl	8000cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c6:	2360      	movs	r3, #96	; 0x60
 80007c8:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80007ca:	2300      	movs	r3, #0
 80007cc:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007ce:	2300      	movs	r3, #0
 80007d0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d2:	2300      	movs	r3, #0
 80007d4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007d6:	463b      	mov	r3, r7
 80007d8:	2200      	movs	r2, #0
 80007da:	4619      	mov	r1, r3
 80007dc:	4812      	ldr	r0, [pc, #72]	; (8000828 <MX_TIM2_Init+0xdc>)
 80007de:	f004 f983 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d001      	beq.n	80007ec <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 80007e8:	f000 fa74 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	2204      	movs	r2, #4
 80007f0:	4619      	mov	r1, r3
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_TIM2_Init+0xdc>)
 80007f4:	f004 f978 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80007fe:	f000 fa69 	bl	8000cd4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000802:	463b      	mov	r3, r7
 8000804:	2208      	movs	r2, #8
 8000806:	4619      	mov	r1, r3
 8000808:	4807      	ldr	r0, [pc, #28]	; (8000828 <MX_TIM2_Init+0xdc>)
 800080a:	f004 f96d 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 800080e:	4603      	mov	r3, r0
 8000810:	2b00      	cmp	r3, #0
 8000812:	d001      	beq.n	8000818 <MX_TIM2_Init+0xcc>
  {
    Error_Handler();
 8000814:	f000 fa5e 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000818:	4803      	ldr	r0, [pc, #12]	; (8000828 <MX_TIM2_Init+0xdc>)
 800081a:	f000 fb9f 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 800081e:	bf00      	nop
 8000820:	3728      	adds	r7, #40	; 0x28
 8000822:	46bd      	mov	sp, r7
 8000824:	bd80      	pop	{r7, pc}
 8000826:	bf00      	nop
 8000828:	20000234 	.word	0x20000234

0800082c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08c      	sub	sp, #48	; 0x30
 8000830:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000832:	f107 030c 	add.w	r3, r7, #12
 8000836:	2224      	movs	r2, #36	; 0x24
 8000838:	2100      	movs	r1, #0
 800083a:	4618      	mov	r0, r3
 800083c:	f009 fd94 	bl	800a368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000840:	463b      	mov	r3, r7
 8000842:	2200      	movs	r2, #0
 8000844:	601a      	str	r2, [r3, #0]
 8000846:	605a      	str	r2, [r3, #4]
 8000848:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800084a:	4b21      	ldr	r3, [pc, #132]	; (80008d0 <MX_TIM3_Init+0xa4>)
 800084c:	4a21      	ldr	r2, [pc, #132]	; (80008d4 <MX_TIM3_Init+0xa8>)
 800084e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000850:	4b1f      	ldr	r3, [pc, #124]	; (80008d0 <MX_TIM3_Init+0xa4>)
 8000852:	2200      	movs	r2, #0
 8000854:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000856:	4b1e      	ldr	r3, [pc, #120]	; (80008d0 <MX_TIM3_Init+0xa4>)
 8000858:	2200      	movs	r2, #0
 800085a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800085c:	4b1c      	ldr	r3, [pc, #112]	; (80008d0 <MX_TIM3_Init+0xa4>)
 800085e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000862:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000864:	4b1a      	ldr	r3, [pc, #104]	; (80008d0 <MX_TIM3_Init+0xa4>)
 8000866:	2200      	movs	r2, #0
 8000868:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800086a:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MX_TIM3_Init+0xa4>)
 800086c:	2200      	movs	r2, #0
 800086e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000870:	2303      	movs	r3, #3
 8000872:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000874:	2300      	movs	r3, #0
 8000876:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000878:	2301      	movs	r3, #1
 800087a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000880:	2300      	movs	r3, #0
 8000882:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000884:	2300      	movs	r3, #0
 8000886:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000888:	2301      	movs	r3, #1
 800088a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000890:	2300      	movs	r3, #0
 8000892:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000894:	f107 030c 	add.w	r3, r7, #12
 8000898:	4619      	mov	r1, r3
 800089a:	480d      	ldr	r0, [pc, #52]	; (80008d0 <MX_TIM3_Init+0xa4>)
 800089c:	f003 fe70 	bl	8004580 <HAL_TIM_Encoder_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80008a6:	f000 fa15 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008ae:	2300      	movs	r3, #0
 80008b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80008b2:	463b      	mov	r3, r7
 80008b4:	4619      	mov	r1, r3
 80008b6:	4806      	ldr	r0, [pc, #24]	; (80008d0 <MX_TIM3_Init+0xa4>)
 80008b8:	f004 ff94 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d001      	beq.n	80008c6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80008c2:	f000 fa07 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008c6:	bf00      	nop
 80008c8:	3730      	adds	r7, #48	; 0x30
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20000280 	.word	0x20000280
 80008d4:	40000400 	.word	0x40000400

080008d8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b08c      	sub	sp, #48	; 0x30
 80008dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80008de:	f107 030c 	add.w	r3, r7, #12
 80008e2:	2224      	movs	r2, #36	; 0x24
 80008e4:	2100      	movs	r1, #0
 80008e6:	4618      	mov	r0, r3
 80008e8:	f009 fd3e 	bl	800a368 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ec:	463b      	mov	r3, r7
 80008ee:	2200      	movs	r2, #0
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	605a      	str	r2, [r3, #4]
 80008f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80008f6:	4b21      	ldr	r3, [pc, #132]	; (800097c <MX_TIM4_Init+0xa4>)
 80008f8:	4a21      	ldr	r2, [pc, #132]	; (8000980 <MX_TIM4_Init+0xa8>)
 80008fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80008fc:	4b1f      	ldr	r3, [pc, #124]	; (800097c <MX_TIM4_Init+0xa4>)
 80008fe:	2200      	movs	r2, #0
 8000900:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000902:	4b1e      	ldr	r3, [pc, #120]	; (800097c <MX_TIM4_Init+0xa4>)
 8000904:	2200      	movs	r2, #0
 8000906:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8000908:	4b1c      	ldr	r3, [pc, #112]	; (800097c <MX_TIM4_Init+0xa4>)
 800090a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800090e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <MX_TIM4_Init+0xa4>)
 8000912:	2200      	movs	r2, #0
 8000914:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <MX_TIM4_Init+0xa4>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800091c:	2303      	movs	r3, #3
 800091e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000920:	2300      	movs	r3, #0
 8000922:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000924:	2301      	movs	r3, #1
 8000926:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000928:	2300      	movs	r3, #0
 800092a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000934:	2301      	movs	r3, #1
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	480d      	ldr	r0, [pc, #52]	; (800097c <MX_TIM4_Init+0xa4>)
 8000948:	f003 fe1a 	bl	8004580 <HAL_TIM_Encoder_Init>
 800094c:	4603      	mov	r3, r0
 800094e:	2b00      	cmp	r3, #0
 8000950:	d001      	beq.n	8000956 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8000952:	f000 f9bf 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000956:	2300      	movs	r3, #0
 8000958:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800095a:	2300      	movs	r3, #0
 800095c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800095e:	463b      	mov	r3, r7
 8000960:	4619      	mov	r1, r3
 8000962:	4806      	ldr	r0, [pc, #24]	; (800097c <MX_TIM4_Init+0xa4>)
 8000964:	f004 ff3e 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000968:	4603      	mov	r3, r0
 800096a:	2b00      	cmp	r3, #0
 800096c:	d001      	beq.n	8000972 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800096e:	f000 f9b1 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000972:	bf00      	nop
 8000974:	3730      	adds	r7, #48	; 0x30
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200002cc 	.word	0x200002cc
 8000980:	40000800 	.word	0x40000800

08000984 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000994:	4b14      	ldr	r3, [pc, #80]	; (80009e8 <MX_TIM6_Init+0x64>)
 8000996:	4a15      	ldr	r2, [pc, #84]	; (80009ec <MX_TIM6_Init+0x68>)
 8000998:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 24;
 800099a:	4b13      	ldr	r3, [pc, #76]	; (80009e8 <MX_TIM6_Init+0x64>)
 800099c:	2218      	movs	r2, #24
 800099e:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009a0:	4b11      	ldr	r3, [pc, #68]	; (80009e8 <MX_TIM6_Init+0x64>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 63999;
 80009a6:	4b10      	ldr	r3, [pc, #64]	; (80009e8 <MX_TIM6_Init+0x64>)
 80009a8:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 80009ac:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009ae:	4b0e      	ldr	r3, [pc, #56]	; (80009e8 <MX_TIM6_Init+0x64>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80009b4:	480c      	ldr	r0, [pc, #48]	; (80009e8 <MX_TIM6_Init+0x64>)
 80009b6:	f003 fbc9 	bl	800414c <HAL_TIM_Base_Init>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80009c0:	f000 f988 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009c4:	2300      	movs	r3, #0
 80009c6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80009cc:	1d3b      	adds	r3, r7, #4
 80009ce:	4619      	mov	r1, r3
 80009d0:	4805      	ldr	r0, [pc, #20]	; (80009e8 <MX_TIM6_Init+0x64>)
 80009d2:	f004 ff07 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80009dc:	f000 f97a 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80009e0:	bf00      	nop
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000318 	.word	0x20000318
 80009ec:	40001000 	.word	0x40001000

080009f0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b088      	sub	sp, #32
 80009f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009f6:	f107 0310 	add.w	r3, r7, #16
 80009fa:	2200      	movs	r2, #0
 80009fc:	601a      	str	r2, [r3, #0]
 80009fe:	605a      	str	r2, [r3, #4]
 8000a00:	609a      	str	r2, [r3, #8]
 8000a02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	2200      	movs	r2, #0
 8000a08:	601a      	str	r2, [r3, #0]
 8000a0a:	605a      	str	r2, [r3, #4]
 8000a0c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <MX_TIM8_Init+0xa0>)
 8000a10:	4a20      	ldr	r2, [pc, #128]	; (8000a94 <MX_TIM8_Init+0xa4>)
 8000a12:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8000a14:	4b1e      	ldr	r3, [pc, #120]	; (8000a90 <MX_TIM8_Init+0xa0>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a1a:	4b1d      	ldr	r3, [pc, #116]	; (8000a90 <MX_TIM8_Init+0xa0>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1066;
 8000a20:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <MX_TIM8_Init+0xa0>)
 8000a22:	f240 422a 	movw	r2, #1066	; 0x42a
 8000a26:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <MX_TIM8_Init+0xa0>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8000a2e:	4b18      	ldr	r3, [pc, #96]	; (8000a90 <MX_TIM8_Init+0xa0>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a34:	4b16      	ldr	r3, [pc, #88]	; (8000a90 <MX_TIM8_Init+0xa0>)
 8000a36:	2200      	movs	r2, #0
 8000a38:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8000a3a:	4815      	ldr	r0, [pc, #84]	; (8000a90 <MX_TIM8_Init+0xa0>)
 8000a3c:	f003 fb86 	bl	800414c <HAL_TIM_Base_Init>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d001      	beq.n	8000a4a <MX_TIM8_Init+0x5a>
  {
    Error_Handler();
 8000a46:	f000 f945 	bl	8000cd4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a4a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a4e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8000a50:	f107 0310 	add.w	r3, r7, #16
 8000a54:	4619      	mov	r1, r3
 8000a56:	480e      	ldr	r0, [pc, #56]	; (8000a90 <MX_TIM8_Init+0xa0>)
 8000a58:	f004 f95a 	bl	8004d10 <HAL_TIM_ConfigClockSource>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_TIM8_Init+0x76>
  {
    Error_Handler();
 8000a62:	f000 f937 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a66:	2300      	movs	r3, #0
 8000a68:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8000a72:	1d3b      	adds	r3, r7, #4
 8000a74:	4619      	mov	r1, r3
 8000a76:	4806      	ldr	r0, [pc, #24]	; (8000a90 <MX_TIM8_Init+0xa0>)
 8000a78:	f004 feb4 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8000a82:	f000 f927 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8000a86:	bf00      	nop
 8000a88:	3720      	adds	r7, #32
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}
 8000a8e:	bf00      	nop
 8000a90:	20000364 	.word	0x20000364
 8000a94:	40013400 	.word	0x40013400

08000a98 <MX_TIM15_Init>:
  * @brief TIM15 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM15_Init(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b098      	sub	sp, #96	; 0x60
 8000a9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM15_Init 0 */

  /* USER CODE END TIM15_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a9e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	601a      	str	r2, [r3, #0]
 8000aa6:	605a      	str	r2, [r3, #4]
 8000aa8:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000aaa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2234      	movs	r2, #52	; 0x34
 8000ac2:	2100      	movs	r1, #0
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f009 fc4f 	bl	800a368 <memset>

  /* USER CODE BEGIN TIM15_Init 1 */

  /* USER CODE END TIM15_Init 1 */
  htim15.Instance = TIM15;
 8000aca:	4b34      	ldr	r3, [pc, #208]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000acc:	4a34      	ldr	r2, [pc, #208]	; (8000ba0 <MX_TIM15_Init+0x108>)
 8000ace:	601a      	str	r2, [r3, #0]
  htim15.Init.Prescaler = 49;
 8000ad0:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000ad2:	2231      	movs	r2, #49	; 0x31
 8000ad4:	605a      	str	r2, [r3, #4]
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ad6:	4b31      	ldr	r3, [pc, #196]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  htim15.Init.Period = 63999;
 8000adc:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000ade:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8000ae2:	60da      	str	r2, [r3, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	611a      	str	r2, [r3, #16]
  htim15.Init.RepetitionCounter = 0;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	615a      	str	r2, [r3, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000af0:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim15) != HAL_OK)
 8000af6:	4829      	ldr	r0, [pc, #164]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000af8:	f003 fbea 	bl	80042d0 <HAL_TIM_PWM_Init>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <MX_TIM15_Init+0x6e>
  {
    Error_Handler();
 8000b02:	f000 f8e7 	bl	8000cd4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b06:	2300      	movs	r3, #0
 8000b08:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8000b0e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b12:	4619      	mov	r1, r3
 8000b14:	4821      	ldr	r0, [pc, #132]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000b16:	f004 fe65 	bl	80057e4 <HAL_TIMEx_MasterConfigSynchronization>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_TIM15_Init+0x8c>
  {
    Error_Handler();
 8000b20:	f000 f8d8 	bl	8000cd4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000b24:	2360      	movs	r3, #96	; 0x60
 8000b26:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 0;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000b30:	2300      	movs	r3, #0
 8000b32:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim15, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b40:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b44:	2204      	movs	r2, #4
 8000b46:	4619      	mov	r1, r3
 8000b48:	4814      	ldr	r0, [pc, #80]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000b4a:	f003 ffcd 	bl	8004ae8 <HAL_TIM_PWM_ConfigChannel>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <MX_TIM15_Init+0xc0>
  {
    Error_Handler();
 8000b54:	f000 f8be 	bl	8000cd4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000b60:	2300      	movs	r3, #0
 8000b62:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000b6c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b70:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000b72:	2300      	movs	r3, #0
 8000b74:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000b76:	2300      	movs	r3, #0
 8000b78:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim15, &sBreakDeadTimeConfig) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4807      	ldr	r0, [pc, #28]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000b80:	f004 feb2 	bl	80058e8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_TIM15_Init+0xf6>
  {
    Error_Handler();
 8000b8a:	f000 f8a3 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM15_Init 2 */

  /* USER CODE END TIM15_Init 2 */
  HAL_TIM_MspPostInit(&htim15);
 8000b8e:	4803      	ldr	r0, [pc, #12]	; (8000b9c <MX_TIM15_Init+0x104>)
 8000b90:	f000 f9e4 	bl	8000f5c <HAL_TIM_MspPostInit>

}
 8000b94:	bf00      	nop
 8000b96:	3760      	adds	r7, #96	; 0x60
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}
 8000b9c:	200003b0 	.word	0x200003b0
 8000ba0:	40014000 	.word	0x40014000

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b08a      	sub	sp, #40	; 0x28
 8000ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	f107 0314 	add.w	r3, r7, #20
 8000bae:	2200      	movs	r2, #0
 8000bb0:	601a      	str	r2, [r3, #0]
 8000bb2:	605a      	str	r2, [r3, #4]
 8000bb4:	609a      	str	r2, [r3, #8]
 8000bb6:	60da      	str	r2, [r3, #12]
 8000bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bba:	4b42      	ldr	r3, [pc, #264]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bbe:	4a41      	ldr	r2, [pc, #260]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bc0:	f043 0320 	orr.w	r3, r3, #32
 8000bc4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bc6:	4b3f      	ldr	r3, [pc, #252]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bca:	f003 0320 	and.w	r3, r3, #32
 8000bce:	613b      	str	r3, [r7, #16]
 8000bd0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd2:	4b3c      	ldr	r3, [pc, #240]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bd6:	4a3b      	ldr	r2, [pc, #236]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bd8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bde:	4b39      	ldr	r3, [pc, #228]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000be2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bea:	4b36      	ldr	r3, [pc, #216]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bee:	4a35      	ldr	r2, [pc, #212]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bf0:	f043 0301 	orr.w	r3, r3, #1
 8000bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bf6:	4b33      	ldr	r3, [pc, #204]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bfa:	f003 0301 	and.w	r3, r3, #1
 8000bfe:	60bb      	str	r3, [r7, #8]
 8000c00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c02:	4b30      	ldr	r3, [pc, #192]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c06:	4a2f      	ldr	r2, [pc, #188]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000c08:	f043 0302 	orr.w	r3, r3, #2
 8000c0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c0e:	4b2d      	ldr	r3, [pc, #180]	; (8000cc4 <MX_GPIO_Init+0x120>)
 8000c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c12:	f003 0302 	and.w	r3, r3, #2
 8000c16:	607b      	str	r3, [r7, #4]
 8000c18:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DEBUG_LED_GPIO_Port, DEBUG_LED_Pin, GPIO_PIN_RESET);
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	2101      	movs	r1, #1
 8000c1e:	482a      	ldr	r0, [pc, #168]	; (8000cc8 <MX_GPIO_Init+0x124>)
 8000c20:	f000 fd9e 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_10, GPIO_PIN_RESET);
 8000c24:	2200      	movs	r2, #0
 8000c26:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c2a:	4828      	ldr	r0, [pc, #160]	; (8000ccc <MX_GPIO_Init+0x128>)
 8000c2c:	f000 fd98 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, M1_DIR_A_Pin|M2_DIR_A_Pin|M3_DIR_A_Pin, GPIO_PIN_RESET);
 8000c30:	2200      	movs	r2, #0
 8000c32:	21e0      	movs	r1, #224	; 0xe0
 8000c34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c38:	f000 fd92 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SLEEP_N_GPIO_Port, SLEEP_N_Pin, GPIO_PIN_RESET);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2108      	movs	r1, #8
 8000c40:	4823      	ldr	r0, [pc, #140]	; (8000cd0 <MX_GPIO_Init+0x12c>)
 8000c42:	f000 fd8d 	bl	8001760 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DEBUG_LED_Pin */
  GPIO_InitStruct.Pin = DEBUG_LED_Pin;
 8000c46:	2301      	movs	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c52:	2300      	movs	r3, #0
 8000c54:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(DEBUG_LED_GPIO_Port, &GPIO_InitStruct);
 8000c56:	f107 0314 	add.w	r3, r7, #20
 8000c5a:	4619      	mov	r1, r3
 8000c5c:	481a      	ldr	r0, [pc, #104]	; (8000cc8 <MX_GPIO_Init+0x124>)
 8000c5e:	f000 fbfd 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000c66:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c68:	2301      	movs	r3, #1
 8000c6a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c74:	f107 0314 	add.w	r3, r7, #20
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4814      	ldr	r0, [pc, #80]	; (8000ccc <MX_GPIO_Init+0x128>)
 8000c7c:	f000 fbee 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pins : M1_DIR_A_Pin M2_DIR_A_Pin M3_DIR_A_Pin */
  GPIO_InitStruct.Pin = M1_DIR_A_Pin|M2_DIR_A_Pin|M3_DIR_A_Pin;
 8000c80:	23e0      	movs	r3, #224	; 0xe0
 8000c82:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c84:	2301      	movs	r3, #1
 8000c86:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c90:	f107 0314 	add.w	r3, r7, #20
 8000c94:	4619      	mov	r1, r3
 8000c96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c9a:	f000 fbdf 	bl	800145c <HAL_GPIO_Init>

  /*Configure GPIO pin : SLEEP_N_Pin */
  GPIO_InitStruct.Pin = SLEEP_N_Pin;
 8000c9e:	2308      	movs	r3, #8
 8000ca0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000caa:	2300      	movs	r3, #0
 8000cac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SLEEP_N_GPIO_Port, &GPIO_InitStruct);
 8000cae:	f107 0314 	add.w	r3, r7, #20
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <MX_GPIO_Init+0x12c>)
 8000cb6:	f000 fbd1 	bl	800145c <HAL_GPIO_Init>

}
 8000cba:	bf00      	nop
 8000cbc:	3728      	adds	r7, #40	; 0x28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40021000 	.word	0x40021000
 8000cc8:	48001400 	.word	0x48001400
 8000ccc:	48001800 	.word	0x48001800
 8000cd0:	48000400 	.word	0x48000400

08000cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cd8:	b672      	cpsid	i
}
 8000cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <Error_Handler+0x8>
	...

08000ce0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ce6:	4b0f      	ldr	r3, [pc, #60]	; (8000d24 <HAL_MspInit+0x44>)
 8000ce8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cea:	4a0e      	ldr	r2, [pc, #56]	; (8000d24 <HAL_MspInit+0x44>)
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6613      	str	r3, [r2, #96]	; 0x60
 8000cf2:	4b0c      	ldr	r3, [pc, #48]	; (8000d24 <HAL_MspInit+0x44>)
 8000cf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cf6:	f003 0301 	and.w	r3, r3, #1
 8000cfa:	607b      	str	r3, [r7, #4]
 8000cfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cfe:	4b09      	ldr	r3, [pc, #36]	; (8000d24 <HAL_MspInit+0x44>)
 8000d00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <HAL_MspInit+0x44>)
 8000d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d08:	6593      	str	r3, [r2, #88]	; 0x58
 8000d0a:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_MspInit+0x44>)
 8000d0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40021000 	.word	0x40021000

08000d28 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b08e      	sub	sp, #56	; 0x38
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a46      	ldr	r2, [pc, #280]	; (8000e60 <HAL_TIM_Encoder_MspInit+0x138>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d12a      	bne.n	8000da0 <HAL_TIM_Encoder_MspInit+0x78>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000d4a:	4b46      	ldr	r3, [pc, #280]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d4e:	4a45      	ldr	r2, [pc, #276]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000d54:	6613      	str	r3, [r2, #96]	; 0x60
 8000d56:	4b43      	ldr	r3, [pc, #268]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000d5e:	623b      	str	r3, [r7, #32]
 8000d60:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d62:	4b40      	ldr	r3, [pc, #256]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d66:	4a3f      	ldr	r2, [pc, #252]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d68:	f043 0301 	orr.w	r3, r3, #1
 8000d6c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d72:	f003 0301 	and.w	r3, r3, #1
 8000d76:	61fb      	str	r3, [r7, #28]
 8000d78:	69fb      	ldr	r3, [r7, #28]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = M1_ENC_A_Pin|M1_ENC_B_Pin;
 8000d7a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d7e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d80:	2302      	movs	r3, #2
 8000d82:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d84:	2300      	movs	r3, #0
 8000d86:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8000d8c:	2306      	movs	r3, #6
 8000d8e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d94:	4619      	mov	r1, r3
 8000d96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d9a:	f000 fb5f 	bl	800145c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000d9e:	e05a      	b.n	8000e56 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM3)
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a30      	ldr	r2, [pc, #192]	; (8000e68 <HAL_TIM_Encoder_MspInit+0x140>)
 8000da6:	4293      	cmp	r3, r2
 8000da8:	d128      	bne.n	8000dfc <HAL_TIM_Encoder_MspInit+0xd4>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000daa:	4b2e      	ldr	r3, [pc, #184]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dae:	4a2d      	ldr	r2, [pc, #180]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000db0:	f043 0302 	orr.w	r3, r3, #2
 8000db4:	6593      	str	r3, [r2, #88]	; 0x58
 8000db6:	4b2b      	ldr	r3, [pc, #172]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dba:	f003 0302 	and.w	r3, r3, #2
 8000dbe:	61bb      	str	r3, [r7, #24]
 8000dc0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dc2:	4b28      	ldr	r3, [pc, #160]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc6:	4a27      	ldr	r2, [pc, #156]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dc8:	f043 0302 	orr.w	r3, r3, #2
 8000dcc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dce:	4b25      	ldr	r3, [pc, #148]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000dd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd2:	f003 0302 	and.w	r3, r3, #2
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = M2_ENC_A_Pin|M2_ENC_B_Pin;
 8000dda:	2330      	movs	r3, #48	; 0x30
 8000ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dde:	2302      	movs	r3, #2
 8000de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000de2:	2300      	movs	r3, #0
 8000de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de6:	2300      	movs	r3, #0
 8000de8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000dea:	2302      	movs	r3, #2
 8000dec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000df2:	4619      	mov	r1, r3
 8000df4:	481d      	ldr	r0, [pc, #116]	; (8000e6c <HAL_TIM_Encoder_MspInit+0x144>)
 8000df6:	f000 fb31 	bl	800145c <HAL_GPIO_Init>
}
 8000dfa:	e02c      	b.n	8000e56 <HAL_TIM_Encoder_MspInit+0x12e>
  else if(htim_encoder->Instance==TIM4)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a1b      	ldr	r2, [pc, #108]	; (8000e70 <HAL_TIM_Encoder_MspInit+0x148>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d127      	bne.n	8000e56 <HAL_TIM_Encoder_MspInit+0x12e>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000e06:	4b17      	ldr	r3, [pc, #92]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e0a:	4a16      	ldr	r2, [pc, #88]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e0c:	f043 0304 	orr.w	r3, r3, #4
 8000e10:	6593      	str	r3, [r2, #88]	; 0x58
 8000e12:	4b14      	ldr	r3, [pc, #80]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e16:	f003 0304 	and.w	r3, r3, #4
 8000e1a:	613b      	str	r3, [r7, #16]
 8000e1c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e1e:	4b11      	ldr	r3, [pc, #68]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e22:	4a10      	ldr	r2, [pc, #64]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e24:	f043 0302 	orr.w	r3, r3, #2
 8000e28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e2a:	4b0e      	ldr	r3, [pc, #56]	; (8000e64 <HAL_TIM_Encoder_MspInit+0x13c>)
 8000e2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e2e:	f003 0302 	and.w	r3, r3, #2
 8000e32:	60fb      	str	r3, [r7, #12]
 8000e34:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = M3_ENC_B_Pin|M3_ENC_A_Pin;
 8000e36:	23c0      	movs	r3, #192	; 0xc0
 8000e38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3a:	2302      	movs	r3, #2
 8000e3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e42:	2300      	movs	r3, #0
 8000e44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000e46:	2302      	movs	r3, #2
 8000e48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4806      	ldr	r0, [pc, #24]	; (8000e6c <HAL_TIM_Encoder_MspInit+0x144>)
 8000e52:	f000 fb03 	bl	800145c <HAL_GPIO_Init>
}
 8000e56:	bf00      	nop
 8000e58:	3738      	adds	r7, #56	; 0x38
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40012c00 	.word	0x40012c00
 8000e64:	40021000 	.word	0x40021000
 8000e68:	40000400 	.word	0x40000400
 8000e6c:	48000400 	.word	0x48000400
 8000e70:	40000800 	.word	0x40000800

08000e74 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM2)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e84:	d10c      	bne.n	8000ea0 <HAL_TIM_PWM_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e86:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e8a:	4a11      	ldr	r2, [pc, #68]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e8c:	f043 0301 	orr.w	r3, r3, #1
 8000e90:	6593      	str	r3, [r2, #88]	; 0x58
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000e94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	60fb      	str	r3, [r7, #12]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8000e9e:	e010      	b.n	8000ec2 <HAL_TIM_PWM_MspInit+0x4e>
  else if(htim_pwm->Instance==TIM15)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0b      	ldr	r2, [pc, #44]	; (8000ed4 <HAL_TIM_PWM_MspInit+0x60>)
 8000ea6:	4293      	cmp	r3, r2
 8000ea8:	d10b      	bne.n	8000ec2 <HAL_TIM_PWM_MspInit+0x4e>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8000eaa:	4b09      	ldr	r3, [pc, #36]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000eac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eae:	4a08      	ldr	r2, [pc, #32]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000eb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb4:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb6:	4b06      	ldr	r3, [pc, #24]	; (8000ed0 <HAL_TIM_PWM_MspInit+0x5c>)
 8000eb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ebe:	60bb      	str	r3, [r7, #8]
 8000ec0:	68bb      	ldr	r3, [r7, #8]
}
 8000ec2:	bf00      	nop
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr
 8000ece:	bf00      	nop
 8000ed0:	40021000 	.word	0x40021000
 8000ed4:	40014000 	.word	0x40014000

08000ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b084      	sub	sp, #16
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a1a      	ldr	r2, [pc, #104]	; (8000f50 <HAL_TIM_Base_MspInit+0x78>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d114      	bne.n	8000f14 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000eea:	4b1a      	ldr	r3, [pc, #104]	; (8000f54 <HAL_TIM_Base_MspInit+0x7c>)
 8000eec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eee:	4a19      	ldr	r2, [pc, #100]	; (8000f54 <HAL_TIM_Base_MspInit+0x7c>)
 8000ef0:	f043 0310 	orr.w	r3, r3, #16
 8000ef4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ef6:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_TIM_Base_MspInit+0x7c>)
 8000ef8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000efa:	f003 0310 	and.w	r3, r3, #16
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	2036      	movs	r0, #54	; 0x36
 8000f08:	f000 fa73 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f0c:	2036      	movs	r0, #54	; 0x36
 8000f0e:	f000 fa8a 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8000f12:	e018      	b.n	8000f46 <HAL_TIM_Base_MspInit+0x6e>
  else if(htim_base->Instance==TIM8)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a0f      	ldr	r2, [pc, #60]	; (8000f58 <HAL_TIM_Base_MspInit+0x80>)
 8000f1a:	4293      	cmp	r3, r2
 8000f1c:	d113      	bne.n	8000f46 <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8000f1e:	4b0d      	ldr	r3, [pc, #52]	; (8000f54 <HAL_TIM_Base_MspInit+0x7c>)
 8000f20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f22:	4a0c      	ldr	r2, [pc, #48]	; (8000f54 <HAL_TIM_Base_MspInit+0x7c>)
 8000f24:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000f28:	6613      	str	r3, [r2, #96]	; 0x60
 8000f2a:	4b0a      	ldr	r3, [pc, #40]	; (8000f54 <HAL_TIM_Base_MspInit+0x7c>)
 8000f2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f2e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f32:	60bb      	str	r3, [r7, #8]
 8000f34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_IRQn, 0, 0);
 8000f36:	2200      	movs	r2, #0
 8000f38:	2100      	movs	r1, #0
 8000f3a:	202c      	movs	r0, #44	; 0x2c
 8000f3c:	f000 fa59 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_IRQn);
 8000f40:	202c      	movs	r0, #44	; 0x2c
 8000f42:	f000 fa70 	bl	8001426 <HAL_NVIC_EnableIRQ>
}
 8000f46:	bf00      	nop
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40001000 	.word	0x40001000
 8000f54:	40021000 	.word	0x40021000
 8000f58:	40013400 	.word	0x40013400

08000f5c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b08a      	sub	sp, #40	; 0x28
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f7c:	d11d      	bne.n	8000fba <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_TIM_MspPostInit+0xac>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a21      	ldr	r2, [pc, #132]	; (8001008 <HAL_TIM_MspPostInit+0xac>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <HAL_TIM_MspPostInit+0xac>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	613b      	str	r3, [r7, #16]
 8000f94:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = M1_PWM_A_Pin|GPIO_PIN_1|GPIO_PIN_2;
 8000f96:	2307      	movs	r3, #7
 8000f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9a:	2302      	movs	r3, #2
 8000f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4619      	mov	r1, r3
 8000fb0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb4:	f000 fa52 	bl	800145c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM15_MspPostInit 1 */

  /* USER CODE END TIM15_MspPostInit 1 */
  }

}
 8000fb8:	e021      	b.n	8000ffe <HAL_TIM_MspPostInit+0xa2>
  else if(htim->Instance==TIM15)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	4a13      	ldr	r2, [pc, #76]	; (800100c <HAL_TIM_MspPostInit+0xb0>)
 8000fc0:	4293      	cmp	r3, r2
 8000fc2:	d11c      	bne.n	8000ffe <HAL_TIM_MspPostInit+0xa2>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc4:	4b10      	ldr	r3, [pc, #64]	; (8001008 <HAL_TIM_MspPostInit+0xac>)
 8000fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fc8:	4a0f      	ldr	r2, [pc, #60]	; (8001008 <HAL_TIM_MspPostInit+0xac>)
 8000fca:	f043 0301 	orr.w	r3, r3, #1
 8000fce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fd0:	4b0d      	ldr	r3, [pc, #52]	; (8001008 <HAL_TIM_MspPostInit+0xac>)
 8000fd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fd4:	f003 0301 	and.w	r3, r3, #1
 8000fd8:	60fb      	str	r3, [r7, #12]
 8000fda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = TRW_PWM_Pin;
 8000fdc:	2308      	movs	r3, #8
 8000fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM15;
 8000fec:	2309      	movs	r3, #9
 8000fee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(TRW_PWM_GPIO_Port, &GPIO_InitStruct);
 8000ff0:	f107 0314 	add.w	r3, r7, #20
 8000ff4:	4619      	mov	r1, r3
 8000ff6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ffa:	f000 fa2f 	bl	800145c <HAL_GPIO_Init>
}
 8000ffe:	bf00      	nop
 8001000:	3728      	adds	r7, #40	; 0x28
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40021000 	.word	0x40021000
 800100c:	40014000 	.word	0x40014000

08001010 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001014:	e7fe      	b.n	8001014 <NMI_Handler+0x4>

08001016 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001016:	b480      	push	{r7}
 8001018:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800101a:	e7fe      	b.n	800101a <HardFault_Handler+0x4>

0800101c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001020:	e7fe      	b.n	8001020 <MemManage_Handler+0x4>

08001022 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001022:	b480      	push	{r7}
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001026:	e7fe      	b.n	8001026 <BusFault_Handler+0x4>

08001028 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800102c:	e7fe      	b.n	800102c <UsageFault_Handler+0x4>

0800102e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800102e:	b480      	push	{r7}
 8001030:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001032:	bf00      	nop
 8001034:	46bd      	mov	sp, r7
 8001036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103a:	4770      	bx	lr

0800103c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001040:	bf00      	nop
 8001042:	46bd      	mov	sp, r7
 8001044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001048:	4770      	bx	lr

0800104a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800104a:	b480      	push	{r7}
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	46bd      	mov	sp, r7
 8001052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001056:	4770      	bx	lr

08001058 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800105c:	f000 f8ae 	bl	80011bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001060:	bf00      	nop
 8001062:	bd80      	pop	{r7, pc}

08001064 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt remap.
  */
void USB_LP_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001068:	4802      	ldr	r0, [pc, #8]	; (8001074 <USB_LP_IRQHandler+0x10>)
 800106a:	f000 fcb2 	bl	80019d2 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	200010a8 	.word	0x200010a8

08001078 <TIM8_UP_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt.
  */
void TIM8_UP_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_IRQn 0 */

  /* USER CODE END TIM8_UP_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800107c:	4802      	ldr	r0, [pc, #8]	; (8001088 <TIM8_UP_IRQHandler+0x10>)
 800107e:	f003 fbb3 	bl	80047e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_IRQn 1 */

  /* USER CODE END TIM8_UP_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	20000364 	.word	0x20000364

0800108c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001090:	4802      	ldr	r0, [pc, #8]	; (800109c <TIM6_DAC_IRQHandler+0x10>)
 8001092:	f003 fba9 	bl	80047e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000318 	.word	0x20000318

080010a0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010a4:	4b06      	ldr	r3, [pc, #24]	; (80010c0 <SystemInit+0x20>)
 80010a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010aa:	4a05      	ldr	r2, [pc, #20]	; (80010c0 <SystemInit+0x20>)
 80010ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b4:	bf00      	nop
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	e000ed00 	.word	0xe000ed00

080010c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80010c4:	480d      	ldr	r0, [pc, #52]	; (80010fc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80010c6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010c8:	480d      	ldr	r0, [pc, #52]	; (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ca:	490e      	ldr	r1, [pc, #56]	; (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010cc:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010ce:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80010d0:	e002      	b.n	80010d8 <LoopCopyDataInit>

080010d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010d6:	3304      	adds	r3, #4

080010d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010dc:	d3f9      	bcc.n	80010d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010de:	4a0b      	ldr	r2, [pc, #44]	; (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e0:	4c0b      	ldr	r4, [pc, #44]	; (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e4:	e001      	b.n	80010ea <LoopFillZerobss>

080010e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010e8:	3204      	adds	r2, #4

080010ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010ec:	d3fb      	bcc.n	80010e6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80010ee:	f7ff ffd7 	bl	80010a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010f2:	f009 f907 	bl	800a304 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f6:	f7ff f9c3 	bl	8000480 <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   r0, =_estack
 80010fc:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	200001cc 	.word	0x200001cc
  ldr r2, =_sidata
 8001108:	0800a3f0 	.word	0x0800a3f0
  ldr r2, =_sbss
 800110c:	200001cc 	.word	0x200001cc
  ldr r4, =_ebss
 8001110:	200015bc 	.word	0x200015bc

08001114 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_2_IRQHandler>

08001116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f95b 	bl	80013dc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	200f      	movs	r0, #15
 8001128:	f000 f80e 	bl	8001148 <HAL_InitTick>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	e001      	b.n	800113c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001138:	f7ff fdd2 	bl	8000ce0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113c:	79fb      	ldrb	r3, [r7, #7]

}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b084      	sub	sp, #16
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001150:	2300      	movs	r3, #0
 8001152:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8001154:	4b16      	ldr	r3, [pc, #88]	; (80011b0 <HAL_InitTick+0x68>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b00      	cmp	r3, #0
 800115a:	d022      	beq.n	80011a2 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800115c:	4b15      	ldr	r3, [pc, #84]	; (80011b4 <HAL_InitTick+0x6c>)
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_InitTick+0x68>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001168:	fbb1 f3f3 	udiv	r3, r1, r3
 800116c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001170:	4618      	mov	r0, r3
 8001172:	f000 f966 	bl	8001442 <HAL_SYSTICK_Config>
 8001176:	4603      	mov	r3, r0
 8001178:	2b00      	cmp	r3, #0
 800117a:	d10f      	bne.n	800119c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	2b0f      	cmp	r3, #15
 8001180:	d809      	bhi.n	8001196 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001182:	2200      	movs	r2, #0
 8001184:	6879      	ldr	r1, [r7, #4]
 8001186:	f04f 30ff 	mov.w	r0, #4294967295
 800118a:	f000 f932 	bl	80013f2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800118e:	4a0a      	ldr	r2, [pc, #40]	; (80011b8 <HAL_InitTick+0x70>)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6013      	str	r3, [r2, #0]
 8001194:	e007      	b.n	80011a6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8001196:	2301      	movs	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
 800119a:	e004      	b.n	80011a6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800119c:	2301      	movs	r3, #1
 800119e:	73fb      	strb	r3, [r7, #15]
 80011a0:	e001      	b.n	80011a6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80011a2:	2301      	movs	r3, #1
 80011a4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80011a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3710      	adds	r7, #16
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}
 80011b0:	20000050 	.word	0x20000050
 80011b4:	20000048 	.word	0x20000048
 80011b8:	2000004c 	.word	0x2000004c

080011bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011c0:	4b05      	ldr	r3, [pc, #20]	; (80011d8 <HAL_IncTick+0x1c>)
 80011c2:	681a      	ldr	r2, [r3, #0]
 80011c4:	4b05      	ldr	r3, [pc, #20]	; (80011dc <HAL_IncTick+0x20>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	4413      	add	r3, r2
 80011ca:	4a03      	ldr	r2, [pc, #12]	; (80011d8 <HAL_IncTick+0x1c>)
 80011cc:	6013      	str	r3, [r2, #0]
}
 80011ce:	bf00      	nop
 80011d0:	46bd      	mov	sp, r7
 80011d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d6:	4770      	bx	lr
 80011d8:	20000400 	.word	0x20000400
 80011dc:	20000050 	.word	0x20000050

080011e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  return uwTick;
 80011e4:	4b03      	ldr	r3, [pc, #12]	; (80011f4 <HAL_GetTick+0x14>)
 80011e6:	681b      	ldr	r3, [r3, #0]
}
 80011e8:	4618      	mov	r0, r3
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	20000400 	.word	0x20000400

080011f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001200:	f7ff ffee 	bl	80011e0 <HAL_GetTick>
 8001204:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800120a:	68fb      	ldr	r3, [r7, #12]
 800120c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001210:	d004      	beq.n	800121c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001212:	4b09      	ldr	r3, [pc, #36]	; (8001238 <HAL_Delay+0x40>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	68fa      	ldr	r2, [r7, #12]
 8001218:	4413      	add	r3, r2
 800121a:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800121c:	bf00      	nop
 800121e:	f7ff ffdf 	bl	80011e0 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	68bb      	ldr	r3, [r7, #8]
 8001226:	1ad3      	subs	r3, r2, r3
 8001228:	68fa      	ldr	r2, [r7, #12]
 800122a:	429a      	cmp	r2, r3
 800122c:	d8f7      	bhi.n	800121e <HAL_Delay+0x26>
  {
  }
}
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	3710      	adds	r7, #16
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000050 	.word	0x20000050

0800123c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b480      	push	{r7}
 800123e:	b085      	sub	sp, #20
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	f003 0307 	and.w	r3, r3, #7
 800124a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800124c:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 800124e:	68db      	ldr	r3, [r3, #12]
 8001250:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001252:	68ba      	ldr	r2, [r7, #8]
 8001254:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001258:	4013      	ands	r3, r2
 800125a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001260:	68bb      	ldr	r3, [r7, #8]
 8001262:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001268:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800126c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800126e:	4a04      	ldr	r2, [pc, #16]	; (8001280 <__NVIC_SetPriorityGrouping+0x44>)
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	60d3      	str	r3, [r2, #12]
}
 8001274:	bf00      	nop
 8001276:	3714      	adds	r7, #20
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000ed00 	.word	0xe000ed00

08001284 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001288:	4b04      	ldr	r3, [pc, #16]	; (800129c <__NVIC_GetPriorityGrouping+0x18>)
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	0a1b      	lsrs	r3, r3, #8
 800128e:	f003 0307 	and.w	r3, r3, #7
}
 8001292:	4618      	mov	r0, r3
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr
 800129c:	e000ed00 	.word	0xe000ed00

080012a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012a0:	b480      	push	{r7}
 80012a2:	b083      	sub	sp, #12
 80012a4:	af00      	add	r7, sp, #0
 80012a6:	4603      	mov	r3, r0
 80012a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	db0b      	blt.n	80012ca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012b2:	79fb      	ldrb	r3, [r7, #7]
 80012b4:	f003 021f 	and.w	r2, r3, #31
 80012b8:	4907      	ldr	r1, [pc, #28]	; (80012d8 <__NVIC_EnableIRQ+0x38>)
 80012ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012be:	095b      	lsrs	r3, r3, #5
 80012c0:	2001      	movs	r0, #1
 80012c2:	fa00 f202 	lsl.w	r2, r0, r2
 80012c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012ca:	bf00      	nop
 80012cc:	370c      	adds	r7, #12
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	e000e100 	.word	0xe000e100

080012dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012dc:	b480      	push	{r7}
 80012de:	b083      	sub	sp, #12
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	4603      	mov	r3, r0
 80012e4:	6039      	str	r1, [r7, #0]
 80012e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	db0a      	blt.n	8001306 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	b2da      	uxtb	r2, r3
 80012f4:	490c      	ldr	r1, [pc, #48]	; (8001328 <__NVIC_SetPriority+0x4c>)
 80012f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012fa:	0112      	lsls	r2, r2, #4
 80012fc:	b2d2      	uxtb	r2, r2
 80012fe:	440b      	add	r3, r1
 8001300:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001304:	e00a      	b.n	800131c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	b2da      	uxtb	r2, r3
 800130a:	4908      	ldr	r1, [pc, #32]	; (800132c <__NVIC_SetPriority+0x50>)
 800130c:	79fb      	ldrb	r3, [r7, #7]
 800130e:	f003 030f 	and.w	r3, r3, #15
 8001312:	3b04      	subs	r3, #4
 8001314:	0112      	lsls	r2, r2, #4
 8001316:	b2d2      	uxtb	r2, r2
 8001318:	440b      	add	r3, r1
 800131a:	761a      	strb	r2, [r3, #24]
}
 800131c:	bf00      	nop
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001326:	4770      	bx	lr
 8001328:	e000e100 	.word	0xe000e100
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001330:	b480      	push	{r7}
 8001332:	b089      	sub	sp, #36	; 0x24
 8001334:	af00      	add	r7, sp, #0
 8001336:	60f8      	str	r0, [r7, #12]
 8001338:	60b9      	str	r1, [r7, #8]
 800133a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f003 0307 	and.w	r3, r3, #7
 8001342:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001344:	69fb      	ldr	r3, [r7, #28]
 8001346:	f1c3 0307 	rsb	r3, r3, #7
 800134a:	2b04      	cmp	r3, #4
 800134c:	bf28      	it	cs
 800134e:	2304      	movcs	r3, #4
 8001350:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	3304      	adds	r3, #4
 8001356:	2b06      	cmp	r3, #6
 8001358:	d902      	bls.n	8001360 <NVIC_EncodePriority+0x30>
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	3b03      	subs	r3, #3
 800135e:	e000      	b.n	8001362 <NVIC_EncodePriority+0x32>
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001364:	f04f 32ff 	mov.w	r2, #4294967295
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	fa02 f303 	lsl.w	r3, r2, r3
 800136e:	43da      	mvns	r2, r3
 8001370:	68bb      	ldr	r3, [r7, #8]
 8001372:	401a      	ands	r2, r3
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001378:	f04f 31ff 	mov.w	r1, #4294967295
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	fa01 f303 	lsl.w	r3, r1, r3
 8001382:	43d9      	mvns	r1, r3
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001388:	4313      	orrs	r3, r2
         );
}
 800138a:	4618      	mov	r0, r3
 800138c:	3724      	adds	r7, #36	; 0x24
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
	...

08001398 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b082      	sub	sp, #8
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	3b01      	subs	r3, #1
 80013a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013a8:	d301      	bcc.n	80013ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013aa:	2301      	movs	r3, #1
 80013ac:	e00f      	b.n	80013ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <SysTick_Config+0x40>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	3b01      	subs	r3, #1
 80013b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013b6:	210f      	movs	r1, #15
 80013b8:	f04f 30ff 	mov.w	r0, #4294967295
 80013bc:	f7ff ff8e 	bl	80012dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013c0:	4b05      	ldr	r3, [pc, #20]	; (80013d8 <SysTick_Config+0x40>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013c6:	4b04      	ldr	r3, [pc, #16]	; (80013d8 <SysTick_Config+0x40>)
 80013c8:	2207      	movs	r2, #7
 80013ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013cc:	2300      	movs	r3, #0
}
 80013ce:	4618      	mov	r0, r3
 80013d0:	3708      	adds	r7, #8
 80013d2:	46bd      	mov	sp, r7
 80013d4:	bd80      	pop	{r7, pc}
 80013d6:	bf00      	nop
 80013d8:	e000e010 	.word	0xe000e010

080013dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013e4:	6878      	ldr	r0, [r7, #4]
 80013e6:	f7ff ff29 	bl	800123c <__NVIC_SetPriorityGrouping>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b086      	sub	sp, #24
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	4603      	mov	r3, r0
 80013fa:	60b9      	str	r1, [r7, #8]
 80013fc:	607a      	str	r2, [r7, #4]
 80013fe:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001400:	f7ff ff40 	bl	8001284 <__NVIC_GetPriorityGrouping>
 8001404:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001406:	687a      	ldr	r2, [r7, #4]
 8001408:	68b9      	ldr	r1, [r7, #8]
 800140a:	6978      	ldr	r0, [r7, #20]
 800140c:	f7ff ff90 	bl	8001330 <NVIC_EncodePriority>
 8001410:	4602      	mov	r2, r0
 8001412:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001416:	4611      	mov	r1, r2
 8001418:	4618      	mov	r0, r3
 800141a:	f7ff ff5f 	bl	80012dc <__NVIC_SetPriority>
}
 800141e:	bf00      	nop
 8001420:	3718      	adds	r7, #24
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b082      	sub	sp, #8
 800142a:	af00      	add	r7, sp, #0
 800142c:	4603      	mov	r3, r0
 800142e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001430:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff33 	bl	80012a0 <__NVIC_EnableIRQ>
}
 800143a:	bf00      	nop
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001442:	b580      	push	{r7, lr}
 8001444:	b082      	sub	sp, #8
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800144a:	6878      	ldr	r0, [r7, #4]
 800144c:	f7ff ffa4 	bl	8001398 <SysTick_Config>
 8001450:	4603      	mov	r3, r0
}
 8001452:	4618      	mov	r0, r3
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
	...

0800145c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800145c:	b480      	push	{r7}
 800145e:	b087      	sub	sp, #28
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
 8001464:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 800146a:	e15a      	b.n	8001722 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	2101      	movs	r1, #1
 8001472:	697b      	ldr	r3, [r7, #20]
 8001474:	fa01 f303 	lsl.w	r3, r1, r3
 8001478:	4013      	ands	r3, r2
 800147a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	2b00      	cmp	r3, #0
 8001480:	f000 814c 	beq.w	800171c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f003 0303 	and.w	r3, r3, #3
 800148c:	2b01      	cmp	r3, #1
 800148e:	d005      	beq.n	800149c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001498:	2b02      	cmp	r3, #2
 800149a:	d130      	bne.n	80014fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	689b      	ldr	r3, [r3, #8]
 80014a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	005b      	lsls	r3, r3, #1
 80014a6:	2203      	movs	r2, #3
 80014a8:	fa02 f303 	lsl.w	r3, r2, r3
 80014ac:	43db      	mvns	r3, r3
 80014ae:	693a      	ldr	r2, [r7, #16]
 80014b0:	4013      	ands	r3, r2
 80014b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	68da      	ldr	r2, [r3, #12]
 80014b8:	697b      	ldr	r3, [r7, #20]
 80014ba:	005b      	lsls	r3, r3, #1
 80014bc:	fa02 f303 	lsl.w	r3, r2, r3
 80014c0:	693a      	ldr	r2, [r7, #16]
 80014c2:	4313      	orrs	r3, r2
 80014c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014d2:	2201      	movs	r2, #1
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	4013      	ands	r3, r2
 80014e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	091b      	lsrs	r3, r3, #4
 80014e8:	f003 0201 	and.w	r2, r3, #1
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	fa02 f303 	lsl.w	r3, r2, r3
 80014f2:	693a      	ldr	r2, [r7, #16]
 80014f4:	4313      	orrs	r3, r2
 80014f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b03      	cmp	r3, #3
 8001508:	d017      	beq.n	800153a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	68db      	ldr	r3, [r3, #12]
 800150e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001510:	697b      	ldr	r3, [r7, #20]
 8001512:	005b      	lsls	r3, r3, #1
 8001514:	2203      	movs	r2, #3
 8001516:	fa02 f303 	lsl.w	r3, r2, r3
 800151a:	43db      	mvns	r3, r3
 800151c:	693a      	ldr	r2, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	fa02 f303 	lsl.w	r3, r2, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4313      	orrs	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	f003 0303 	and.w	r3, r3, #3
 8001542:	2b02      	cmp	r3, #2
 8001544:	d123      	bne.n	800158e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001546:	697b      	ldr	r3, [r7, #20]
 8001548:	08da      	lsrs	r2, r3, #3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	3208      	adds	r2, #8
 800154e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001552:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001554:	697b      	ldr	r3, [r7, #20]
 8001556:	f003 0307 	and.w	r3, r3, #7
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	220f      	movs	r2, #15
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43db      	mvns	r3, r3
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4013      	ands	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	691a      	ldr	r2, [r3, #16]
 800156e:	697b      	ldr	r3, [r7, #20]
 8001570:	f003 0307 	and.w	r3, r3, #7
 8001574:	009b      	lsls	r3, r3, #2
 8001576:	fa02 f303 	lsl.w	r3, r2, r3
 800157a:	693a      	ldr	r2, [r7, #16]
 800157c:	4313      	orrs	r3, r2
 800157e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001580:	697b      	ldr	r3, [r7, #20]
 8001582:	08da      	lsrs	r2, r3, #3
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	3208      	adds	r2, #8
 8001588:	6939      	ldr	r1, [r7, #16]
 800158a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001594:	697b      	ldr	r3, [r7, #20]
 8001596:	005b      	lsls	r3, r3, #1
 8001598:	2203      	movs	r2, #3
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	43db      	mvns	r3, r3
 80015a0:	693a      	ldr	r2, [r7, #16]
 80015a2:	4013      	ands	r3, r2
 80015a4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	685b      	ldr	r3, [r3, #4]
 80015aa:	f003 0203 	and.w	r2, r3, #3
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	005b      	lsls	r3, r3, #1
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	f000 80a6 	beq.w	800171c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015d0:	4b5b      	ldr	r3, [pc, #364]	; (8001740 <HAL_GPIO_Init+0x2e4>)
 80015d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d4:	4a5a      	ldr	r2, [pc, #360]	; (8001740 <HAL_GPIO_Init+0x2e4>)
 80015d6:	f043 0301 	orr.w	r3, r3, #1
 80015da:	6613      	str	r3, [r2, #96]	; 0x60
 80015dc:	4b58      	ldr	r3, [pc, #352]	; (8001740 <HAL_GPIO_Init+0x2e4>)
 80015de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015e0:	f003 0301 	and.w	r3, r3, #1
 80015e4:	60bb      	str	r3, [r7, #8]
 80015e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015e8:	4a56      	ldr	r2, [pc, #344]	; (8001744 <HAL_GPIO_Init+0x2e8>)
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	089b      	lsrs	r3, r3, #2
 80015ee:	3302      	adds	r3, #2
 80015f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015f4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80015f6:	697b      	ldr	r3, [r7, #20]
 80015f8:	f003 0303 	and.w	r3, r3, #3
 80015fc:	009b      	lsls	r3, r3, #2
 80015fe:	220f      	movs	r2, #15
 8001600:	fa02 f303 	lsl.w	r3, r2, r3
 8001604:	43db      	mvns	r3, r3
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	4013      	ands	r3, r2
 800160a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001612:	d01f      	beq.n	8001654 <HAL_GPIO_Init+0x1f8>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4a4c      	ldr	r2, [pc, #304]	; (8001748 <HAL_GPIO_Init+0x2ec>)
 8001618:	4293      	cmp	r3, r2
 800161a:	d019      	beq.n	8001650 <HAL_GPIO_Init+0x1f4>
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	4a4b      	ldr	r2, [pc, #300]	; (800174c <HAL_GPIO_Init+0x2f0>)
 8001620:	4293      	cmp	r3, r2
 8001622:	d013      	beq.n	800164c <HAL_GPIO_Init+0x1f0>
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a4a      	ldr	r2, [pc, #296]	; (8001750 <HAL_GPIO_Init+0x2f4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d00d      	beq.n	8001648 <HAL_GPIO_Init+0x1ec>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	4a49      	ldr	r2, [pc, #292]	; (8001754 <HAL_GPIO_Init+0x2f8>)
 8001630:	4293      	cmp	r3, r2
 8001632:	d007      	beq.n	8001644 <HAL_GPIO_Init+0x1e8>
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	4a48      	ldr	r2, [pc, #288]	; (8001758 <HAL_GPIO_Init+0x2fc>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d101      	bne.n	8001640 <HAL_GPIO_Init+0x1e4>
 800163c:	2305      	movs	r3, #5
 800163e:	e00a      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001640:	2306      	movs	r3, #6
 8001642:	e008      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001644:	2304      	movs	r3, #4
 8001646:	e006      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001648:	2303      	movs	r3, #3
 800164a:	e004      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 800164c:	2302      	movs	r3, #2
 800164e:	e002      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001650:	2301      	movs	r3, #1
 8001652:	e000      	b.n	8001656 <HAL_GPIO_Init+0x1fa>
 8001654:	2300      	movs	r3, #0
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	f002 0203 	and.w	r2, r2, #3
 800165c:	0092      	lsls	r2, r2, #2
 800165e:	4093      	lsls	r3, r2
 8001660:	693a      	ldr	r2, [r7, #16]
 8001662:	4313      	orrs	r3, r2
 8001664:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001666:	4937      	ldr	r1, [pc, #220]	; (8001744 <HAL_GPIO_Init+0x2e8>)
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	089b      	lsrs	r3, r3, #2
 800166c:	3302      	adds	r3, #2
 800166e:	693a      	ldr	r2, [r7, #16]
 8001670:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001674:	4b39      	ldr	r3, [pc, #228]	; (800175c <HAL_GPIO_Init+0x300>)
 8001676:	689b      	ldr	r3, [r3, #8]
 8001678:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	4313      	orrs	r3, r2
 8001696:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001698:	4a30      	ldr	r2, [pc, #192]	; (800175c <HAL_GPIO_Init+0x300>)
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800169e:	4b2f      	ldr	r3, [pc, #188]	; (800175c <HAL_GPIO_Init+0x300>)
 80016a0:	68db      	ldr	r3, [r3, #12]
 80016a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	43db      	mvns	r3, r3
 80016a8:	693a      	ldr	r2, [r7, #16]
 80016aa:	4013      	ands	r3, r2
 80016ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d003      	beq.n	80016c2 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4313      	orrs	r3, r2
 80016c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80016c2:	4a26      	ldr	r2, [pc, #152]	; (800175c <HAL_GPIO_Init+0x300>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80016c8:	4b24      	ldr	r3, [pc, #144]	; (800175c <HAL_GPIO_Init+0x300>)
 80016ca:	685b      	ldr	r3, [r3, #4]
 80016cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	43db      	mvns	r3, r3
 80016d2:	693a      	ldr	r2, [r7, #16]
 80016d4:	4013      	ands	r3, r2
 80016d6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d003      	beq.n	80016ec <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 80016e4:	693a      	ldr	r2, [r7, #16]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4313      	orrs	r3, r2
 80016ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016ec:	4a1b      	ldr	r2, [pc, #108]	; (800175c <HAL_GPIO_Init+0x300>)
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 80016f2:	4b1a      	ldr	r3, [pc, #104]	; (800175c <HAL_GPIO_Init+0x300>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	43db      	mvns	r3, r3
 80016fc:	693a      	ldr	r2, [r7, #16]
 80016fe:	4013      	ands	r3, r2
 8001700:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	685b      	ldr	r3, [r3, #4]
 8001706:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170a:	2b00      	cmp	r3, #0
 800170c:	d003      	beq.n	8001716 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	4313      	orrs	r3, r2
 8001714:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001716:	4a11      	ldr	r2, [pc, #68]	; (800175c <HAL_GPIO_Init+0x300>)
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	3301      	adds	r3, #1
 8001720:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681a      	ldr	r2, [r3, #0]
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	fa22 f303 	lsr.w	r3, r2, r3
 800172c:	2b00      	cmp	r3, #0
 800172e:	f47f ae9d 	bne.w	800146c <HAL_GPIO_Init+0x10>
  }
}
 8001732:	bf00      	nop
 8001734:	bf00      	nop
 8001736:	371c      	adds	r7, #28
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	40021000 	.word	0x40021000
 8001744:	40010000 	.word	0x40010000
 8001748:	48000400 	.word	0x48000400
 800174c:	48000800 	.word	0x48000800
 8001750:	48000c00 	.word	0x48000c00
 8001754:	48001000 	.word	0x48001000
 8001758:	48001400 	.word	0x48001400
 800175c:	40010400 	.word	0x40010400

08001760 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
 8001768:	460b      	mov	r3, r1
 800176a:	807b      	strh	r3, [r7, #2]
 800176c:	4613      	mov	r3, r2
 800176e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001770:	787b      	ldrb	r3, [r7, #1]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d003      	beq.n	800177e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001776:	887a      	ldrh	r2, [r7, #2]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800177c:	e002      	b.n	8001784 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800177e:	887a      	ldrh	r2, [r7, #2]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001784:	bf00      	nop
 8001786:	370c      	adds	r7, #12
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr

08001790 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001790:	b480      	push	{r7}
 8001792:	b085      	sub	sp, #20
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	460b      	mov	r3, r1
 800179a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	4013      	ands	r3, r2
 80017a8:	041a      	lsls	r2, r3, #16
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	43d9      	mvns	r1, r3
 80017ae:	887b      	ldrh	r3, [r7, #2]
 80017b0:	400b      	ands	r3, r1
 80017b2:	431a      	orrs	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	619a      	str	r2, [r3, #24]
}
 80017b8:	bf00      	nop
 80017ba:	3714      	adds	r7, #20
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c6:	b08b      	sub	sp, #44	; 0x2c
 80017c8:	af06      	add	r7, sp, #24
 80017ca:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d101      	bne.n	80017d6 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017d2:	2301      	movs	r3, #1
 80017d4:	e0d7      	b.n	8001986 <HAL_PCD_Init+0x1c2>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f008 fa84 	bl	8009cf8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2203      	movs	r2, #3
 80017f4:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4618      	mov	r0, r3
 80017fe:	f004 f970 	bl	8005ae2 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001802:	2300      	movs	r3, #0
 8001804:	73fb      	strb	r3, [r7, #15]
 8001806:	e04c      	b.n	80018a2 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001808:	7bfb      	ldrb	r3, [r7, #15]
 800180a:	6879      	ldr	r1, [r7, #4]
 800180c:	1c5a      	adds	r2, r3, #1
 800180e:	4613      	mov	r3, r2
 8001810:	009b      	lsls	r3, r3, #2
 8001812:	4413      	add	r3, r2
 8001814:	00db      	lsls	r3, r3, #3
 8001816:	440b      	add	r3, r1
 8001818:	3301      	adds	r3, #1
 800181a:	2201      	movs	r2, #1
 800181c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800181e:	7bfb      	ldrb	r3, [r7, #15]
 8001820:	6879      	ldr	r1, [r7, #4]
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	4613      	mov	r3, r2
 8001826:	009b      	lsls	r3, r3, #2
 8001828:	4413      	add	r3, r2
 800182a:	00db      	lsls	r3, r3, #3
 800182c:	440b      	add	r3, r1
 800182e:	7bfa      	ldrb	r2, [r7, #15]
 8001830:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001832:	7bfa      	ldrb	r2, [r7, #15]
 8001834:	7bfb      	ldrb	r3, [r7, #15]
 8001836:	b298      	uxth	r0, r3
 8001838:	6879      	ldr	r1, [r7, #4]
 800183a:	4613      	mov	r3, r2
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	00db      	lsls	r3, r3, #3
 8001842:	440b      	add	r3, r1
 8001844:	3336      	adds	r3, #54	; 0x36
 8001846:	4602      	mov	r2, r0
 8001848:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800184a:	7bfb      	ldrb	r3, [r7, #15]
 800184c:	6879      	ldr	r1, [r7, #4]
 800184e:	1c5a      	adds	r2, r3, #1
 8001850:	4613      	mov	r3, r2
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	00db      	lsls	r3, r3, #3
 8001858:	440b      	add	r3, r1
 800185a:	3303      	adds	r3, #3
 800185c:	2200      	movs	r2, #0
 800185e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	00db      	lsls	r3, r3, #3
 800186c:	440b      	add	r3, r1
 800186e:	3338      	adds	r3, #56	; 0x38
 8001870:	2200      	movs	r2, #0
 8001872:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	009b      	lsls	r3, r3, #2
 800187c:	4413      	add	r3, r2
 800187e:	00db      	lsls	r3, r3, #3
 8001880:	440b      	add	r3, r1
 8001882:	333c      	adds	r3, #60	; 0x3c
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	6879      	ldr	r1, [r7, #4]
 800188c:	4613      	mov	r3, r2
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	4413      	add	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	440b      	add	r3, r1
 8001896:	3340      	adds	r3, #64	; 0x40
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800189c:	7bfb      	ldrb	r3, [r7, #15]
 800189e:	3301      	adds	r3, #1
 80018a0:	73fb      	strb	r3, [r7, #15]
 80018a2:	7bfa      	ldrb	r2, [r7, #15]
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	685b      	ldr	r3, [r3, #4]
 80018a8:	429a      	cmp	r2, r3
 80018aa:	d3ad      	bcc.n	8001808 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018ac:	2300      	movs	r3, #0
 80018ae:	73fb      	strb	r3, [r7, #15]
 80018b0:	e044      	b.n	800193c <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80018b2:	7bfa      	ldrb	r2, [r7, #15]
 80018b4:	6879      	ldr	r1, [r7, #4]
 80018b6:	4613      	mov	r3, r2
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	4413      	add	r3, r2
 80018bc:	00db      	lsls	r3, r3, #3
 80018be:	440b      	add	r3, r1
 80018c0:	f203 1369 	addw	r3, r3, #361	; 0x169
 80018c4:	2200      	movs	r2, #0
 80018c6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	4413      	add	r3, r2
 80018d2:	00db      	lsls	r3, r3, #3
 80018d4:	440b      	add	r3, r1
 80018d6:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80018da:	7bfa      	ldrb	r2, [r7, #15]
 80018dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80018de:	7bfa      	ldrb	r2, [r7, #15]
 80018e0:	6879      	ldr	r1, [r7, #4]
 80018e2:	4613      	mov	r3, r2
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	00db      	lsls	r3, r3, #3
 80018ea:	440b      	add	r3, r1
 80018ec:	f203 136b 	addw	r3, r3, #363	; 0x16b
 80018f0:	2200      	movs	r2, #0
 80018f2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80018f4:	7bfa      	ldrb	r2, [r7, #15]
 80018f6:	6879      	ldr	r1, [r7, #4]
 80018f8:	4613      	mov	r3, r2
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	440b      	add	r3, r1
 8001902:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800190a:	7bfa      	ldrb	r2, [r7, #15]
 800190c:	6879      	ldr	r1, [r7, #4]
 800190e:	4613      	mov	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	4413      	add	r3, r2
 8001914:	00db      	lsls	r3, r3, #3
 8001916:	440b      	add	r3, r1
 8001918:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001920:	7bfa      	ldrb	r2, [r7, #15]
 8001922:	6879      	ldr	r1, [r7, #4]
 8001924:	4613      	mov	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	4413      	add	r3, r2
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	440b      	add	r3, r1
 800192e:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001936:	7bfb      	ldrb	r3, [r7, #15]
 8001938:	3301      	adds	r3, #1
 800193a:	73fb      	strb	r3, [r7, #15]
 800193c:	7bfa      	ldrb	r2, [r7, #15]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	429a      	cmp	r2, r3
 8001944:	d3b5      	bcc.n	80018b2 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	687e      	ldr	r6, [r7, #4]
 800194e:	466d      	mov	r5, sp
 8001950:	f106 0410 	add.w	r4, r6, #16
 8001954:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001958:	6823      	ldr	r3, [r4, #0]
 800195a:	602b      	str	r3, [r5, #0]
 800195c:	1d33      	adds	r3, r6, #4
 800195e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001960:	6838      	ldr	r0, [r7, #0]
 8001962:	f004 f8d9 	bl	8005b18 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	2200      	movs	r2, #0
 800196a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	2201      	movs	r2, #1
 8001972:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	69db      	ldr	r3, [r3, #28]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d102      	bne.n	8001984 <HAL_PCD_Init+0x1c0>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800197e:	6878      	ldr	r0, [r7, #4]
 8001980:	f001 fc29 	bl	80031d6 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3714      	adds	r7, #20
 800198a:	46bd      	mov	sp, r7
 800198c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800198e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 800199c:	2b01      	cmp	r3, #1
 800199e:	d101      	bne.n	80019a4 <HAL_PCD_Start+0x16>
 80019a0:	2302      	movs	r3, #2
 80019a2:	e012      	b.n	80019ca <HAL_PCD_Start+0x3c>
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	2201      	movs	r2, #1
 80019a8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	4618      	mov	r0, r3
 80019b2:	f004 f87f 	bl	8005ab4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f006 fa98 	bl	8007ef0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2200      	movs	r2, #0
 80019c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 80019c8:	2300      	movs	r3, #0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}

080019d2 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80019d2:	b580      	push	{r7, lr}
 80019d4:	b084      	sub	sp, #16
 80019d6:	af00      	add	r7, sp, #0
 80019d8:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f006 fa9d 	bl	8007f1e <USB_ReadInterrupts>
 80019e4:	60f8      	str	r0, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_PCD_IRQHandler+0x26>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 80019f0:	6878      	ldr	r0, [r7, #4]
 80019f2:	f000 fb26 	bl	8002042 <PCD_EP_ISR_Handler>

    return;
 80019f6:	e110      	b.n	8001c1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d013      	beq.n	8001a2a <HAL_PCD_IRQHandler+0x58>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a0a:	b29a      	uxth	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a14:	b292      	uxth	r2, r2
 8001a16:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8001a1a:	6878      	ldr	r0, [r7, #4]
 8001a1c:	f008 f9fd 	bl	8009e1a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8001a20:	2100      	movs	r1, #0
 8001a22:	6878      	ldr	r0, [r7, #4]
 8001a24:	f000 f8fc 	bl	8001c20 <HAL_PCD_SetAddress>

    return;
 8001a28:	e0f7      	b.n	8001c1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00c      	beq.n	8001a4e <HAL_PCD_IRQHandler+0x7c>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a3c:	b29a      	uxth	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001a46:	b292      	uxth	r2, r2
 8001a48:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a4c:	e0e5      	b.n	8001c1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00c      	beq.n	8001a72 <HAL_PCD_IRQHandler+0xa0>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001a60:	b29a      	uxth	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001a6a:	b292      	uxth	r2, r2
 8001a6c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001a70:	e0d3      	b.n	8001c1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d034      	beq.n	8001ae6 <HAL_PCD_IRQHandler+0x114>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0204 	bic.w	r2, r2, #4
 8001a8e:	b292      	uxth	r2, r2
 8001a90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001a9c:	b29a      	uxth	r2, r3
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0208 	bic.w	r2, r2, #8
 8001aa6:	b292      	uxth	r2, r2
 8001aa8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    if (hpcd->LPM_State == LPM_L1)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001ab2:	2b01      	cmp	r3, #1
 8001ab4:	d107      	bne.n	8001ac6 <HAL_PCD_IRQHandler+0xf4>
    {
      hpcd->LPM_State = LPM_L0;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2200      	movs	r2, #0
 8001aba:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001abe:	2100      	movs	r1, #0
 8001ac0:	6878      	ldr	r0, [r7, #4]
 8001ac2:	f008 fb9f 	bl	800a204 <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f008 f9e0 	bl	8009e8c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001ad4:	b29a      	uxth	r2, r3
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ade:	b292      	uxth	r2, r2
 8001ae0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001ae4:	e099      	b.n	8001c1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d027      	beq.n	8001b40 <HAL_PCD_IRQHandler+0x16e>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f042 0208 	orr.w	r2, r2, #8
 8001b02:	b292      	uxth	r2, r2
 8001b04:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001b1a:	b292      	uxth	r2, r2
 8001b1c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b28:	b29a      	uxth	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f042 0204 	orr.w	r2, r2, #4
 8001b32:	b292      	uxth	r2, r2
 8001b34:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8001b38:	6878      	ldr	r0, [r7, #4]
 8001b3a:	f008 f98d 	bl	8009e58 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001b3e:	e06c      	b.n	8001c1a <HAL_PCD_IRQHandler+0x248>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d040      	beq.n	8001bcc <HAL_PCD_IRQHandler+0x1fa>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b5c:	b292      	uxth	r2, r2
 8001b5e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if (hpcd->LPM_State == LPM_L0)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	f893 32e0 	ldrb.w	r3, [r3, #736]	; 0x2e0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d12b      	bne.n	8001bc4 <HAL_PCD_IRQHandler+0x1f2>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b74:	b29a      	uxth	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	f042 0204 	orr.w	r2, r2, #4
 8001b7e:	b292      	uxth	r2, r2
 8001b80:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8001b8c:	b29a      	uxth	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f042 0208 	orr.w	r2, r2, #8
 8001b96:	b292      	uxth	r2, r2
 8001b98:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      hpcd->LPM_State = LPM_L1;
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	089b      	lsrs	r3, r3, #2
 8001bb0:	f003 023c 	and.w	r2, r3, #60	; 0x3c
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	f8c3 22e4 	str.w	r2, [r3, #740]	; 0x2e4
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8001bba:	2101      	movs	r1, #1
 8001bbc:	6878      	ldr	r0, [r7, #4]
 8001bbe:	f008 fb21 	bl	800a204 <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 8001bc2:	e02a      	b.n	8001c1a <HAL_PCD_IRQHandler+0x248>
      HAL_PCD_SuspendCallback(hpcd);
 8001bc4:	6878      	ldr	r0, [r7, #4]
 8001bc6:	f008 f947 	bl	8009e58 <HAL_PCD_SuspendCallback>
    return;
 8001bca:	e026      	b.n	8001c1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00f      	beq.n	8001bf6 <HAL_PCD_IRQHandler+0x224>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001bde:	b29a      	uxth	r2, r3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001be8:	b292      	uxth	r2, r2
 8001bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8001bee:	6878      	ldr	r0, [r7, #4]
 8001bf0:	f008 f905 	bl	8009dfe <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 8001bf4:	e011      	b.n	8001c1a <HAL_PCD_IRQHandler+0x248>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00c      	beq.n	8001c1a <HAL_PCD_IRQHandler+0x248>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001c12:	b292      	uxth	r2, r2
 8001c14:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    return;
 8001c18:	bf00      	nop
  }
}
 8001c1a:	3710      	adds	r7, #16
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}

08001c20 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
 8001c28:	460b      	mov	r3, r1
 8001c2a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001c32:	2b01      	cmp	r3, #1
 8001c34:	d101      	bne.n	8001c3a <HAL_PCD_SetAddress+0x1a>
 8001c36:	2302      	movs	r3, #2
 8001c38:	e013      	b.n	8001c62 <HAL_PCD_SetAddress+0x42>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2201      	movs	r2, #1
 8001c3e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	78fa      	ldrb	r2, [r7, #3]
 8001c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	78fa      	ldrb	r2, [r7, #3]
 8001c50:	4611      	mov	r1, r2
 8001c52:	4618      	mov	r0, r3
 8001c54:	f006 f938 	bl	8007ec8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001c60:	2300      	movs	r3, #0
}
 8001c62:	4618      	mov	r0, r3
 8001c64:	3708      	adds	r7, #8
 8001c66:	46bd      	mov	sp, r7
 8001c68:	bd80      	pop	{r7, pc}

08001c6a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001c6a:	b580      	push	{r7, lr}
 8001c6c:	b084      	sub	sp, #16
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	4608      	mov	r0, r1
 8001c74:	4611      	mov	r1, r2
 8001c76:	461a      	mov	r2, r3
 8001c78:	4603      	mov	r3, r0
 8001c7a:	70fb      	strb	r3, [r7, #3]
 8001c7c:	460b      	mov	r3, r1
 8001c7e:	803b      	strh	r3, [r7, #0]
 8001c80:	4613      	mov	r3, r2
 8001c82:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001c84:	2300      	movs	r3, #0
 8001c86:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001c88:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	da0e      	bge.n	8001cae <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001c90:	78fb      	ldrb	r3, [r7, #3]
 8001c92:	f003 0307 	and.w	r3, r3, #7
 8001c96:	1c5a      	adds	r2, r3, #1
 8001c98:	4613      	mov	r3, r2
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	4413      	add	r3, r2
 8001c9e:	00db      	lsls	r3, r3, #3
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	4413      	add	r3, r2
 8001ca4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	2201      	movs	r2, #1
 8001caa:	705a      	strb	r2, [r3, #1]
 8001cac:	e00e      	b.n	8001ccc <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	f003 0207 	and.w	r2, r3, #7
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	4413      	add	r3, r2
 8001cba:	00db      	lsls	r3, r3, #3
 8001cbc:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001cc0:	687a      	ldr	r2, [r7, #4]
 8001cc2:	4413      	add	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001ccc:	78fb      	ldrb	r3, [r7, #3]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	b2da      	uxtb	r2, r3
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001cd8:	883a      	ldrh	r2, [r7, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	78ba      	ldrb	r2, [r7, #2]
 8001ce2:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	785b      	ldrb	r3, [r3, #1]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d004      	beq.n	8001cf6 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	b29a      	uxth	r2, r3
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001cf6:	78bb      	ldrb	r3, [r7, #2]
 8001cf8:	2b02      	cmp	r3, #2
 8001cfa:	d102      	bne.n	8001d02 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_PCD_EP_Open+0xa6>
 8001d0c:	2302      	movs	r3, #2
 8001d0e:	e00e      	b.n	8001d2e <HAL_PCD_EP_Open+0xc4>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2201      	movs	r2, #1
 8001d14:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	68f9      	ldr	r1, [r7, #12]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f003 ff1c 	bl	8005b5c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2200      	movs	r2, #0
 8001d28:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 8001d2c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}

08001d36 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d36:	b580      	push	{r7, lr}
 8001d38:	b084      	sub	sp, #16
 8001d3a:	af00      	add	r7, sp, #0
 8001d3c:	6078      	str	r0, [r7, #4]
 8001d3e:	460b      	mov	r3, r1
 8001d40:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001d42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	da0e      	bge.n	8001d68 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	f003 0307 	and.w	r3, r3, #7
 8001d50:	1c5a      	adds	r2, r3, #1
 8001d52:	4613      	mov	r3, r2
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	4413      	add	r3, r2
 8001d58:	00db      	lsls	r3, r3, #3
 8001d5a:	687a      	ldr	r2, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2201      	movs	r2, #1
 8001d64:	705a      	strb	r2, [r3, #1]
 8001d66:	e00e      	b.n	8001d86 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d68:	78fb      	ldrb	r3, [r7, #3]
 8001d6a:	f003 0207 	and.w	r2, r3, #7
 8001d6e:	4613      	mov	r3, r2
 8001d70:	009b      	lsls	r3, r3, #2
 8001d72:	4413      	add	r3, r2
 8001d74:	00db      	lsls	r3, r3, #3
 8001d76:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001d7a:	687a      	ldr	r2, [r7, #4]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	2200      	movs	r2, #0
 8001d84:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	f003 0307 	and.w	r3, r3, #7
 8001d8c:	b2da      	uxtb	r2, r3
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d101      	bne.n	8001da0 <HAL_PCD_EP_Close+0x6a>
 8001d9c:	2302      	movs	r3, #2
 8001d9e:	e00e      	b.n	8001dbe <HAL_PCD_EP_Close+0x88>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	2201      	movs	r2, #1
 8001da4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68f9      	ldr	r1, [r7, #12]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f004 fa68 	bl	8006284 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b086      	sub	sp, #24
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	60f8      	str	r0, [r7, #12]
 8001dce:	607a      	str	r2, [r7, #4]
 8001dd0:	603b      	str	r3, [r7, #0]
 8001dd2:	460b      	mov	r3, r1
 8001dd4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dd6:	7afb      	ldrb	r3, [r7, #11]
 8001dd8:	f003 0207 	and.w	r2, r3, #7
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	4413      	add	r3, r2
 8001dec:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	687a      	ldr	r2, [r7, #4]
 8001df2:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	683a      	ldr	r2, [r7, #0]
 8001df8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001dfa:	697b      	ldr	r3, [r7, #20]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	2200      	movs	r2, #0
 8001e04:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e06:	7afb      	ldrb	r3, [r7, #11]
 8001e08:	f003 0307 	and.w	r3, r3, #7
 8001e0c:	b2da      	uxtb	r2, r3
 8001e0e:	697b      	ldr	r3, [r7, #20]
 8001e10:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e12:	7afb      	ldrb	r3, [r7, #11]
 8001e14:	f003 0307 	and.w	r3, r3, #7
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d106      	bne.n	8001e2a <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	6979      	ldr	r1, [r7, #20]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f004 fc1b 	bl	800665e <USB_EPStartXfer>
 8001e28:	e005      	b.n	8001e36 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	6979      	ldr	r1, [r7, #20]
 8001e30:	4618      	mov	r0, r3
 8001e32:	f004 fc14 	bl	800665e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3718      	adds	r7, #24
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001e4c:	78fb      	ldrb	r3, [r7, #3]
 8001e4e:	f003 0207 	and.w	r2, r3, #7
 8001e52:	6879      	ldr	r1, [r7, #4]
 8001e54:	4613      	mov	r3, r2
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4413      	add	r3, r2
 8001e5a:	00db      	lsls	r3, r3, #3
 8001e5c:	440b      	add	r3, r1
 8001e5e:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8001e62:	681b      	ldr	r3, [r3, #0]
}
 8001e64:	4618      	mov	r0, r3
 8001e66:	370c      	adds	r7, #12
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6e:	4770      	bx	lr

08001e70 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b086      	sub	sp, #24
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	60f8      	str	r0, [r7, #12]
 8001e78:	607a      	str	r2, [r7, #4]
 8001e7a:	603b      	str	r3, [r7, #0]
 8001e7c:	460b      	mov	r3, r1
 8001e7e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001e80:	7afb      	ldrb	r3, [r7, #11]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	1c5a      	adds	r2, r3, #1
 8001e88:	4613      	mov	r3, r2
 8001e8a:	009b      	lsls	r3, r3, #2
 8001e8c:	4413      	add	r3, r2
 8001e8e:	00db      	lsls	r3, r3, #3
 8001e90:	68fa      	ldr	r2, [r7, #12]
 8001e92:	4413      	add	r3, r2
 8001e94:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	687a      	ldr	r2, [r7, #4]
 8001e9a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8001e9c:	697b      	ldr	r3, [r7, #20]
 8001e9e:	683a      	ldr	r2, [r7, #0]
 8001ea0:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8001ea2:	697b      	ldr	r3, [r7, #20]
 8001ea4:	2201      	movs	r2, #1
 8001ea6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8001eaa:	697b      	ldr	r3, [r7, #20]
 8001eac:	683a      	ldr	r2, [r7, #0]
 8001eae:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8001eb0:	697b      	ldr	r3, [r7, #20]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2201      	movs	r2, #1
 8001eba:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001ebc:	7afb      	ldrb	r3, [r7, #11]
 8001ebe:	f003 0307 	and.w	r3, r3, #7
 8001ec2:	b2da      	uxtb	r2, r3
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001ec8:	7afb      	ldrb	r3, [r7, #11]
 8001eca:	f003 0307 	and.w	r3, r3, #7
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d106      	bne.n	8001ee0 <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	6979      	ldr	r1, [r7, #20]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f004 fbc0 	bl	800665e <USB_EPStartXfer>
 8001ede:	e005      	b.n	8001eec <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	6979      	ldr	r1, [r7, #20]
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f004 fbb9 	bl	800665e <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3718      	adds	r7, #24
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b084      	sub	sp, #16
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
 8001efe:	460b      	mov	r3, r1
 8001f00:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	f003 0207 	and.w	r2, r3, #7
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	685b      	ldr	r3, [r3, #4]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d901      	bls.n	8001f14 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f10:	2301      	movs	r3, #1
 8001f12:	e03e      	b.n	8001f92 <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001f14:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	da0e      	bge.n	8001f3a <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f1c:	78fb      	ldrb	r3, [r7, #3]
 8001f1e:	f003 0307 	and.w	r3, r3, #7
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	4613      	mov	r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	4413      	add	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	4413      	add	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2201      	movs	r2, #1
 8001f36:	705a      	strb	r2, [r3, #1]
 8001f38:	e00c      	b.n	8001f54 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001f3a:	78fa      	ldrb	r2, [r7, #3]
 8001f3c:	4613      	mov	r3, r2
 8001f3e:	009b      	lsls	r3, r3, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001f48:	687a      	ldr	r2, [r7, #4]
 8001f4a:	4413      	add	r3, r2
 8001f4c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2200      	movs	r2, #0
 8001f52:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	2201      	movs	r2, #1
 8001f58:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f5a:	78fb      	ldrb	r3, [r7, #3]
 8001f5c:	f003 0307 	and.w	r3, r3, #7
 8001f60:	b2da      	uxtb	r2, r3
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d101      	bne.n	8001f74 <HAL_PCD_EP_SetStall+0x7e>
 8001f70:	2302      	movs	r3, #2
 8001f72:	e00e      	b.n	8001f92 <HAL_PCD_EP_SetStall+0x9c>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2201      	movs	r2, #1
 8001f78:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68f9      	ldr	r1, [r7, #12]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f005 fea1 	bl	8007cca <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	6078      	str	r0, [r7, #4]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	f003 020f 	and.w	r2, r3, #15
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	429a      	cmp	r2, r3
 8001fb2:	d901      	bls.n	8001fb8 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	e040      	b.n	800203a <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fb8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	da0e      	bge.n	8001fde <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001fc0:	78fb      	ldrb	r3, [r7, #3]
 8001fc2:	f003 0307 	and.w	r3, r3, #7
 8001fc6:	1c5a      	adds	r2, r3, #1
 8001fc8:	4613      	mov	r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	4413      	add	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	687a      	ldr	r2, [r7, #4]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2201      	movs	r2, #1
 8001fda:	705a      	strb	r2, [r3, #1]
 8001fdc:	e00e      	b.n	8001ffc <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001fde:	78fb      	ldrb	r3, [r7, #3]
 8001fe0:	f003 0207 	and.w	r2, r3, #7
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	009b      	lsls	r3, r3, #2
 8001fe8:	4413      	add	r3, r2
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	2200      	movs	r2, #0
 8002000:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	b2da      	uxtb	r2, r3
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8002014:	2b01      	cmp	r3, #1
 8002016:	d101      	bne.n	800201c <HAL_PCD_EP_ClrStall+0x82>
 8002018:	2302      	movs	r3, #2
 800201a:	e00e      	b.n	800203a <HAL_PCD_EP_ClrStall+0xa0>
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2201      	movs	r2, #1
 8002020:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68f9      	ldr	r1, [r7, #12]
 800202a:	4618      	mov	r0, r3
 800202c:	f005 fe9e 	bl	8007d6c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8002038:	2300      	movs	r3, #0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}

08002042 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 8002042:	b580      	push	{r7, lr}
 8002044:	b096      	sub	sp, #88	; 0x58
 8002046:	af00      	add	r7, sp, #0
 8002048:	6078      	str	r0, [r7, #4]
  uint16_t wEPVal;
  uint16_t TxPctSize;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 800204a:	e39c      	b.n	8002786 <PCD_EP_ISR_Handler+0x744>
  {
    wIstr = hpcd->Instance->ISTR;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8002054:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002058:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800205c:	b2db      	uxtb	r3, r3
 800205e:	f003 030f 	and.w	r3, r3, #15
 8002062:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55

    if (epindex == 0U)
 8002066:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 800206a:	2b00      	cmp	r3, #0
 800206c:	f040 815e 	bne.w	800232c <PCD_EP_ISR_Handler+0x2ea>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002070:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8002074:	f003 0310 	and.w	r3, r3, #16
 8002078:	2b00      	cmp	r3, #0
 800207a:	d150      	bne.n	800211e <PCD_EP_ISR_Handler+0xdc>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	881b      	ldrh	r3, [r3, #0]
 8002082:	b29b      	uxth	r3, r3
 8002084:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8002088:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800208c:	81fb      	strh	r3, [r7, #14]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681a      	ldr	r2, [r3, #0]
 8002092:	89fb      	ldrh	r3, [r7, #14]
 8002094:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002098:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800209c:	b29b      	uxth	r3, r3
 800209e:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	3328      	adds	r3, #40	; 0x28
 80020a4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	461a      	mov	r2, r3
 80020b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020b4:	781b      	ldrb	r3, [r3, #0]
 80020b6:	00db      	lsls	r3, r3, #3
 80020b8:	4413      	add	r3, r2
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6812      	ldr	r2, [r2, #0]
 80020be:	4413      	add	r3, r2
 80020c0:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80020c4:	881b      	ldrh	r3, [r3, #0]
 80020c6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80020ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020cc:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80020ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d0:	695a      	ldr	r2, [r3, #20]
 80020d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020d4:	69db      	ldr	r3, [r3, #28]
 80020d6:	441a      	add	r2, r3
 80020d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020da:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80020dc:	2100      	movs	r1, #0
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f007 fe73 	bl	8009dca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80020ea:	b2db      	uxtb	r3, r3
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	f000 834a 	beq.w	8002786 <PCD_EP_ISR_Handler+0x744>
 80020f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80020f4:	699b      	ldr	r3, [r3, #24]
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	f040 8345 	bne.w	8002786 <PCD_EP_ISR_Handler+0x744>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002102:	b2db      	uxtb	r3, r3
 8002104:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002108:	b2da      	uxtb	r2, r3
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	b292      	uxth	r2, r2
 8002110:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800211c:	e333      	b.n	8002786 <PCD_EP_ISR_Handler+0x744>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002124:	64fb      	str	r3, [r7, #76]	; 0x4c
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	881b      	ldrh	r3, [r3, #0]
 800212c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002130:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 8002134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002138:	2b00      	cmp	r3, #0
 800213a:	d032      	beq.n	80021a2 <PCD_EP_ISR_Handler+0x160>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002144:	b29b      	uxth	r3, r3
 8002146:	461a      	mov	r2, r3
 8002148:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800214a:	781b      	ldrb	r3, [r3, #0]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	4413      	add	r3, r2
 8002150:	687a      	ldr	r2, [r7, #4]
 8002152:	6812      	ldr	r2, [r2, #0]
 8002154:	4413      	add	r3, r2
 8002156:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800215a:	881b      	ldrh	r3, [r3, #0]
 800215c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8002160:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002162:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6818      	ldr	r0, [r3, #0]
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 800216e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002170:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 8002172:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002174:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002176:	b29b      	uxth	r3, r3
 8002178:	f005 ff23 	bl	8007fc2 <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	b29a      	uxth	r2, r3
 8002184:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002188:	4013      	ands	r3, r2
 800218a:	823b      	strh	r3, [r7, #16]
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	8a3a      	ldrh	r2, [r7, #16]
 8002192:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002196:	b292      	uxth	r2, r2
 8002198:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 800219a:	6878      	ldr	r0, [r7, #4]
 800219c:	f007 fde8 	bl	8009d70 <HAL_PCD_SetupStageCallback>
 80021a0:	e2f1      	b.n	8002786 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80021a2:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	f280 82ed 	bge.w	8002786 <PCD_EP_ISR_Handler+0x744>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	881b      	ldrh	r3, [r3, #0]
 80021b2:	b29a      	uxth	r2, r3
 80021b4:	f640 738f 	movw	r3, #3983	; 0xf8f
 80021b8:	4013      	ands	r3, r2
 80021ba:	83fb      	strh	r3, [r7, #30]
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	8bfa      	ldrh	r2, [r7, #30]
 80021c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80021c6:	b292      	uxth	r2, r2
 80021c8:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	461a      	mov	r2, r3
 80021d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021d8:	781b      	ldrb	r3, [r3, #0]
 80021da:	00db      	lsls	r3, r3, #3
 80021dc:	4413      	add	r3, r2
 80021de:	687a      	ldr	r2, [r7, #4]
 80021e0:	6812      	ldr	r2, [r2, #0]
 80021e2:	4413      	add	r3, r2
 80021e4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80021e8:	881b      	ldrh	r3, [r3, #0]
 80021ea:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80021ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f0:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80021f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021f4:	69db      	ldr	r3, [r3, #28]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d019      	beq.n	800222e <PCD_EP_ISR_Handler+0x1ec>
 80021fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d015      	beq.n	800222e <PCD_EP_ISR_Handler+0x1ec>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6818      	ldr	r0, [r3, #0]
 8002206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002208:	6959      	ldr	r1, [r3, #20]
 800220a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800220c:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 800220e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002210:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002212:	b29b      	uxth	r3, r3
 8002214:	f005 fed5 	bl	8007fc2 <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8002218:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221a:	695a      	ldr	r2, [r3, #20]
 800221c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800221e:	69db      	ldr	r3, [r3, #28]
 8002220:	441a      	add	r2, r3
 8002222:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002224:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002226:	2100      	movs	r1, #0
 8002228:	6878      	ldr	r0, [r7, #4]
 800222a:	f007 fdb3 	bl	8009d94 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	881b      	ldrh	r3, [r3, #0]
 8002234:	b29b      	uxth	r3, r3
 8002236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800223a:	2b00      	cmp	r3, #0
 800223c:	f040 82a3 	bne.w	8002786 <PCD_EP_ISR_Handler+0x744>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	61bb      	str	r3, [r7, #24]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800224e:	b29b      	uxth	r3, r3
 8002250:	461a      	mov	r2, r3
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	4413      	add	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
 8002258:	69bb      	ldr	r3, [r7, #24]
 800225a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002262:	691b      	ldr	r3, [r3, #16]
 8002264:	2b3e      	cmp	r3, #62	; 0x3e
 8002266:	d918      	bls.n	800229a <PCD_EP_ISR_Handler+0x258>
 8002268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800226a:	691b      	ldr	r3, [r3, #16]
 800226c:	095b      	lsrs	r3, r3, #5
 800226e:	647b      	str	r3, [r7, #68]	; 0x44
 8002270:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002272:	691b      	ldr	r3, [r3, #16]
 8002274:	f003 031f 	and.w	r3, r3, #31
 8002278:	2b00      	cmp	r3, #0
 800227a:	d102      	bne.n	8002282 <PCD_EP_ISR_Handler+0x240>
 800227c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800227e:	3b01      	subs	r3, #1
 8002280:	647b      	str	r3, [r7, #68]	; 0x44
 8002282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002284:	b29b      	uxth	r3, r3
 8002286:	029b      	lsls	r3, r3, #10
 8002288:	b29b      	uxth	r3, r3
 800228a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800228e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002292:	b29a      	uxth	r2, r3
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	801a      	strh	r2, [r3, #0]
 8002298:	e029      	b.n	80022ee <PCD_EP_ISR_Handler+0x2ac>
 800229a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d112      	bne.n	80022c8 <PCD_EP_ISR_Handler+0x286>
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	b29b      	uxth	r3, r3
 80022a8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80022ac:	b29a      	uxth	r2, r3
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	801a      	strh	r2, [r3, #0]
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	881b      	ldrh	r3, [r3, #0]
 80022b6:	b29b      	uxth	r3, r3
 80022b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80022bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80022c0:	b29a      	uxth	r2, r3
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	801a      	strh	r2, [r3, #0]
 80022c6:	e012      	b.n	80022ee <PCD_EP_ISR_Handler+0x2ac>
 80022c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	085b      	lsrs	r3, r3, #1
 80022ce:	647b      	str	r3, [r7, #68]	; 0x44
 80022d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80022d2:	691b      	ldr	r3, [r3, #16]
 80022d4:	f003 0301 	and.w	r3, r3, #1
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d002      	beq.n	80022e2 <PCD_EP_ISR_Handler+0x2a0>
 80022dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022de:	3301      	adds	r3, #1
 80022e0:	647b      	str	r3, [r7, #68]	; 0x44
 80022e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022e4:	b29b      	uxth	r3, r3
 80022e6:	029b      	lsls	r3, r3, #10
 80022e8:	b29a      	uxth	r2, r3
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	881b      	ldrh	r3, [r3, #0]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80022fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022fe:	827b      	strh	r3, [r7, #18]
 8002300:	8a7b      	ldrh	r3, [r7, #18]
 8002302:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002306:	827b      	strh	r3, [r7, #18]
 8002308:	8a7b      	ldrh	r3, [r7, #18]
 800230a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800230e:	827b      	strh	r3, [r7, #18]
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	8a7b      	ldrh	r3, [r7, #18]
 8002316:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800231a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800231e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002322:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002326:	b29b      	uxth	r3, r3
 8002328:	8013      	strh	r3, [r2, #0]
 800232a:	e22c      	b.n	8002786 <PCD_EP_ISR_Handler+0x744>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002336:	009b      	lsls	r3, r3, #2
 8002338:	4413      	add	r3, r2
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	f8a7 3052 	strh.w	r3, [r7, #82]	; 0x52

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002340:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	; 0x52
 8002344:	2b00      	cmp	r3, #0
 8002346:	f280 80f6 	bge.w	8002536 <PCD_EP_ISR_Handler+0x4f4>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	461a      	mov	r2, r3
 8002350:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	4413      	add	r3, r2
 8002358:	881b      	ldrh	r3, [r3, #0]
 800235a:	b29a      	uxth	r2, r3
 800235c:	f640 738f 	movw	r3, #3983	; 0xf8f
 8002360:	4013      	ands	r3, r2
 8002362:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	461a      	mov	r2, r3
 800236c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	f8b7 2050 	ldrh.w	r2, [r7, #80]	; 0x50
 8002378:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800237c:	b292      	uxth	r2, r2
 800237e:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002380:	f897 2055 	ldrb.w	r2, [r7, #85]	; 0x55
 8002384:	4613      	mov	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	4413      	add	r3, r2
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8002390:	687a      	ldr	r2, [r7, #4]
 8002392:	4413      	add	r3, r2
 8002394:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 8002396:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002398:	7b1b      	ldrb	r3, [r3, #12]
 800239a:	2b00      	cmp	r3, #0
 800239c:	d123      	bne.n	80023e6 <PCD_EP_ISR_Handler+0x3a4>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4413      	add	r3, r2
 80023b2:	687a      	ldr	r2, [r7, #4]
 80023b4:	6812      	ldr	r2, [r2, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80023bc:	881b      	ldrh	r3, [r3, #0]
 80023be:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c2:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

          if (count != 0U)
 80023c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f000 808e 	beq.w	80024ec <PCD_EP_ISR_Handler+0x4aa>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023d6:	6959      	ldr	r1, [r3, #20]
 80023d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023da:	88da      	ldrh	r2, [r3, #6]
 80023dc:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80023e0:	f005 fdef 	bl	8007fc2 <USB_ReadPMA>
 80023e4:	e082      	b.n	80024ec <PCD_EP_ISR_Handler+0x4aa>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80023e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80023e8:	78db      	ldrb	r3, [r3, #3]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d10a      	bne.n	8002404 <PCD_EP_ISR_Handler+0x3c2>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80023ee:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80023f2:	461a      	mov	r2, r3
 80023f4:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f000 f9d3 	bl	80027a2 <HAL_PCD_EP_DB_Receive>
 80023fc:	4603      	mov	r3, r0
 80023fe:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002402:	e073      	b.n	80024ec <PCD_EP_ISR_Handler+0x4aa>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	461a      	mov	r2, r3
 800240a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	009b      	lsls	r3, r3, #2
 8002410:	4413      	add	r3, r2
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	b29b      	uxth	r3, r3
 8002416:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800241a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800241e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	461a      	mov	r2, r3
 8002428:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800242a:	781b      	ldrb	r3, [r3, #0]
 800242c:	009b      	lsls	r3, r3, #2
 800242e:	441a      	add	r2, r3
 8002430:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002434:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002438:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800243c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002440:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002444:	b29b      	uxth	r3, r3
 8002446:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	461a      	mov	r2, r3
 800244e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	881b      	ldrh	r3, [r3, #0]
 8002458:	b29b      	uxth	r3, r3
 800245a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d022      	beq.n	80024a8 <PCD_EP_ISR_Handler+0x466>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800246a:	b29b      	uxth	r3, r3
 800246c:	461a      	mov	r2, r3
 800246e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4413      	add	r3, r2
 8002476:	687a      	ldr	r2, [r7, #4]
 8002478:	6812      	ldr	r2, [r2, #0]
 800247a:	4413      	add	r3, r2
 800247c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002480:	881b      	ldrh	r3, [r3, #0]
 8002482:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002486:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 800248a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 800248e:	2b00      	cmp	r3, #0
 8002490:	d02c      	beq.n	80024ec <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6818      	ldr	r0, [r3, #0]
 8002496:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002498:	6959      	ldr	r1, [r3, #20]
 800249a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800249c:	891a      	ldrh	r2, [r3, #8]
 800249e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024a2:	f005 fd8e 	bl	8007fc2 <USB_ReadPMA>
 80024a6:	e021      	b.n	80024ec <PCD_EP_ISR_Handler+0x4aa>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80024b0:	b29b      	uxth	r3, r3
 80024b2:	461a      	mov	r2, r3
 80024b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	00db      	lsls	r3, r3, #3
 80024ba:	4413      	add	r3, r2
 80024bc:	687a      	ldr	r2, [r7, #4]
 80024be:	6812      	ldr	r2, [r2, #0]
 80024c0:	4413      	add	r3, r2
 80024c2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80024cc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

              if (count != 0U)
 80024d0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d009      	beq.n	80024ec <PCD_EP_ISR_Handler+0x4aa>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
 80024dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024de:	6959      	ldr	r1, [r3, #20]
 80024e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024e2:	895a      	ldrh	r2, [r3, #10]
 80024e4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024e8:	f005 fd6b 	bl	8007fc2 <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80024ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024ee:	69da      	ldr	r2, [r3, #28]
 80024f0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80024f4:	441a      	add	r2, r3
 80024f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024f8:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80024fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002502:	441a      	add	r2, r3
 8002504:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002506:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002508:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800250a:	699b      	ldr	r3, [r3, #24]
 800250c:	2b00      	cmp	r3, #0
 800250e:	d005      	beq.n	800251c <PCD_EP_ISR_Handler+0x4da>
 8002510:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002516:	691b      	ldr	r3, [r3, #16]
 8002518:	429a      	cmp	r2, r3
 800251a:	d206      	bcs.n	800252a <PCD_EP_ISR_Handler+0x4e8>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 800251c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800251e:	781b      	ldrb	r3, [r3, #0]
 8002520:	4619      	mov	r1, r3
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f007 fc36 	bl	8009d94 <HAL_PCD_DataOutStageCallback>
 8002528:	e005      	b.n	8002536 <PCD_EP_ISR_Handler+0x4f4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002530:	4618      	mov	r0, r3
 8002532:	f004 f894 	bl	800665e <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002536:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800253a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800253e:	2b00      	cmp	r3, #0
 8002540:	f000 8121 	beq.w	8002786 <PCD_EP_ISR_Handler+0x744>
      {
        ep = &hpcd->IN_ep[epindex];
 8002544:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002548:	1c5a      	adds	r2, r3, #1
 800254a:	4613      	mov	r3, r2
 800254c:	009b      	lsls	r3, r3, #2
 800254e:	4413      	add	r3, r2
 8002550:	00db      	lsls	r3, r3, #3
 8002552:	687a      	ldr	r2, [r7, #4]
 8002554:	4413      	add	r3, r2
 8002556:	64fb      	str	r3, [r7, #76]	; 0x4c

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002562:	009b      	lsls	r3, r3, #2
 8002564:	4413      	add	r3, r2
 8002566:	881b      	ldrh	r3, [r3, #0]
 8002568:	b29b      	uxth	r3, r3
 800256a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800256e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002572:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	461a      	mov	r2, r3
 800257c:	f897 3055 	ldrb.w	r3, [r7, #85]	; 0x55
 8002580:	009b      	lsls	r3, r3, #2
 8002582:	441a      	add	r2, r3
 8002584:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002588:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800258c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002590:	b29b      	uxth	r3, r3
 8002592:	8013      	strh	r3, [r2, #0]

        if (ep->type != EP_TYPE_BULK)
 8002594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002596:	78db      	ldrb	r3, [r3, #3]
 8002598:	2b02      	cmp	r3, #2
 800259a:	f000 80a2 	beq.w	80026e2 <PCD_EP_ISR_Handler+0x6a0>
        {
          ep->xfer_len = 0U;
 800259e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a0:	2200      	movs	r2, #0
 80025a2:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80025a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025a6:	7b1b      	ldrb	r3, [r3, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f000 8093 	beq.w	80026d4 <PCD_EP_ISR_Handler+0x692>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80025ae:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80025b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d046      	beq.n	8002648 <PCD_EP_ISR_Handler+0x606>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80025ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025bc:	785b      	ldrb	r3, [r3, #1]
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d126      	bne.n	8002610 <PCD_EP_ISR_Handler+0x5ce>
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80025d0:	b29b      	uxth	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025d6:	4413      	add	r3, r2
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
 80025da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	00da      	lsls	r2, r3, #3
 80025e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e2:	4413      	add	r3, r2
 80025e4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	6a3b      	ldr	r3, [r7, #32]
 80025ec:	881b      	ldrh	r3, [r3, #0]
 80025ee:	b29b      	uxth	r3, r3
 80025f0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80025f4:	b29a      	uxth	r2, r3
 80025f6:	6a3b      	ldr	r3, [r7, #32]
 80025f8:	801a      	strh	r2, [r3, #0]
 80025fa:	6a3b      	ldr	r3, [r7, #32]
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	b29b      	uxth	r3, r3
 8002600:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002604:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002608:	b29a      	uxth	r2, r3
 800260a:	6a3b      	ldr	r3, [r7, #32]
 800260c:	801a      	strh	r2, [r3, #0]
 800260e:	e061      	b.n	80026d4 <PCD_EP_ISR_Handler+0x692>
 8002610:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002612:	785b      	ldrb	r3, [r3, #1]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d15d      	bne.n	80026d4 <PCD_EP_ISR_Handler+0x692>
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002626:	b29b      	uxth	r3, r3
 8002628:	461a      	mov	r2, r3
 800262a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800262c:	4413      	add	r3, r2
 800262e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002630:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	00da      	lsls	r2, r3, #3
 8002636:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002638:	4413      	add	r3, r2
 800263a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800263e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002642:	2200      	movs	r2, #0
 8002644:	801a      	strh	r2, [r3, #0]
 8002646:	e045      	b.n	80026d4 <PCD_EP_ISR_Handler+0x692>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800264e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002650:	785b      	ldrb	r3, [r3, #1]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d126      	bne.n	80026a4 <PCD_EP_ISR_Handler+0x662>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	637b      	str	r3, [r7, #52]	; 0x34
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002664:	b29b      	uxth	r3, r3
 8002666:	461a      	mov	r2, r3
 8002668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800266a:	4413      	add	r3, r2
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
 800266e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002670:	781b      	ldrb	r3, [r3, #0]
 8002672:	00da      	lsls	r2, r3, #3
 8002674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002676:	4413      	add	r3, r2
 8002678:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
 800267e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002680:	881b      	ldrh	r3, [r3, #0]
 8002682:	b29b      	uxth	r3, r3
 8002684:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002688:	b29a      	uxth	r2, r3
 800268a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800268c:	801a      	strh	r2, [r3, #0]
 800268e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002690:	881b      	ldrh	r3, [r3, #0]
 8002692:	b29b      	uxth	r3, r3
 8002694:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002698:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800269c:	b29a      	uxth	r2, r3
 800269e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a0:	801a      	strh	r2, [r3, #0]
 80026a2:	e017      	b.n	80026d4 <PCD_EP_ISR_Handler+0x692>
 80026a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026a6:	785b      	ldrb	r3, [r3, #1]
 80026a8:	2b01      	cmp	r3, #1
 80026aa:	d113      	bne.n	80026d4 <PCD_EP_ISR_Handler+0x692>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026ba:	4413      	add	r3, r2
 80026bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80026be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	00da      	lsls	r2, r3, #3
 80026c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026c6:	4413      	add	r3, r2
 80026c8:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80026cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80026ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d0:	2200      	movs	r2, #0
 80026d2:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80026d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	4619      	mov	r1, r3
 80026da:	6878      	ldr	r0, [r7, #4]
 80026dc:	f007 fb75 	bl	8009dca <HAL_PCD_DataInStageCallback>
 80026e0:	e051      	b.n	8002786 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Bulk Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80026e2:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 80026e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d144      	bne.n	8002778 <PCD_EP_ISR_Handler+0x736>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	461a      	mov	r2, r3
 80026fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	00db      	lsls	r3, r3, #3
 8002700:	4413      	add	r3, r2
 8002702:	687a      	ldr	r2, [r7, #4]
 8002704:	6812      	ldr	r2, [r2, #0]
 8002706:	4413      	add	r3, r2
 8002708:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800270c:	881b      	ldrh	r3, [r3, #0]
 800270e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002712:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

            if (ep->xfer_len > TxPctSize)
 8002716:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800271e:	429a      	cmp	r2, r3
 8002720:	d907      	bls.n	8002732 <PCD_EP_ISR_Handler+0x6f0>
            {
              ep->xfer_len -= TxPctSize;
 8002722:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002724:	699a      	ldr	r2, [r3, #24]
 8002726:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800272a:	1ad2      	subs	r2, r2, r3
 800272c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800272e:	619a      	str	r2, [r3, #24]
 8002730:	e002      	b.n	8002738 <PCD_EP_ISR_Handler+0x6f6>
            }
            else
            {
              ep->xfer_len = 0U;
 8002732:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002734:	2200      	movs	r2, #0
 8002736:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8002738:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800273a:	699b      	ldr	r3, [r3, #24]
 800273c:	2b00      	cmp	r3, #0
 800273e:	d106      	bne.n	800274e <PCD_EP_ISR_Handler+0x70c>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002740:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	4619      	mov	r1, r3
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f007 fb3f 	bl	8009dca <HAL_PCD_DataInStageCallback>
 800274c:	e01b      	b.n	8002786 <PCD_EP_ISR_Handler+0x744>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 800274e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002750:	695a      	ldr	r2, [r3, #20]
 8002752:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002756:	441a      	add	r2, r3
 8002758:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275a:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 800275c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800275e:	69da      	ldr	r2, [r3, #28]
 8002760:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002764:	441a      	add	r2, r3
 8002766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002768:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002770:	4618      	mov	r0, r3
 8002772:	f003 ff74 	bl	800665e <USB_EPStartXfer>
 8002776:	e006      	b.n	8002786 <PCD_EP_ISR_Handler+0x744>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8002778:	f8b7 3052 	ldrh.w	r3, [r7, #82]	; 0x52
 800277c:	461a      	mov	r2, r3
 800277e:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f917 	bl	80029b4 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800278e:	b29b      	uxth	r3, r3
 8002790:	b21b      	sxth	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	f6ff ac5a 	blt.w	800204c <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3758      	adds	r7, #88	; 0x58
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}

080027a2 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80027a2:	b580      	push	{r7, lr}
 80027a4:	b088      	sub	sp, #32
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	4613      	mov	r3, r2
 80027ae:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 80027b0:	88fb      	ldrh	r3, [r7, #6]
 80027b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d07c      	beq.n	80028b4 <HAL_PCD_EP_DB_Receive+0x112>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80027c2:	b29b      	uxth	r3, r3
 80027c4:	461a      	mov	r2, r3
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	00db      	lsls	r3, r3, #3
 80027cc:	4413      	add	r3, r2
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	6812      	ldr	r2, [r2, #0]
 80027d2:	4413      	add	r3, r2
 80027d4:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80027d8:	881b      	ldrh	r3, [r3, #0]
 80027da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80027de:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	699a      	ldr	r2, [r3, #24]
 80027e4:	8b7b      	ldrh	r3, [r7, #26]
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d306      	bcc.n	80027f8 <HAL_PCD_EP_DB_Receive+0x56>
    {
      ep->xfer_len -= count;
 80027ea:	68bb      	ldr	r3, [r7, #8]
 80027ec:	699a      	ldr	r2, [r3, #24]
 80027ee:	8b7b      	ldrh	r3, [r7, #26]
 80027f0:	1ad2      	subs	r2, r2, r3
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	619a      	str	r2, [r3, #24]
 80027f6:	e002      	b.n	80027fe <HAL_PCD_EP_DB_Receive+0x5c>
    }
    else
    {
      ep->xfer_len = 0U;
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	699b      	ldr	r3, [r3, #24]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d123      	bne.n	800284e <HAL_PCD_EP_DB_Receive+0xac>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	461a      	mov	r2, r3
 800280c:	68bb      	ldr	r3, [r7, #8]
 800280e:	781b      	ldrb	r3, [r3, #0]
 8002810:	009b      	lsls	r3, r3, #2
 8002812:	4413      	add	r3, r2
 8002814:	881b      	ldrh	r3, [r3, #0]
 8002816:	b29b      	uxth	r3, r3
 8002818:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800281c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002820:	833b      	strh	r3, [r7, #24]
 8002822:	8b3b      	ldrh	r3, [r7, #24]
 8002824:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002828:	833b      	strh	r3, [r7, #24]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	461a      	mov	r2, r3
 8002830:	68bb      	ldr	r3, [r7, #8]
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	441a      	add	r2, r3
 8002838:	8b3b      	ldrh	r3, [r7, #24]
 800283a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800283e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002842:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002846:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800284a:	b29b      	uxth	r3, r3
 800284c:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800284e:	88fb      	ldrh	r3, [r7, #6]
 8002850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d01f      	beq.n	8002898 <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	461a      	mov	r2, r3
 800285e:	68bb      	ldr	r3, [r7, #8]
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	b29b      	uxth	r3, r3
 800286a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800286e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002872:	82fb      	strh	r3, [r7, #22]
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	461a      	mov	r2, r3
 800287a:	68bb      	ldr	r3, [r7, #8]
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	441a      	add	r2, r3
 8002882:	8afb      	ldrh	r3, [r7, #22]
 8002884:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002888:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800288c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002890:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002894:	b29b      	uxth	r3, r3
 8002896:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002898:	8b7b      	ldrh	r3, [r7, #26]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8085 	beq.w	80029aa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	6818      	ldr	r0, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	6959      	ldr	r1, [r3, #20]
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	891a      	ldrh	r2, [r3, #8]
 80028ac:	8b7b      	ldrh	r3, [r7, #26]
 80028ae:	f005 fb88 	bl	8007fc2 <USB_ReadPMA>
 80028b2:	e07a      	b.n	80029aa <HAL_PCD_EP_DB_Receive+0x208>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028bc:	b29b      	uxth	r3, r3
 80028be:	461a      	mov	r2, r3
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	00db      	lsls	r3, r3, #3
 80028c6:	4413      	add	r3, r2
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	6812      	ldr	r2, [r2, #0]
 80028cc:	4413      	add	r3, r2
 80028ce:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80028d2:	881b      	ldrh	r3, [r3, #0]
 80028d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80028d8:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	699a      	ldr	r2, [r3, #24]
 80028de:	8b7b      	ldrh	r3, [r7, #26]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d306      	bcc.n	80028f2 <HAL_PCD_EP_DB_Receive+0x150>
    {
      ep->xfer_len -= count;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	699a      	ldr	r2, [r3, #24]
 80028e8:	8b7b      	ldrh	r3, [r7, #26]
 80028ea:	1ad2      	subs	r2, r2, r3
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	619a      	str	r2, [r3, #24]
 80028f0:	e002      	b.n	80028f8 <HAL_PCD_EP_DB_Receive+0x156>
    }
    else
    {
      ep->xfer_len = 0U;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	2200      	movs	r2, #0
 80028f6:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	699b      	ldr	r3, [r3, #24]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d123      	bne.n	8002948 <HAL_PCD_EP_DB_Receive+0x1a6>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	461a      	mov	r2, r3
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	781b      	ldrb	r3, [r3, #0]
 800290a:	009b      	lsls	r3, r3, #2
 800290c:	4413      	add	r3, r2
 800290e:	881b      	ldrh	r3, [r3, #0]
 8002910:	b29b      	uxth	r3, r3
 8002912:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291a:	83fb      	strh	r3, [r7, #30]
 800291c:	8bfb      	ldrh	r3, [r7, #30]
 800291e:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8002922:	83fb      	strh	r3, [r7, #30]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	461a      	mov	r2, r3
 800292a:	68bb      	ldr	r3, [r7, #8]
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	009b      	lsls	r3, r3, #2
 8002930:	441a      	add	r2, r3
 8002932:	8bfb      	ldrh	r3, [r7, #30]
 8002934:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002938:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800293c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002940:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002944:	b29b      	uxth	r3, r3
 8002946:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002948:	88fb      	ldrh	r3, [r7, #6]
 800294a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11f      	bne.n	8002992 <HAL_PCD_EP_DB_Receive+0x1f0>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	461a      	mov	r2, r3
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	009b      	lsls	r3, r3, #2
 800295e:	4413      	add	r3, r2
 8002960:	881b      	ldrh	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002968:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800296c:	83bb      	strh	r3, [r7, #28]
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	461a      	mov	r2, r3
 8002974:	68bb      	ldr	r3, [r7, #8]
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	441a      	add	r2, r3
 800297c:	8bbb      	ldrh	r3, [r7, #28]
 800297e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002982:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002986:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800298a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800298e:	b29b      	uxth	r3, r3
 8002990:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8002992:	8b7b      	ldrh	r3, [r7, #26]
 8002994:	2b00      	cmp	r3, #0
 8002996:	d008      	beq.n	80029aa <HAL_PCD_EP_DB_Receive+0x208>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	6818      	ldr	r0, [r3, #0]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	6959      	ldr	r1, [r3, #20]
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	895a      	ldrh	r2, [r3, #10]
 80029a4:	8b7b      	ldrh	r3, [r7, #26]
 80029a6:	f005 fb0c 	bl	8007fc2 <USB_ReadPMA>
    }
  }

  return count;
 80029aa:	8b7b      	ldrh	r3, [r7, #26]
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3720      	adds	r7, #32
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b0a2      	sub	sp, #136	; 0x88
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	60f8      	str	r0, [r7, #12]
 80029bc:	60b9      	str	r1, [r7, #8]
 80029be:	4613      	mov	r3, r2
 80029c0:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80029c2:	88fb      	ldrh	r3, [r7, #6]
 80029c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	f000 81c5 	beq.w	8002d58 <HAL_PCD_EP_DB_Transmit+0x3a4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80029d6:	b29b      	uxth	r3, r3
 80029d8:	461a      	mov	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4413      	add	r3, r2
 80029e2:	68fa      	ldr	r2, [r7, #12]
 80029e4:	6812      	ldr	r2, [r2, #0]
 80029e6:	4413      	add	r3, r2
 80029e8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80029ec:	881b      	ldrh	r3, [r3, #0]
 80029ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80029f2:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxPctSize)
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	699a      	ldr	r2, [r3, #24]
 80029fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d907      	bls.n	8002a12 <HAL_PCD_EP_DB_Transmit+0x5e>
    {
      ep->xfer_len -= TxPctSize;
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	699a      	ldr	r2, [r3, #24]
 8002a06:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002a0a:	1ad2      	subs	r2, r2, r3
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	619a      	str	r2, [r3, #24]
 8002a10:	e002      	b.n	8002a18 <HAL_PCD_EP_DB_Transmit+0x64>
    }
    else
    {
      ep->xfer_len = 0U;
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	2200      	movs	r2, #0
 8002a16:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	699b      	ldr	r3, [r3, #24]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f040 80b9 	bne.w	8002b94 <HAL_PCD_EP_DB_Transmit+0x1e0>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	785b      	ldrb	r3, [r3, #1]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d126      	bne.n	8002a78 <HAL_PCD_EP_DB_Transmit+0xc4>
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a38:	b29b      	uxth	r3, r3
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a3e:	4413      	add	r3, r2
 8002a40:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	781b      	ldrb	r3, [r3, #0]
 8002a46:	00da      	lsls	r2, r3, #3
 8002a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4a:	4413      	add	r3, r2
 8002a4c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
 8002a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002a5c:	b29a      	uxth	r2, r3
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	801a      	strh	r2, [r3, #0]
 8002a62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a64:	881b      	ldrh	r3, [r3, #0]
 8002a66:	b29b      	uxth	r3, r3
 8002a68:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002a6c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002a70:	b29a      	uxth	r2, r3
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	801a      	strh	r2, [r3, #0]
 8002a76:	e01a      	b.n	8002aae <HAL_PCD_EP_DB_Transmit+0xfa>
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	785b      	ldrb	r3, [r3, #1]
 8002a7c:	2b01      	cmp	r3, #1
 8002a7e:	d116      	bne.n	8002aae <HAL_PCD_EP_DB_Transmit+0xfa>
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	633b      	str	r3, [r7, #48]	; 0x30
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002a8e:	b29b      	uxth	r3, r3
 8002a90:	461a      	mov	r2, r3
 8002a92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a94:	4413      	add	r3, r2
 8002a96:	633b      	str	r3, [r7, #48]	; 0x30
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	781b      	ldrb	r3, [r3, #0]
 8002a9c:	00da      	lsls	r2, r3, #3
 8002a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002aa6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aaa:	2200      	movs	r2, #0
 8002aac:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	623b      	str	r3, [r7, #32]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	785b      	ldrb	r3, [r3, #1]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d126      	bne.n	8002b0a <HAL_PCD_EP_DB_Transmit+0x156>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002aca:	b29b      	uxth	r3, r3
 8002acc:	461a      	mov	r2, r3
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	781b      	ldrb	r3, [r3, #0]
 8002ad8:	00da      	lsls	r2, r3, #3
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4413      	add	r3, r2
 8002ade:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ae2:	617b      	str	r3, [r7, #20]
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	b29b      	uxth	r3, r3
 8002aea:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002aee:	b29a      	uxth	r2, r3
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	801a      	strh	r2, [r3, #0]
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	881b      	ldrh	r3, [r3, #0]
 8002af8:	b29b      	uxth	r3, r3
 8002afa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002afe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002b02:	b29a      	uxth	r2, r3
 8002b04:	697b      	ldr	r3, [r7, #20]
 8002b06:	801a      	strh	r2, [r3, #0]
 8002b08:	e017      	b.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x186>
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	785b      	ldrb	r3, [r3, #1]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d113      	bne.n	8002b3a <HAL_PCD_EP_DB_Transmit+0x186>
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	4413      	add	r3, r2
 8002b22:	623b      	str	r3, [r7, #32]
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	00da      	lsls	r2, r3, #3
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	4413      	add	r3, r2
 8002b2e:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002b32:	61fb      	str	r3, [r7, #28]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	2200      	movs	r2, #0
 8002b38:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	4619      	mov	r1, r3
 8002b40:	68f8      	ldr	r0, [r7, #12]
 8002b42:	f007 f942 	bl	8009dca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b46:	88fb      	ldrh	r3, [r7, #6]
 8002b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	f000 82d2 	beq.w	80030f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	461a      	mov	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	009b      	lsls	r3, r3, #2
 8002b5e:	4413      	add	r3, r2
 8002b60:	881b      	ldrh	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002b68:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b6c:	827b      	strh	r3, [r7, #18]
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	461a      	mov	r2, r3
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	009b      	lsls	r3, r3, #2
 8002b7a:	441a      	add	r2, r3
 8002b7c:	8a7b      	ldrh	r3, [r7, #18]
 8002b7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002b82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002b86:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	8013      	strh	r3, [r2, #0]
 8002b92:	e2b0      	b.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002b94:	88fb      	ldrh	r3, [r7, #6]
 8002b96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d021      	beq.n	8002be2 <HAL_PCD_EP_DB_Transmit+0x22e>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002b9e:	68fb      	ldr	r3, [r7, #12]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	461a      	mov	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	009b      	lsls	r3, r3, #2
 8002baa:	4413      	add	r3, r2
 8002bac:	881b      	ldrh	r3, [r3, #0]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002bb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002bb8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	461a      	mov	r2, r3
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	781b      	ldrb	r3, [r3, #0]
 8002bc6:	009b      	lsls	r3, r3, #2
 8002bc8:	441a      	add	r2, r3
 8002bca:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8002bce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002bd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002bd6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002be2:	68bb      	ldr	r3, [r7, #8]
 8002be4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	f040 8284 	bne.w	80030f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002bee:	68bb      	ldr	r3, [r7, #8]
 8002bf0:	695a      	ldr	r2, [r3, #20]
 8002bf2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002bf6:	441a      	add	r2, r3
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002bfc:	68bb      	ldr	r3, [r7, #8]
 8002bfe:	69da      	ldr	r2, [r3, #28]
 8002c00:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c04:	441a      	add	r2, r3
 8002c06:	68bb      	ldr	r3, [r7, #8]
 8002c08:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002c0a:	68bb      	ldr	r3, [r7, #8]
 8002c0c:	6a1a      	ldr	r2, [r3, #32]
 8002c0e:	68bb      	ldr	r3, [r7, #8]
 8002c10:	691b      	ldr	r3, [r3, #16]
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d309      	bcc.n	8002c2a <HAL_PCD_EP_DB_Transmit+0x276>
        {
          len = ep->maxpacket;
 8002c16:	68bb      	ldr	r3, [r7, #8]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002c1c:	68bb      	ldr	r3, [r7, #8]
 8002c1e:	6a1a      	ldr	r2, [r3, #32]
 8002c20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c22:	1ad2      	subs	r2, r2, r3
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	621a      	str	r2, [r3, #32]
 8002c28:	e015      	b.n	8002c56 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else if (ep->xfer_len_db == 0U)
 8002c2a:	68bb      	ldr	r3, [r7, #8]
 8002c2c:	6a1b      	ldr	r3, [r3, #32]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d107      	bne.n	8002c42 <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8002c32:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002c36:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002c40:	e009      	b.n	8002c56 <HAL_PCD_EP_DB_Transmit+0x2a2>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	2200      	movs	r2, #0
 8002c46:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	6a1b      	ldr	r3, [r3, #32]
 8002c4e:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002c50:	68bb      	ldr	r3, [r7, #8]
 8002c52:	2200      	movs	r2, #0
 8002c54:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002c56:	68bb      	ldr	r3, [r7, #8]
 8002c58:	785b      	ldrb	r3, [r3, #1]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d155      	bne.n	8002d0a <HAL_PCD_EP_DB_Transmit+0x356>
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002c6c:	b29b      	uxth	r3, r3
 8002c6e:	461a      	mov	r2, r3
 8002c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c72:	4413      	add	r3, r2
 8002c74:	63bb      	str	r3, [r7, #56]	; 0x38
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	00da      	lsls	r2, r3, #3
 8002c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c7e:	4413      	add	r3, r2
 8002c80:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002c84:	637b      	str	r3, [r7, #52]	; 0x34
 8002c86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c88:	2b3e      	cmp	r3, #62	; 0x3e
 8002c8a:	d916      	bls.n	8002cba <HAL_PCD_EP_DB_Transmit+0x306>
 8002c8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c8e:	095b      	lsrs	r3, r3, #5
 8002c90:	64bb      	str	r3, [r7, #72]	; 0x48
 8002c92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c94:	f003 031f 	and.w	r3, r3, #31
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d102      	bne.n	8002ca2 <HAL_PCD_EP_DB_Transmit+0x2ee>
 8002c9c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c9e:	3b01      	subs	r3, #1
 8002ca0:	64bb      	str	r3, [r7, #72]	; 0x48
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ca4:	b29b      	uxth	r3, r3
 8002ca6:	029b      	lsls	r3, r3, #10
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cb2:	b29a      	uxth	r2, r3
 8002cb4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb6:	801a      	strh	r2, [r3, #0]
 8002cb8:	e043      	b.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d112      	bne.n	8002ce6 <HAL_PCD_EP_DB_Transmit+0x332>
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	b29b      	uxth	r3, r3
 8002cc6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cce:	801a      	strh	r2, [r3, #0]
 8002cd0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cd2:	881b      	ldrh	r3, [r3, #0]
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002cda:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002cde:	b29a      	uxth	r2, r3
 8002ce0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002ce2:	801a      	strh	r2, [r3, #0]
 8002ce4:	e02d      	b.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002ce6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ce8:	085b      	lsrs	r3, r3, #1
 8002cea:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002cee:	f003 0301 	and.w	r3, r3, #1
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d002      	beq.n	8002cfc <HAL_PCD_EP_DB_Transmit+0x348>
 8002cf6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cf8:	3301      	adds	r3, #1
 8002cfa:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cfc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002cfe:	b29b      	uxth	r3, r3
 8002d00:	029b      	lsls	r3, r3, #10
 8002d02:	b29a      	uxth	r2, r3
 8002d04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d06:	801a      	strh	r2, [r3, #0]
 8002d08:	e01b      	b.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	785b      	ldrb	r3, [r3, #1]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d117      	bne.n	8002d42 <HAL_PCD_EP_DB_Transmit+0x38e>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	643b      	str	r3, [r7, #64]	; 0x40
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d20:	b29b      	uxth	r3, r3
 8002d22:	461a      	mov	r2, r3
 8002d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d26:	4413      	add	r3, r2
 8002d28:	643b      	str	r3, [r7, #64]	; 0x40
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	00da      	lsls	r2, r3, #3
 8002d30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d32:	4413      	add	r3, r2
 8002d34:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002d38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d3c:	b29a      	uxth	r2, r3
 8002d3e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d40:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	6818      	ldr	r0, [r3, #0]
 8002d46:	68bb      	ldr	r3, [r7, #8]
 8002d48:	6959      	ldr	r1, [r3, #20]
 8002d4a:	68bb      	ldr	r3, [r7, #8]
 8002d4c:	891a      	ldrh	r2, [r3, #8]
 8002d4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d50:	b29b      	uxth	r3, r3
 8002d52:	f005 f8f4 	bl	8007f3e <USB_WritePMA>
 8002d56:	e1ce      	b.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x742>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	461a      	mov	r2, r3
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	781b      	ldrb	r3, [r3, #0]
 8002d68:	00db      	lsls	r3, r3, #3
 8002d6a:	4413      	add	r3, r2
 8002d6c:	68fa      	ldr	r2, [r7, #12]
 8002d6e:	6812      	ldr	r2, [r2, #0]
 8002d70:	4413      	add	r3, r2
 8002d72:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002d76:	881b      	ldrh	r3, [r3, #0]
 8002d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002d7c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxPctSize)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d88:	429a      	cmp	r2, r3
 8002d8a:	d307      	bcc.n	8002d9c <HAL_PCD_EP_DB_Transmit+0x3e8>
    {
      ep->xfer_len -= TxPctSize;
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	699a      	ldr	r2, [r3, #24]
 8002d90:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d94:	1ad2      	subs	r2, r2, r3
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	619a      	str	r2, [r3, #24]
 8002d9a:	e002      	b.n	8002da2 <HAL_PCD_EP_DB_Transmit+0x3ee>
    }
    else
    {
      ep->xfer_len = 0U;
 8002d9c:	68bb      	ldr	r3, [r7, #8]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 80c4 	bne.w	8002f34 <HAL_PCD_EP_DB_Transmit+0x580>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dac:	68bb      	ldr	r3, [r7, #8]
 8002dae:	785b      	ldrb	r3, [r3, #1]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d126      	bne.n	8002e02 <HAL_PCD_EP_DB_Transmit+0x44e>
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dc8:	4413      	add	r3, r2
 8002dca:	66bb      	str	r3, [r7, #104]	; 0x68
 8002dcc:	68bb      	ldr	r3, [r7, #8]
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	00da      	lsls	r2, r3, #3
 8002dd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002dd4:	4413      	add	r3, r2
 8002dd6:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002dda:	667b      	str	r3, [r7, #100]	; 0x64
 8002ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dde:	881b      	ldrh	r3, [r3, #0]
 8002de0:	b29b      	uxth	r3, r3
 8002de2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002de6:	b29a      	uxth	r2, r3
 8002de8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dea:	801a      	strh	r2, [r3, #0]
 8002dec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dee:	881b      	ldrh	r3, [r3, #0]
 8002df0:	b29b      	uxth	r3, r3
 8002df2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002df6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dfe:	801a      	strh	r2, [r3, #0]
 8002e00:	e01a      	b.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x484>
 8002e02:	68bb      	ldr	r3, [r7, #8]
 8002e04:	785b      	ldrb	r3, [r3, #1]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d116      	bne.n	8002e38 <HAL_PCD_EP_DB_Transmit+0x484>
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	673b      	str	r3, [r7, #112]	; 0x70
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e18:	b29b      	uxth	r3, r3
 8002e1a:	461a      	mov	r2, r3
 8002e1c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e1e:	4413      	add	r3, r2
 8002e20:	673b      	str	r3, [r7, #112]	; 0x70
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	00da      	lsls	r2, r3, #3
 8002e28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e2a:	4413      	add	r3, r2
 8002e2c:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8002e30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002e34:	2200      	movs	r2, #0
 8002e36:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	785b      	ldrb	r3, [r3, #1]
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d12f      	bne.n	8002ea6 <HAL_PCD_EP_DB_Transmit+0x4f2>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002e56:	b29b      	uxth	r3, r3
 8002e58:	461a      	mov	r2, r3
 8002e5a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e5e:	4413      	add	r3, r2
 8002e60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	781b      	ldrb	r3, [r3, #0]
 8002e68:	00da      	lsls	r2, r3, #3
 8002e6a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e6e:	4413      	add	r3, r2
 8002e70:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002e74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002e78:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8002e84:	b29a      	uxth	r2, r3
 8002e86:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e8a:	801a      	strh	r2, [r3, #0]
 8002e8c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e90:	881b      	ldrh	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002e98:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002e9c:	b29a      	uxth	r2, r3
 8002e9e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ea2:	801a      	strh	r2, [r3, #0]
 8002ea4:	e017      	b.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x522>
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	785b      	ldrb	r3, [r3, #1]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d113      	bne.n	8002ed6 <HAL_PCD_EP_DB_Transmit+0x522>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002eb6:	b29b      	uxth	r3, r3
 8002eb8:	461a      	mov	r2, r3
 8002eba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ebc:	4413      	add	r3, r2
 8002ebe:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	781b      	ldrb	r3, [r3, #0]
 8002ec4:	00da      	lsls	r2, r3, #3
 8002ec6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002ec8:	4413      	add	r3, r2
 8002eca:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8002ece:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ed0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	781b      	ldrb	r3, [r3, #0]
 8002eda:	4619      	mov	r1, r3
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f006 ff74 	bl	8009dca <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002ee2:	88fb      	ldrh	r3, [r7, #6]
 8002ee4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f040 8104 	bne.w	80030f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	461a      	mov	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	781b      	ldrb	r3, [r3, #0]
 8002ef8:	009b      	lsls	r3, r3, #2
 8002efa:	4413      	add	r3, r2
 8002efc:	881b      	ldrh	r3, [r3, #0]
 8002efe:	b29b      	uxth	r3, r3
 8002f00:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f08:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	461a      	mov	r2, r3
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	781b      	ldrb	r3, [r3, #0]
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	441a      	add	r2, r3
 8002f1a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002f1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f26:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	8013      	strh	r3, [r2, #0]
 8002f32:	e0e0      	b.n	80030f6 <HAL_PCD_EP_DB_Transmit+0x742>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f34:	88fb      	ldrh	r3, [r7, #6]
 8002f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d121      	bne.n	8002f82 <HAL_PCD_EP_DB_Transmit+0x5ce>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f58:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	461a      	mov	r2, r3
 8002f62:	68bb      	ldr	r3, [r7, #8]
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	441a      	add	r2, r3
 8002f6a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8002f72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8002f76:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f88:	2b01      	cmp	r3, #1
 8002f8a:	f040 80b4 	bne.w	80030f6 <HAL_PCD_EP_DB_Transmit+0x742>
      {
        ep->xfer_buff += TxPctSize;
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	695a      	ldr	r2, [r3, #20]
 8002f92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002f96:	441a      	add	r2, r3
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	69da      	ldr	r2, [r3, #28]
 8002fa0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fa4:	441a      	add	r2, r3
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	6a1a      	ldr	r2, [r3, #32]
 8002fae:	68bb      	ldr	r3, [r7, #8]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	429a      	cmp	r2, r3
 8002fb4:	d309      	bcc.n	8002fca <HAL_PCD_EP_DB_Transmit+0x616>
        {
          len = ep->maxpacket;
 8002fb6:	68bb      	ldr	r3, [r7, #8]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	6a1a      	ldr	r2, [r3, #32]
 8002fc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002fc2:	1ad2      	subs	r2, r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	621a      	str	r2, [r3, #32]
 8002fc8:	e015      	b.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else if (ep->xfer_len_db == 0U)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	6a1b      	ldr	r3, [r3, #32]
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d107      	bne.n	8002fe2 <HAL_PCD_EP_DB_Transmit+0x62e>
        {
          len = TxPctSize;
 8002fd2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fd6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8002fe0:	e009      	b.n	8002ff6 <HAL_PCD_EP_DB_Transmit+0x642>
        }
        else
        {
          len = ep->xfer_len_db;
 8002fe2:	68bb      	ldr	r3, [r7, #8]
 8002fe4:	6a1b      	ldr	r3, [r3, #32]
 8002fe6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	2200      	movs	r2, #0
 8002fec:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8002fee:	68bb      	ldr	r3, [r7, #8]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	663b      	str	r3, [r7, #96]	; 0x60
 8002ffc:	68bb      	ldr	r3, [r7, #8]
 8002ffe:	785b      	ldrb	r3, [r3, #1]
 8003000:	2b00      	cmp	r3, #0
 8003002:	d155      	bne.n	80030b0 <HAL_PCD_EP_DB_Transmit+0x6fc>
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	65bb      	str	r3, [r7, #88]	; 0x58
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8003012:	b29b      	uxth	r3, r3
 8003014:	461a      	mov	r2, r3
 8003016:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003018:	4413      	add	r3, r2
 800301a:	65bb      	str	r3, [r7, #88]	; 0x58
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	781b      	ldrb	r3, [r3, #0]
 8003020:	00da      	lsls	r2, r3, #3
 8003022:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003024:	4413      	add	r3, r2
 8003026:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800302a:	657b      	str	r3, [r7, #84]	; 0x54
 800302c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800302e:	2b3e      	cmp	r3, #62	; 0x3e
 8003030:	d916      	bls.n	8003060 <HAL_PCD_EP_DB_Transmit+0x6ac>
 8003032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003034:	095b      	lsrs	r3, r3, #5
 8003036:	677b      	str	r3, [r7, #116]	; 0x74
 8003038:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800303a:	f003 031f 	and.w	r3, r3, #31
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <HAL_PCD_EP_DB_Transmit+0x694>
 8003042:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003044:	3b01      	subs	r3, #1
 8003046:	677b      	str	r3, [r7, #116]	; 0x74
 8003048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800304a:	b29b      	uxth	r3, r3
 800304c:	029b      	lsls	r3, r3, #10
 800304e:	b29b      	uxth	r3, r3
 8003050:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003054:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003058:	b29a      	uxth	r2, r3
 800305a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800305c:	801a      	strh	r2, [r3, #0]
 800305e:	e040      	b.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 8003060:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003062:	2b00      	cmp	r3, #0
 8003064:	d112      	bne.n	800308c <HAL_PCD_EP_DB_Transmit+0x6d8>
 8003066:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29b      	uxth	r3, r3
 800306c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8003070:	b29a      	uxth	r2, r3
 8003072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003074:	801a      	strh	r2, [r3, #0]
 8003076:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003078:	881b      	ldrh	r3, [r3, #0]
 800307a:	b29b      	uxth	r3, r3
 800307c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8003080:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8003084:	b29a      	uxth	r2, r3
 8003086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003088:	801a      	strh	r2, [r3, #0]
 800308a:	e02a      	b.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 800308c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800308e:	085b      	lsrs	r3, r3, #1
 8003090:	677b      	str	r3, [r7, #116]	; 0x74
 8003092:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	2b00      	cmp	r3, #0
 800309a:	d002      	beq.n	80030a2 <HAL_PCD_EP_DB_Transmit+0x6ee>
 800309c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800309e:	3301      	adds	r3, #1
 80030a0:	677b      	str	r3, [r7, #116]	; 0x74
 80030a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	029b      	lsls	r3, r3, #10
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80030ac:	801a      	strh	r2, [r3, #0]
 80030ae:	e018      	b.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	785b      	ldrb	r3, [r3, #1]
 80030b4:	2b01      	cmp	r3, #1
 80030b6:	d114      	bne.n	80030e2 <HAL_PCD_EP_DB_Transmit+0x72e>
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	461a      	mov	r2, r3
 80030c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030c6:	4413      	add	r3, r2
 80030c8:	663b      	str	r3, [r7, #96]	; 0x60
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	781b      	ldrb	r3, [r3, #0]
 80030ce:	00da      	lsls	r2, r3, #3
 80030d0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80030d2:	4413      	add	r3, r2
 80030d4:	f203 4306 	addw	r3, r3, #1030	; 0x406
 80030d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80030da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030dc:	b29a      	uxth	r2, r3
 80030de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80030e0:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	6818      	ldr	r0, [r3, #0]
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	6959      	ldr	r1, [r3, #20]
 80030ea:	68bb      	ldr	r3, [r7, #8]
 80030ec:	895a      	ldrh	r2, [r3, #10]
 80030ee:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80030f0:	b29b      	uxth	r3, r3
 80030f2:	f004 ff24 	bl	8007f3e <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	461a      	mov	r2, r3
 80030fc:	68bb      	ldr	r3, [r7, #8]
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4413      	add	r3, r2
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800310c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003110:	823b      	strh	r3, [r7, #16]
 8003112:	8a3b      	ldrh	r3, [r7, #16]
 8003114:	f083 0310 	eor.w	r3, r3, #16
 8003118:	823b      	strh	r3, [r7, #16]
 800311a:	8a3b      	ldrh	r3, [r7, #16]
 800311c:	f083 0320 	eor.w	r3, r3, #32
 8003120:	823b      	strh	r3, [r7, #16]
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	461a      	mov	r2, r3
 8003128:	68bb      	ldr	r3, [r7, #8]
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	009b      	lsls	r3, r3, #2
 800312e:	441a      	add	r2, r3
 8003130:	8a3b      	ldrh	r3, [r7, #16]
 8003132:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8003136:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800313a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800313e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003142:	b29b      	uxth	r3, r3
 8003144:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 8003146:	2300      	movs	r3, #0
}
 8003148:	4618      	mov	r0, r3
 800314a:	3788      	adds	r7, #136	; 0x88
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}

08003150 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003150:	b480      	push	{r7}
 8003152:	b087      	sub	sp, #28
 8003154:	af00      	add	r7, sp, #0
 8003156:	60f8      	str	r0, [r7, #12]
 8003158:	607b      	str	r3, [r7, #4]
 800315a:	460b      	mov	r3, r1
 800315c:	817b      	strh	r3, [r7, #10]
 800315e:	4613      	mov	r3, r2
 8003160:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 8003162:	897b      	ldrh	r3, [r7, #10]
 8003164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d00b      	beq.n	8003186 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800316e:	897b      	ldrh	r3, [r7, #10]
 8003170:	f003 0307 	and.w	r3, r3, #7
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	4613      	mov	r3, r2
 8003178:	009b      	lsls	r3, r3, #2
 800317a:	4413      	add	r3, r2
 800317c:	00db      	lsls	r3, r3, #3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4413      	add	r3, r2
 8003182:	617b      	str	r3, [r7, #20]
 8003184:	e009      	b.n	800319a <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003186:	897a      	ldrh	r2, [r7, #10]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00db      	lsls	r3, r3, #3
 8003190:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8003194:	68fa      	ldr	r2, [r7, #12]
 8003196:	4413      	add	r3, r2
 8003198:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800319a:	893b      	ldrh	r3, [r7, #8]
 800319c:	2b00      	cmp	r3, #0
 800319e:	d107      	bne.n	80031b0 <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	2200      	movs	r2, #0
 80031a4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	b29a      	uxth	r2, r3
 80031aa:	697b      	ldr	r3, [r7, #20]
 80031ac:	80da      	strh	r2, [r3, #6]
 80031ae:	e00b      	b.n	80031c8 <HAL_PCDEx_PMAConfig+0x78>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	2201      	movs	r2, #1
 80031b4:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	b29a      	uxth	r2, r3
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	0c1b      	lsrs	r3, r3, #16
 80031c2:	b29a      	uxth	r2, r3
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	371c      	adds	r7, #28
 80031ce:	46bd      	mov	sp, r7
 80031d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d4:	4770      	bx	lr

080031d6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80031d6:	b480      	push	{r7}
 80031d8:	b085      	sub	sp, #20
 80031da:	af00      	add	r7, sp, #0
 80031dc:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2200      	movs	r2, #0
 80031f0:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	b29a      	uxth	r2, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800320e:	b29b      	uxth	r3, r3
 8003210:	f043 0302 	orr.w	r3, r3, #2
 8003214:	b29a      	uxth	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3714      	adds	r7, #20
 8003222:	46bd      	mov	sp, r7
 8003224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003228:	4770      	bx	lr
	...

0800322c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800322c:	b480      	push	{r7}
 800322e:	b085      	sub	sp, #20
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2b00      	cmp	r3, #0
 8003238:	d141      	bne.n	80032be <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800323a:	4b4b      	ldr	r3, [pc, #300]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003242:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003246:	d131      	bne.n	80032ac <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003248:	4b47      	ldr	r3, [pc, #284]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800324e:	4a46      	ldr	r2, [pc, #280]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003250:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003254:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003258:	4b43      	ldr	r3, [pc, #268]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003260:	4a41      	ldr	r2, [pc, #260]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003266:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003268:	4b40      	ldr	r3, [pc, #256]	; (800336c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	2232      	movs	r2, #50	; 0x32
 800326e:	fb02 f303 	mul.w	r3, r2, r3
 8003272:	4a3f      	ldr	r2, [pc, #252]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003274:	fba2 2303 	umull	r2, r3, r2, r3
 8003278:	0c9b      	lsrs	r3, r3, #18
 800327a:	3301      	adds	r3, #1
 800327c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800327e:	e002      	b.n	8003286 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	3b01      	subs	r3, #1
 8003284:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003286:	4b38      	ldr	r3, [pc, #224]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003292:	d102      	bne.n	800329a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1f2      	bne.n	8003280 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800329a:	4b33      	ldr	r3, [pc, #204]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329c:	695b      	ldr	r3, [r3, #20]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032a6:	d158      	bne.n	800335a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e057      	b.n	800335c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032ac:	4b2e      	ldr	r3, [pc, #184]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032b2:	4a2d      	ldr	r2, [pc, #180]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032b8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032bc:	e04d      	b.n	800335a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032c4:	d141      	bne.n	800334a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032c6:	4b28      	ldr	r3, [pc, #160]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032d2:	d131      	bne.n	8003338 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032d4:	4b24      	ldr	r3, [pc, #144]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032da:	4a23      	ldr	r2, [pc, #140]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032e0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032e4:	4b20      	ldr	r3, [pc, #128]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032ec:	4a1e      	ldr	r2, [pc, #120]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032ee:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032f2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032f4:	4b1d      	ldr	r3, [pc, #116]	; (800336c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2232      	movs	r2, #50	; 0x32
 80032fa:	fb02 f303 	mul.w	r3, r2, r3
 80032fe:	4a1c      	ldr	r2, [pc, #112]	; (8003370 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003300:	fba2 2303 	umull	r2, r3, r2, r3
 8003304:	0c9b      	lsrs	r3, r3, #18
 8003306:	3301      	adds	r3, #1
 8003308:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800330a:	e002      	b.n	8003312 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	3b01      	subs	r3, #1
 8003310:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003312:	4b15      	ldr	r3, [pc, #84]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331e:	d102      	bne.n	8003326 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1f2      	bne.n	800330c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003326:	4b10      	ldr	r3, [pc, #64]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003328:	695b      	ldr	r3, [r3, #20]
 800332a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800332e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003332:	d112      	bne.n	800335a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003334:	2303      	movs	r3, #3
 8003336:	e011      	b.n	800335c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003338:	4b0b      	ldr	r3, [pc, #44]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800333a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800333e:	4a0a      	ldr	r2, [pc, #40]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003344:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003348:	e007      	b.n	800335a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800334a:	4b07      	ldr	r3, [pc, #28]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003352:	4a05      	ldr	r2, [pc, #20]	; (8003368 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003354:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003358:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800335a:	2300      	movs	r3, #0
}
 800335c:	4618      	mov	r0, r3
 800335e:	3714      	adds	r7, #20
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr
 8003368:	40007000 	.word	0x40007000
 800336c:	20000048 	.word	0x20000048
 8003370:	431bde83 	.word	0x431bde83

08003374 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b088      	sub	sp, #32
 8003378:	af00      	add	r7, sp, #0
 800337a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e306      	b.n	8003994 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0301 	and.w	r3, r3, #1
 800338e:	2b00      	cmp	r3, #0
 8003390:	d075      	beq.n	800347e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003392:	4b97      	ldr	r3, [pc, #604]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003394:	689b      	ldr	r3, [r3, #8]
 8003396:	f003 030c 	and.w	r3, r3, #12
 800339a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800339c:	4b94      	ldr	r3, [pc, #592]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 800339e:	68db      	ldr	r3, [r3, #12]
 80033a0:	f003 0303 	and.w	r3, r3, #3
 80033a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033a6:	69bb      	ldr	r3, [r7, #24]
 80033a8:	2b0c      	cmp	r3, #12
 80033aa:	d102      	bne.n	80033b2 <HAL_RCC_OscConfig+0x3e>
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	2b03      	cmp	r3, #3
 80033b0:	d002      	beq.n	80033b8 <HAL_RCC_OscConfig+0x44>
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b08      	cmp	r3, #8
 80033b6:	d10b      	bne.n	80033d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033b8:	4b8d      	ldr	r3, [pc, #564]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d05b      	beq.n	800347c <HAL_RCC_OscConfig+0x108>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d157      	bne.n	800347c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033cc:	2301      	movs	r3, #1
 80033ce:	e2e1      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d106      	bne.n	80033e8 <HAL_RCC_OscConfig+0x74>
 80033da:	4b85      	ldr	r3, [pc, #532]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a84      	ldr	r2, [pc, #528]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80033e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033e4:	6013      	str	r3, [r2, #0]
 80033e6:	e01d      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033f0:	d10c      	bne.n	800340c <HAL_RCC_OscConfig+0x98>
 80033f2:	4b7f      	ldr	r3, [pc, #508]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a7e      	ldr	r2, [pc, #504]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80033f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033fc:	6013      	str	r3, [r2, #0]
 80033fe:	4b7c      	ldr	r3, [pc, #496]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7b      	ldr	r2, [pc, #492]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003404:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	e00b      	b.n	8003424 <HAL_RCC_OscConfig+0xb0>
 800340c:	4b78      	ldr	r3, [pc, #480]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a77      	ldr	r2, [pc, #476]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003416:	6013      	str	r3, [r2, #0]
 8003418:	4b75      	ldr	r3, [pc, #468]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a74      	ldr	r2, [pc, #464]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 800341e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003422:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	685b      	ldr	r3, [r3, #4]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d013      	beq.n	8003454 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800342c:	f7fd fed8 	bl	80011e0 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003434:	f7fd fed4 	bl	80011e0 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b64      	cmp	r3, #100	; 0x64
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e2a6      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003446:	4b6a      	ldr	r3, [pc, #424]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0xc0>
 8003452:	e014      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fd fec4 	bl	80011e0 <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800345c:	f7fd fec0 	bl	80011e0 <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b64      	cmp	r3, #100	; 0x64
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e292      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800346e:	4b60      	ldr	r3, [pc, #384]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0xe8>
 800347a:	e000      	b.n	800347e <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800347c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	f003 0302 	and.w	r3, r3, #2
 8003486:	2b00      	cmp	r3, #0
 8003488:	d075      	beq.n	8003576 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800348a:	4b59      	ldr	r3, [pc, #356]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f003 030c 	and.w	r3, r3, #12
 8003492:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003494:	4b56      	ldr	r3, [pc, #344]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003496:	68db      	ldr	r3, [r3, #12]
 8003498:	f003 0303 	and.w	r3, r3, #3
 800349c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	2b0c      	cmp	r3, #12
 80034a2:	d102      	bne.n	80034aa <HAL_RCC_OscConfig+0x136>
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d002      	beq.n	80034b0 <HAL_RCC_OscConfig+0x13c>
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b04      	cmp	r3, #4
 80034ae:	d11f      	bne.n	80034f0 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034b0:	4b4f      	ldr	r3, [pc, #316]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d005      	beq.n	80034c8 <HAL_RCC_OscConfig+0x154>
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	68db      	ldr	r3, [r3, #12]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d101      	bne.n	80034c8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034c4:	2301      	movs	r3, #1
 80034c6:	e265      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b49      	ldr	r3, [pc, #292]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80034ca:	685b      	ldr	r3, [r3, #4]
 80034cc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	691b      	ldr	r3, [r3, #16]
 80034d4:	061b      	lsls	r3, r3, #24
 80034d6:	4946      	ldr	r1, [pc, #280]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80034d8:	4313      	orrs	r3, r2
 80034da:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034dc:	4b45      	ldr	r3, [pc, #276]	; (80035f4 <HAL_RCC_OscConfig+0x280>)
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd fe31 	bl	8001148 <HAL_InitTick>
 80034e6:	4603      	mov	r3, r0
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d043      	beq.n	8003574 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034ec:	2301      	movs	r3, #1
 80034ee:	e251      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d023      	beq.n	8003540 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034f8:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a3c      	ldr	r2, [pc, #240]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80034fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003502:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003504:	f7fd fe6c 	bl	80011e0 <HAL_GetTick>
 8003508:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800350a:	e008      	b.n	800351e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800350c:	f7fd fe68 	bl	80011e0 <HAL_GetTick>
 8003510:	4602      	mov	r2, r0
 8003512:	693b      	ldr	r3, [r7, #16]
 8003514:	1ad3      	subs	r3, r2, r3
 8003516:	2b02      	cmp	r3, #2
 8003518:	d901      	bls.n	800351e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e23a      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800351e:	4b34      	ldr	r3, [pc, #208]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003526:	2b00      	cmp	r3, #0
 8003528:	d0f0      	beq.n	800350c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800352a:	4b31      	ldr	r3, [pc, #196]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	061b      	lsls	r3, r3, #24
 8003538:	492d      	ldr	r1, [pc, #180]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 800353a:	4313      	orrs	r3, r2
 800353c:	604b      	str	r3, [r1, #4]
 800353e:	e01a      	b.n	8003576 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003540:	4b2b      	ldr	r3, [pc, #172]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	4a2a      	ldr	r2, [pc, #168]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003546:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800354a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800354c:	f7fd fe48 	bl	80011e0 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003554:	f7fd fe44 	bl	80011e0 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e216      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003566:	4b22      	ldr	r3, [pc, #136]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800356e:	2b00      	cmp	r3, #0
 8003570:	d1f0      	bne.n	8003554 <HAL_RCC_OscConfig+0x1e0>
 8003572:	e000      	b.n	8003576 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003574:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0308 	and.w	r3, r3, #8
 800357e:	2b00      	cmp	r3, #0
 8003580:	d041      	beq.n	8003606 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d01c      	beq.n	80035c4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800358a:	4b19      	ldr	r3, [pc, #100]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 800358c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003590:	4a17      	ldr	r2, [pc, #92]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 8003592:	f043 0301 	orr.w	r3, r3, #1
 8003596:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800359a:	f7fd fe21 	bl	80011e0 <HAL_GetTick>
 800359e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035a0:	e008      	b.n	80035b4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035a2:	f7fd fe1d 	bl	80011e0 <HAL_GetTick>
 80035a6:	4602      	mov	r2, r0
 80035a8:	693b      	ldr	r3, [r7, #16]
 80035aa:	1ad3      	subs	r3, r2, r3
 80035ac:	2b02      	cmp	r3, #2
 80035ae:	d901      	bls.n	80035b4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e1ef      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035b4:	4b0e      	ldr	r3, [pc, #56]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80035b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d0ef      	beq.n	80035a2 <HAL_RCC_OscConfig+0x22e>
 80035c2:	e020      	b.n	8003606 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80035c6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035ca:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <HAL_RCC_OscConfig+0x27c>)
 80035cc:	f023 0301 	bic.w	r3, r3, #1
 80035d0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035d4:	f7fd fe04 	bl	80011e0 <HAL_GetTick>
 80035d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035da:	e00d      	b.n	80035f8 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035dc:	f7fd fe00 	bl	80011e0 <HAL_GetTick>
 80035e0:	4602      	mov	r2, r0
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	1ad3      	subs	r3, r2, r3
 80035e6:	2b02      	cmp	r3, #2
 80035e8:	d906      	bls.n	80035f8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e1d2      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
 80035ee:	bf00      	nop
 80035f0:	40021000 	.word	0x40021000
 80035f4:	2000004c 	.word	0x2000004c
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035f8:	4b8c      	ldr	r3, [pc, #560]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80035fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d1ea      	bne.n	80035dc <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	f000 80a6 	beq.w	8003760 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003614:	2300      	movs	r3, #0
 8003616:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003618:	4b84      	ldr	r3, [pc, #528]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 800361a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800361c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003620:	2b00      	cmp	r3, #0
 8003622:	d101      	bne.n	8003628 <HAL_RCC_OscConfig+0x2b4>
 8003624:	2301      	movs	r3, #1
 8003626:	e000      	b.n	800362a <HAL_RCC_OscConfig+0x2b6>
 8003628:	2300      	movs	r3, #0
 800362a:	2b00      	cmp	r3, #0
 800362c:	d00d      	beq.n	800364a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	4b7f      	ldr	r3, [pc, #508]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 8003630:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003632:	4a7e      	ldr	r2, [pc, #504]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003638:	6593      	str	r3, [r2, #88]	; 0x58
 800363a:	4b7c      	ldr	r3, [pc, #496]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	60fb      	str	r3, [r7, #12]
 8003644:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003646:	2301      	movs	r3, #1
 8003648:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800364a:	4b79      	ldr	r3, [pc, #484]	; (8003830 <HAL_RCC_OscConfig+0x4bc>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d118      	bne.n	8003688 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003656:	4b76      	ldr	r3, [pc, #472]	; (8003830 <HAL_RCC_OscConfig+0x4bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a75      	ldr	r2, [pc, #468]	; (8003830 <HAL_RCC_OscConfig+0x4bc>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003662:	f7fd fdbd 	bl	80011e0 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366a:	f7fd fdb9 	bl	80011e0 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e18b      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800367c:	4b6c      	ldr	r3, [pc, #432]	; (8003830 <HAL_RCC_OscConfig+0x4bc>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d108      	bne.n	80036a2 <HAL_RCC_OscConfig+0x32e>
 8003690:	4b66      	ldr	r3, [pc, #408]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 8003692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003696:	4a65      	ldr	r2, [pc, #404]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036a0:	e024      	b.n	80036ec <HAL_RCC_OscConfig+0x378>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	689b      	ldr	r3, [r3, #8]
 80036a6:	2b05      	cmp	r3, #5
 80036a8:	d110      	bne.n	80036cc <HAL_RCC_OscConfig+0x358>
 80036aa:	4b60      	ldr	r3, [pc, #384]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80036ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036b0:	4a5e      	ldr	r2, [pc, #376]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80036b2:	f043 0304 	orr.w	r3, r3, #4
 80036b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ba:	4b5c      	ldr	r3, [pc, #368]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036c0:	4a5a      	ldr	r2, [pc, #360]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80036c2:	f043 0301 	orr.w	r3, r3, #1
 80036c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ca:	e00f      	b.n	80036ec <HAL_RCC_OscConfig+0x378>
 80036cc:	4b57      	ldr	r3, [pc, #348]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036d2:	4a56      	ldr	r2, [pc, #344]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036dc:	4b53      	ldr	r3, [pc, #332]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80036de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036e2:	4a52      	ldr	r2, [pc, #328]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80036e4:	f023 0304 	bic.w	r3, r3, #4
 80036e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d016      	beq.n	8003722 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f4:	f7fd fd74 	bl	80011e0 <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80036fa:	e00a      	b.n	8003712 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036fc:	f7fd fd70 	bl	80011e0 <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	f241 3288 	movw	r2, #5000	; 0x1388
 800370a:	4293      	cmp	r3, r2
 800370c:	d901      	bls.n	8003712 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800370e:	2303      	movs	r3, #3
 8003710:	e140      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003712:	4b46      	ldr	r3, [pc, #280]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 8003714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003718:	f003 0302 	and.w	r3, r3, #2
 800371c:	2b00      	cmp	r3, #0
 800371e:	d0ed      	beq.n	80036fc <HAL_RCC_OscConfig+0x388>
 8003720:	e015      	b.n	800374e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003722:	f7fd fd5d 	bl	80011e0 <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003728:	e00a      	b.n	8003740 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800372a:	f7fd fd59 	bl	80011e0 <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f241 3288 	movw	r2, #5000	; 0x1388
 8003738:	4293      	cmp	r3, r2
 800373a:	d901      	bls.n	8003740 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e129      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003740:	4b3a      	ldr	r3, [pc, #232]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 8003742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003746:	f003 0302 	and.w	r3, r3, #2
 800374a:	2b00      	cmp	r3, #0
 800374c:	d1ed      	bne.n	800372a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800374e:	7ffb      	ldrb	r3, [r7, #31]
 8003750:	2b01      	cmp	r3, #1
 8003752:	d105      	bne.n	8003760 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003754:	4b35      	ldr	r3, [pc, #212]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 8003756:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003758:	4a34      	ldr	r2, [pc, #208]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 800375a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800375e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0320 	and.w	r3, r3, #32
 8003768:	2b00      	cmp	r3, #0
 800376a:	d03c      	beq.n	80037e6 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d01c      	beq.n	80037ae <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003774:	4b2d      	ldr	r3, [pc, #180]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 8003776:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800377a:	4a2c      	ldr	r2, [pc, #176]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 800377c:	f043 0301 	orr.w	r3, r3, #1
 8003780:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fd fd2c 	bl	80011e0 <HAL_GetTick>
 8003788:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800378a:	e008      	b.n	800379e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800378c:	f7fd fd28 	bl	80011e0 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d901      	bls.n	800379e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	e0fa      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800379e:	4b23      	ldr	r3, [pc, #140]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80037a0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037a4:	f003 0302 	and.w	r3, r3, #2
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <HAL_RCC_OscConfig+0x418>
 80037ac:	e01b      	b.n	80037e6 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ae:	4b1f      	ldr	r3, [pc, #124]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80037b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b4:	4a1d      	ldr	r2, [pc, #116]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037be:	f7fd fd0f 	bl	80011e0 <HAL_GetTick>
 80037c2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037c4:	e008      	b.n	80037d8 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037c6:	f7fd fd0b 	bl	80011e0 <HAL_GetTick>
 80037ca:	4602      	mov	r2, r0
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	1ad3      	subs	r3, r2, r3
 80037d0:	2b02      	cmp	r3, #2
 80037d2:	d901      	bls.n	80037d8 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037d4:	2303      	movs	r3, #3
 80037d6:	e0dd      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d8:	4b14      	ldr	r3, [pc, #80]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80037da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037de:	f003 0302 	and.w	r3, r3, #2
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1ef      	bne.n	80037c6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	69db      	ldr	r3, [r3, #28]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 80d1 	beq.w	8003992 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037f0:	4b0e      	ldr	r3, [pc, #56]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	f003 030c 	and.w	r3, r3, #12
 80037f8:	2b0c      	cmp	r3, #12
 80037fa:	f000 808b 	beq.w	8003914 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	69db      	ldr	r3, [r3, #28]
 8003802:	2b02      	cmp	r3, #2
 8003804:	d15e      	bne.n	80038c4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003806:	4b09      	ldr	r3, [pc, #36]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	4a08      	ldr	r2, [pc, #32]	; (800382c <HAL_RCC_OscConfig+0x4b8>)
 800380c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003810:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003812:	f7fd fce5 	bl	80011e0 <HAL_GetTick>
 8003816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003818:	e00c      	b.n	8003834 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800381a:	f7fd fce1 	bl	80011e0 <HAL_GetTick>
 800381e:	4602      	mov	r2, r0
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	1ad3      	subs	r3, r2, r3
 8003824:	2b02      	cmp	r3, #2
 8003826:	d905      	bls.n	8003834 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003828:	2303      	movs	r3, #3
 800382a:	e0b3      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
 800382c:	40021000 	.word	0x40021000
 8003830:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003834:	4b59      	ldr	r3, [pc, #356]	; (800399c <HAL_RCC_OscConfig+0x628>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d1ec      	bne.n	800381a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003840:	4b56      	ldr	r3, [pc, #344]	; (800399c <HAL_RCC_OscConfig+0x628>)
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	4b56      	ldr	r3, [pc, #344]	; (80039a0 <HAL_RCC_OscConfig+0x62c>)
 8003846:	4013      	ands	r3, r2
 8003848:	687a      	ldr	r2, [r7, #4]
 800384a:	6a11      	ldr	r1, [r2, #32]
 800384c:	687a      	ldr	r2, [r7, #4]
 800384e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003850:	3a01      	subs	r2, #1
 8003852:	0112      	lsls	r2, r2, #4
 8003854:	4311      	orrs	r1, r2
 8003856:	687a      	ldr	r2, [r7, #4]
 8003858:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800385a:	0212      	lsls	r2, r2, #8
 800385c:	4311      	orrs	r1, r2
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003862:	0852      	lsrs	r2, r2, #1
 8003864:	3a01      	subs	r2, #1
 8003866:	0552      	lsls	r2, r2, #21
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800386e:	0852      	lsrs	r2, r2, #1
 8003870:	3a01      	subs	r2, #1
 8003872:	0652      	lsls	r2, r2, #25
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800387a:	06d2      	lsls	r2, r2, #27
 800387c:	430a      	orrs	r2, r1
 800387e:	4947      	ldr	r1, [pc, #284]	; (800399c <HAL_RCC_OscConfig+0x628>)
 8003880:	4313      	orrs	r3, r2
 8003882:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003884:	4b45      	ldr	r3, [pc, #276]	; (800399c <HAL_RCC_OscConfig+0x628>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a44      	ldr	r2, [pc, #272]	; (800399c <HAL_RCC_OscConfig+0x628>)
 800388a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800388e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003890:	4b42      	ldr	r3, [pc, #264]	; (800399c <HAL_RCC_OscConfig+0x628>)
 8003892:	68db      	ldr	r3, [r3, #12]
 8003894:	4a41      	ldr	r2, [pc, #260]	; (800399c <HAL_RCC_OscConfig+0x628>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800389c:	f7fd fca0 	bl	80011e0 <HAL_GetTick>
 80038a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038a2:	e008      	b.n	80038b6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038a4:	f7fd fc9c 	bl	80011e0 <HAL_GetTick>
 80038a8:	4602      	mov	r2, r0
 80038aa:	693b      	ldr	r3, [r7, #16]
 80038ac:	1ad3      	subs	r3, r2, r3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e06e      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038b6:	4b39      	ldr	r3, [pc, #228]	; (800399c <HAL_RCC_OscConfig+0x628>)
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d0f0      	beq.n	80038a4 <HAL_RCC_OscConfig+0x530>
 80038c2:	e066      	b.n	8003992 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038c4:	4b35      	ldr	r3, [pc, #212]	; (800399c <HAL_RCC_OscConfig+0x628>)
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	4a34      	ldr	r2, [pc, #208]	; (800399c <HAL_RCC_OscConfig+0x628>)
 80038ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038ce:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038d0:	4b32      	ldr	r3, [pc, #200]	; (800399c <HAL_RCC_OscConfig+0x628>)
 80038d2:	68db      	ldr	r3, [r3, #12]
 80038d4:	4a31      	ldr	r2, [pc, #196]	; (800399c <HAL_RCC_OscConfig+0x628>)
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038dc:	4b2f      	ldr	r3, [pc, #188]	; (800399c <HAL_RCC_OscConfig+0x628>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a2e      	ldr	r2, [pc, #184]	; (800399c <HAL_RCC_OscConfig+0x628>)
 80038e2:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038ec:	f7fd fc78 	bl	80011e0 <HAL_GetTick>
 80038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038f2:	e008      	b.n	8003906 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038f4:	f7fd fc74 	bl	80011e0 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d901      	bls.n	8003906 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8003902:	2303      	movs	r3, #3
 8003904:	e046      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003906:	4b25      	ldr	r3, [pc, #148]	; (800399c <HAL_RCC_OscConfig+0x628>)
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800390e:	2b00      	cmp	r3, #0
 8003910:	d1f0      	bne.n	80038f4 <HAL_RCC_OscConfig+0x580>
 8003912:	e03e      	b.n	8003992 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	69db      	ldr	r3, [r3, #28]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d101      	bne.n	8003920 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e039      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8003920:	4b1e      	ldr	r3, [pc, #120]	; (800399c <HAL_RCC_OscConfig+0x628>)
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003926:	697b      	ldr	r3, [r7, #20]
 8003928:	f003 0203 	and.w	r2, r3, #3
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6a1b      	ldr	r3, [r3, #32]
 8003930:	429a      	cmp	r2, r3
 8003932:	d12c      	bne.n	800398e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800393e:	3b01      	subs	r3, #1
 8003940:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003942:	429a      	cmp	r2, r3
 8003944:	d123      	bne.n	800398e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003946:	697b      	ldr	r3, [r7, #20]
 8003948:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003950:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003952:	429a      	cmp	r2, r3
 8003954:	d11b      	bne.n	800398e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003960:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003962:	429a      	cmp	r2, r3
 8003964:	d113      	bne.n	800398e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003970:	085b      	lsrs	r3, r3, #1
 8003972:	3b01      	subs	r3, #1
 8003974:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003976:	429a      	cmp	r2, r3
 8003978:	d109      	bne.n	800398e <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003984:	085b      	lsrs	r3, r3, #1
 8003986:	3b01      	subs	r3, #1
 8003988:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800398a:	429a      	cmp	r2, r3
 800398c:	d001      	beq.n	8003992 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 8003992:	2300      	movs	r3, #0
}
 8003994:	4618      	mov	r0, r3
 8003996:	3720      	adds	r7, #32
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	40021000 	.word	0x40021000
 80039a0:	019f800c 	.word	0x019f800c

080039a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b086      	sub	sp, #24
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d101      	bne.n	80039bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e11e      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039bc:	4b91      	ldr	r3, [pc, #580]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d910      	bls.n	80039ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039ca:	4b8e      	ldr	r3, [pc, #568]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f023 020f 	bic.w	r2, r3, #15
 80039d2:	498c      	ldr	r1, [pc, #560]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	4313      	orrs	r3, r2
 80039d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039da:	4b8a      	ldr	r3, [pc, #552]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	683a      	ldr	r2, [r7, #0]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	d001      	beq.n	80039ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	e106      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d073      	beq.n	8003ae0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d129      	bne.n	8003a54 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a00:	4b81      	ldr	r3, [pc, #516]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e0f4      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a10:	f000 f966 	bl	8003ce0 <RCC_GetSysClockFreqFromPLLSource>
 8003a14:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a16:	693b      	ldr	r3, [r7, #16]
 8003a18:	4a7c      	ldr	r2, [pc, #496]	; (8003c0c <HAL_RCC_ClockConfig+0x268>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d93f      	bls.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a1e:	4b7a      	ldr	r3, [pc, #488]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d009      	beq.n	8003a3e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d033      	beq.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d12f      	bne.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a3e:	4b72      	ldr	r3, [pc, #456]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a40:	689b      	ldr	r3, [r3, #8]
 8003a42:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a46:	4a70      	ldr	r2, [pc, #448]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a4c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a4e:	2380      	movs	r3, #128	; 0x80
 8003a50:	617b      	str	r3, [r7, #20]
 8003a52:	e024      	b.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	2b02      	cmp	r3, #2
 8003a5a:	d107      	bne.n	8003a6c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5c:	4b6a      	ldr	r3, [pc, #424]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d109      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	e0c6      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a6c:	4b66      	ldr	r3, [pc, #408]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d101      	bne.n	8003a7c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e0be      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a7c:	f000 f8ce 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003a80:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	4a61      	ldr	r2, [pc, #388]	; (8003c0c <HAL_RCC_ClockConfig+0x268>)
 8003a86:	4293      	cmp	r3, r2
 8003a88:	d909      	bls.n	8003a9e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a8a:	4b5f      	ldr	r3, [pc, #380]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a92:	4a5d      	ldr	r2, [pc, #372]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003a94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a98:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003a9a:	2380      	movs	r3, #128	; 0x80
 8003a9c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003a9e:	4b5a      	ldr	r3, [pc, #360]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	689b      	ldr	r3, [r3, #8]
 8003aa2:	f023 0203 	bic.w	r2, r3, #3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	4957      	ldr	r1, [pc, #348]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003aac:	4313      	orrs	r3, r2
 8003aae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003ab0:	f7fd fb96 	bl	80011e0 <HAL_GetTick>
 8003ab4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ab6:	e00a      	b.n	8003ace <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ab8:	f7fd fb92 	bl	80011e0 <HAL_GetTick>
 8003abc:	4602      	mov	r2, r0
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	1ad3      	subs	r3, r2, r3
 8003ac2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e095      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ace:	4b4e      	ldr	r3, [pc, #312]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	f003 020c 	and.w	r2, r3, #12
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d1eb      	bne.n	8003ab8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d023      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d005      	beq.n	8003b04 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003af8:	4b43      	ldr	r3, [pc, #268]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	4a42      	ldr	r2, [pc, #264]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003afe:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b02:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0308 	and.w	r3, r3, #8
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d007      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b10:	4b3d      	ldr	r3, [pc, #244]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b18:	4a3b      	ldr	r2, [pc, #236]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b1a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b20:	4b39      	ldr	r3, [pc, #228]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	4936      	ldr	r1, [pc, #216]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	608b      	str	r3, [r1, #8]
 8003b32:	e008      	b.n	8003b46 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	2b80      	cmp	r3, #128	; 0x80
 8003b38:	d105      	bne.n	8003b46 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b3a:	4b33      	ldr	r3, [pc, #204]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b3c:	689b      	ldr	r3, [r3, #8]
 8003b3e:	4a32      	ldr	r2, [pc, #200]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b44:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b46:	4b2f      	ldr	r3, [pc, #188]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 030f 	and.w	r3, r3, #15
 8003b4e:	683a      	ldr	r2, [r7, #0]
 8003b50:	429a      	cmp	r2, r3
 8003b52:	d21d      	bcs.n	8003b90 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b54:	4b2b      	ldr	r3, [pc, #172]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f023 020f 	bic.w	r2, r3, #15
 8003b5c:	4929      	ldr	r1, [pc, #164]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	4313      	orrs	r3, r2
 8003b62:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b64:	f7fd fb3c 	bl	80011e0 <HAL_GetTick>
 8003b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b6a:	e00a      	b.n	8003b82 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b6c:	f7fd fb38 	bl	80011e0 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d901      	bls.n	8003b82 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b7e:	2303      	movs	r3, #3
 8003b80:	e03b      	b.n	8003bfa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b82:	4b20      	ldr	r3, [pc, #128]	; (8003c04 <HAL_RCC_ClockConfig+0x260>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f003 030f 	and.w	r3, r3, #15
 8003b8a:	683a      	ldr	r2, [r7, #0]
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d1ed      	bne.n	8003b6c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 0304 	and.w	r3, r3, #4
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d008      	beq.n	8003bae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b9c:	4b1a      	ldr	r3, [pc, #104]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003b9e:	689b      	ldr	r3, [r3, #8]
 8003ba0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	4917      	ldr	r1, [pc, #92]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003baa:	4313      	orrs	r3, r2
 8003bac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f003 0308 	and.w	r3, r3, #8
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d009      	beq.n	8003bce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bba:	4b13      	ldr	r3, [pc, #76]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	691b      	ldr	r3, [r3, #16]
 8003bc6:	00db      	lsls	r3, r3, #3
 8003bc8:	490f      	ldr	r1, [pc, #60]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bce:	f000 f825 	bl	8003c1c <HAL_RCC_GetSysClockFreq>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	4b0c      	ldr	r3, [pc, #48]	; (8003c08 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	091b      	lsrs	r3, r3, #4
 8003bda:	f003 030f 	and.w	r3, r3, #15
 8003bde:	490c      	ldr	r1, [pc, #48]	; (8003c10 <HAL_RCC_ClockConfig+0x26c>)
 8003be0:	5ccb      	ldrb	r3, [r1, r3]
 8003be2:	f003 031f 	and.w	r3, r3, #31
 8003be6:	fa22 f303 	lsr.w	r3, r2, r3
 8003bea:	4a0a      	ldr	r2, [pc, #40]	; (8003c14 <HAL_RCC_ClockConfig+0x270>)
 8003bec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bee:	4b0a      	ldr	r3, [pc, #40]	; (8003c18 <HAL_RCC_ClockConfig+0x274>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	f7fd faa8 	bl	8001148 <HAL_InitTick>
 8003bf8:	4603      	mov	r3, r0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	3718      	adds	r7, #24
 8003bfe:	46bd      	mov	sp, r7
 8003c00:	bd80      	pop	{r7, pc}
 8003c02:	bf00      	nop
 8003c04:	40022000 	.word	0x40022000
 8003c08:	40021000 	.word	0x40021000
 8003c0c:	04c4b400 	.word	0x04c4b400
 8003c10:	0800a3d8 	.word	0x0800a3d8
 8003c14:	20000048 	.word	0x20000048
 8003c18:	2000004c 	.word	0x2000004c

08003c1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c1c:	b480      	push	{r7}
 8003c1e:	b087      	sub	sp, #28
 8003c20:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c22:	4b2c      	ldr	r3, [pc, #176]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	f003 030c 	and.w	r3, r3, #12
 8003c2a:	2b04      	cmp	r3, #4
 8003c2c:	d102      	bne.n	8003c34 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c2e:	4b2a      	ldr	r3, [pc, #168]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c30:	613b      	str	r3, [r7, #16]
 8003c32:	e047      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c34:	4b27      	ldr	r3, [pc, #156]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c36:	689b      	ldr	r3, [r3, #8]
 8003c38:	f003 030c 	and.w	r3, r3, #12
 8003c3c:	2b08      	cmp	r3, #8
 8003c3e:	d102      	bne.n	8003c46 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c40:	4b26      	ldr	r3, [pc, #152]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c42:	613b      	str	r3, [r7, #16]
 8003c44:	e03e      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c46:	4b23      	ldr	r3, [pc, #140]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f003 030c 	and.w	r3, r3, #12
 8003c4e:	2b0c      	cmp	r3, #12
 8003c50:	d136      	bne.n	8003cc0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c52:	4b20      	ldr	r3, [pc, #128]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	f003 0303 	and.w	r3, r3, #3
 8003c5a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c5c:	4b1d      	ldr	r3, [pc, #116]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c5e:	68db      	ldr	r3, [r3, #12]
 8003c60:	091b      	lsrs	r3, r3, #4
 8003c62:	f003 030f 	and.w	r3, r3, #15
 8003c66:	3301      	adds	r3, #1
 8003c68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d10c      	bne.n	8003c8a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c70:	4a1a      	ldr	r2, [pc, #104]	; (8003cdc <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c78:	4a16      	ldr	r2, [pc, #88]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c7a:	68d2      	ldr	r2, [r2, #12]
 8003c7c:	0a12      	lsrs	r2, r2, #8
 8003c7e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c82:	fb02 f303 	mul.w	r3, r2, r3
 8003c86:	617b      	str	r3, [r7, #20]
      break;
 8003c88:	e00c      	b.n	8003ca4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c8a:	4a13      	ldr	r2, [pc, #76]	; (8003cd8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c92:	4a10      	ldr	r2, [pc, #64]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c94:	68d2      	ldr	r2, [r2, #12]
 8003c96:	0a12      	lsrs	r2, r2, #8
 8003c98:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c9c:	fb02 f303 	mul.w	r3, r2, r3
 8003ca0:	617b      	str	r3, [r7, #20]
      break;
 8003ca2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003ca4:	4b0b      	ldr	r3, [pc, #44]	; (8003cd4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	0e5b      	lsrs	r3, r3, #25
 8003caa:	f003 0303 	and.w	r3, r3, #3
 8003cae:	3301      	adds	r3, #1
 8003cb0:	005b      	lsls	r3, r3, #1
 8003cb2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cbc:	613b      	str	r3, [r7, #16]
 8003cbe:	e001      	b.n	8003cc4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cc4:	693b      	ldr	r3, [r7, #16]
}
 8003cc6:	4618      	mov	r0, r3
 8003cc8:	371c      	adds	r7, #28
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40021000 	.word	0x40021000
 8003cd8:	00f42400 	.word	0x00f42400
 8003cdc:	007a1200 	.word	0x007a1200

08003ce0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b087      	sub	sp, #28
 8003ce4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	f003 0303 	and.w	r3, r3, #3
 8003cee:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003cf0:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003cf2:	68db      	ldr	r3, [r3, #12]
 8003cf4:	091b      	lsrs	r3, r3, #4
 8003cf6:	f003 030f 	and.w	r3, r3, #15
 8003cfa:	3301      	adds	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	2b03      	cmp	r3, #3
 8003d02:	d10c      	bne.n	8003d1e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d04:	4a17      	ldr	r2, [pc, #92]	; (8003d64 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d0c:	4a14      	ldr	r2, [pc, #80]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d0e:	68d2      	ldr	r2, [r2, #12]
 8003d10:	0a12      	lsrs	r2, r2, #8
 8003d12:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d16:	fb02 f303 	mul.w	r3, r2, r3
 8003d1a:	617b      	str	r3, [r7, #20]
    break;
 8003d1c:	e00c      	b.n	8003d38 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003d1e:	4a12      	ldr	r2, [pc, #72]	; (8003d68 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d26:	4a0e      	ldr	r2, [pc, #56]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d28:	68d2      	ldr	r2, [r2, #12]
 8003d2a:	0a12      	lsrs	r2, r2, #8
 8003d2c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003d30:	fb02 f303 	mul.w	r3, r2, r3
 8003d34:	617b      	str	r3, [r7, #20]
    break;
 8003d36:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003d38:	4b09      	ldr	r3, [pc, #36]	; (8003d60 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	0e5b      	lsrs	r3, r3, #25
 8003d3e:	f003 0303 	and.w	r3, r3, #3
 8003d42:	3301      	adds	r3, #1
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d50:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003d52:	687b      	ldr	r3, [r7, #4]
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	371c      	adds	r7, #28
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40021000 	.word	0x40021000
 8003d64:	007a1200 	.word	0x007a1200
 8003d68:	00f42400 	.word	0x00f42400

08003d6c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003d74:	2300      	movs	r3, #0
 8003d76:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003d78:	2300      	movs	r3, #0
 8003d7a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 8098 	beq.w	8003eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8e:	4b43      	ldr	r3, [pc, #268]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10d      	bne.n	8003db6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d9a:	4b40      	ldr	r3, [pc, #256]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003d9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d9e:	4a3f      	ldr	r2, [pc, #252]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6593      	str	r3, [r2, #88]	; 0x58
 8003da6:	4b3d      	ldr	r3, [pc, #244]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003db6:	4b3a      	ldr	r3, [pc, #232]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	4a39      	ldr	r2, [pc, #228]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003dbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003dc2:	f7fd fa0d 	bl	80011e0 <HAL_GetTick>
 8003dc6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc8:	e009      	b.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dca:	f7fd fa09 	bl	80011e0 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b02      	cmp	r3, #2
 8003dd6:	d902      	bls.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	74fb      	strb	r3, [r7, #19]
        break;
 8003ddc:	e005      	b.n	8003dea <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dde:	4b30      	ldr	r3, [pc, #192]	; (8003ea0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d0ef      	beq.n	8003dca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003dea:	7cfb      	ldrb	r3, [r7, #19]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d159      	bne.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003df0:	4b2a      	ldr	r3, [pc, #168]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003df2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d01e      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	697a      	ldr	r2, [r7, #20]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d019      	beq.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003e0c:	4b23      	ldr	r3, [pc, #140]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e12:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003e18:	4b20      	ldr	r3, [pc, #128]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e1e:	4a1f      	ldr	r2, [pc, #124]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e20:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e28:	4b1c      	ldr	r3, [pc, #112]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e2e:	4a1b      	ldr	r2, [pc, #108]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003e38:	4a18      	ldr	r2, [pc, #96]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e3a:	697b      	ldr	r3, [r7, #20]
 8003e3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f003 0301 	and.w	r3, r3, #1
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d016      	beq.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e4a:	f7fd f9c9 	bl	80011e0 <HAL_GetTick>
 8003e4e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e50:	e00b      	b.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e52:	f7fd f9c5 	bl	80011e0 <HAL_GetTick>
 8003e56:	4602      	mov	r2, r0
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	1ad3      	subs	r3, r2, r3
 8003e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d902      	bls.n	8003e6a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003e64:	2303      	movs	r3, #3
 8003e66:	74fb      	strb	r3, [r7, #19]
            break;
 8003e68:	e006      	b.n	8003e78 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003e6a:	4b0c      	ldr	r3, [pc, #48]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e70:	f003 0302 	and.w	r3, r3, #2
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d0ec      	beq.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003e78:	7cfb      	ldrb	r3, [r7, #19]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d10b      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e7e:	4b07      	ldr	r3, [pc, #28]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e84:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e8c:	4903      	ldr	r1, [pc, #12]	; (8003e9c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003e94:	e008      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003e96:	7cfb      	ldrb	r3, [r7, #19]
 8003e98:	74bb      	strb	r3, [r7, #18]
 8003e9a:	e005      	b.n	8003ea8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003e9c:	40021000 	.word	0x40021000
 8003ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ea4:	7cfb      	ldrb	r3, [r7, #19]
 8003ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea8:	7c7b      	ldrb	r3, [r7, #17]
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d105      	bne.n	8003eba <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eae:	4ba6      	ldr	r3, [pc, #664]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb2:	4aa5      	ldr	r2, [pc, #660]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f003 0301 	and.w	r3, r3, #1
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d00a      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003ec6:	4ba0      	ldr	r3, [pc, #640]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ecc:	f023 0203 	bic.w	r2, r3, #3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	685b      	ldr	r3, [r3, #4]
 8003ed4:	499c      	ldr	r1, [pc, #624]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 0302 	and.w	r3, r3, #2
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003ee8:	4b97      	ldr	r3, [pc, #604]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eee:	f023 020c 	bic.w	r2, r3, #12
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	4994      	ldr	r1, [pc, #592]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f003 0304 	and.w	r3, r3, #4
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003f0a:	4b8f      	ldr	r3, [pc, #572]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f10:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	68db      	ldr	r3, [r3, #12]
 8003f18:	498b      	ldr	r1, [pc, #556]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 0308 	and.w	r3, r3, #8
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003f2c:	4b86      	ldr	r3, [pc, #536]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	4983      	ldr	r1, [pc, #524]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003f4e:	4b7e      	ldr	r3, [pc, #504]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	695b      	ldr	r3, [r3, #20]
 8003f5c:	497a      	ldr	r1, [pc, #488]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f70:	4b75      	ldr	r3, [pc, #468]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	699b      	ldr	r3, [r3, #24]
 8003f7e:	4972      	ldr	r1, [pc, #456]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f92:	4b6d      	ldr	r3, [pc, #436]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	69db      	ldr	r3, [r3, #28]
 8003fa0:	4969      	ldr	r1, [pc, #420]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fb4:	4b64      	ldr	r3, [pc, #400]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
 8003fc2:	4961      	ldr	r1, [pc, #388]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003fd6:	4b5c      	ldr	r3, [pc, #368]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fdc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe4:	4958      	ldr	r1, [pc, #352]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d015      	beq.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003ff8:	4b53      	ldr	r3, [pc, #332]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8003ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004006:	4950      	ldr	r1, [pc, #320]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004012:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004016:	d105      	bne.n	8004024 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004018:	4b4b      	ldr	r3, [pc, #300]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	4a4a      	ldr	r2, [pc, #296]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800401e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004022:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800402c:	2b00      	cmp	r3, #0
 800402e:	d015      	beq.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004030:	4b45      	ldr	r3, [pc, #276]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004036:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403e:	4942      	ldr	r1, [pc, #264]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004040:	4313      	orrs	r3, r2
 8004042:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800404a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800404e:	d105      	bne.n	800405c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004050:	4b3d      	ldr	r3, [pc, #244]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	4a3c      	ldr	r2, [pc, #240]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004056:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800405a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d015      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004068:	4b37      	ldr	r3, [pc, #220]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800406a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800406e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	4934      	ldr	r1, [pc, #208]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004078:	4313      	orrs	r3, r2
 800407a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004086:	d105      	bne.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004088:	4b2f      	ldr	r3, [pc, #188]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408a:	68db      	ldr	r3, [r3, #12]
 800408c:	4a2e      	ldr	r2, [pc, #184]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800408e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004092:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800409c:	2b00      	cmp	r3, #0
 800409e:	d015      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80040a0:	4b29      	ldr	r3, [pc, #164]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040a6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ae:	4926      	ldr	r1, [pc, #152]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040b0:	4313      	orrs	r3, r2
 80040b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80040ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040be:	d105      	bne.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040c0:	4b21      	ldr	r3, [pc, #132]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	4a20      	ldr	r2, [pc, #128]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80040ca:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d015      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80040d8:	4b1b      	ldr	r3, [pc, #108]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040de:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e6:	4918      	ldr	r1, [pc, #96]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040f2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040f6:	d105      	bne.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80040f8:	4b13      	ldr	r3, [pc, #76]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	4a12      	ldr	r2, [pc, #72]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80040fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004102:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800410c:	2b00      	cmp	r3, #0
 800410e:	d015      	beq.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004110:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004112:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004116:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800411e:	490a      	ldr	r1, [pc, #40]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004120:	4313      	orrs	r3, r2
 8004122:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800412e:	d105      	bne.n	800413c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004130:	4b05      	ldr	r3, [pc, #20]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004132:	68db      	ldr	r3, [r3, #12]
 8004134:	4a04      	ldr	r2, [pc, #16]	; (8004148 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004136:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800413a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800413c:	7cbb      	ldrb	r3, [r7, #18]
}
 800413e:	4618      	mov	r0, r3
 8004140:	3718      	adds	r7, #24
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	40021000 	.word	0x40021000

0800414c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b082      	sub	sp, #8
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2b00      	cmp	r3, #0
 8004158:	d101      	bne.n	800415e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800415a:	2301      	movs	r3, #1
 800415c:	e049      	b.n	80041f2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d106      	bne.n	8004178 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7fc feb0 	bl	8000ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2202      	movs	r2, #2
 800417c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681a      	ldr	r2, [r3, #0]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3304      	adds	r3, #4
 8004188:	4619      	mov	r1, r3
 800418a:	4610      	mov	r0, r2
 800418c:	f000 fee2 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	2201      	movs	r2, #1
 80041ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	2201      	movs	r2, #1
 80041b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2201      	movs	r2, #1
 80041bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2201      	movs	r2, #1
 80041c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2201      	movs	r2, #1
 80041cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2201      	movs	r2, #1
 80041d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	2201      	movs	r2, #1
 80041dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2201      	movs	r2, #1
 80041e4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2201      	movs	r2, #1
 80041ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041f0:	2300      	movs	r3, #0
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
	...

080041fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b085      	sub	sp, #20
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420a:	b2db      	uxtb	r3, r3
 800420c:	2b01      	cmp	r3, #1
 800420e:	d001      	beq.n	8004214 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	e04a      	b.n	80042aa <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2202      	movs	r2, #2
 8004218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f042 0201 	orr.w	r2, r2, #1
 800422a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a21      	ldr	r2, [pc, #132]	; (80042b8 <HAL_TIM_Base_Start_IT+0xbc>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800423e:	d013      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1d      	ldr	r2, [pc, #116]	; (80042bc <HAL_TIM_Base_Start_IT+0xc0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1c      	ldr	r2, [pc, #112]	; (80042c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a1a      	ldr	r2, [pc, #104]	; (80042c4 <HAL_TIM_Base_Start_IT+0xc8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIM_Base_Start_IT+0x6c>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a19      	ldr	r2, [pc, #100]	; (80042c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d115      	bne.n	8004294 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689a      	ldr	r2, [r3, #8]
 800426e:	4b17      	ldr	r3, [pc, #92]	; (80042cc <HAL_TIM_Base_Start_IT+0xd0>)
 8004270:	4013      	ands	r3, r2
 8004272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b06      	cmp	r3, #6
 8004278:	d015      	beq.n	80042a6 <HAL_TIM_Base_Start_IT+0xaa>
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004280:	d011      	beq.n	80042a6 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	681a      	ldr	r2, [r3, #0]
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f042 0201 	orr.w	r2, r2, #1
 8004290:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004292:	e008      	b.n	80042a6 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f042 0201 	orr.w	r2, r2, #1
 80042a2:	601a      	str	r2, [r3, #0]
 80042a4:	e000      	b.n	80042a8 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80042a6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80042a8:	2300      	movs	r3, #0
}
 80042aa:	4618      	mov	r0, r3
 80042ac:	3714      	adds	r7, #20
 80042ae:	46bd      	mov	sp, r7
 80042b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b4:	4770      	bx	lr
 80042b6:	bf00      	nop
 80042b8:	40012c00 	.word	0x40012c00
 80042bc:	40000400 	.word	0x40000400
 80042c0:	40000800 	.word	0x40000800
 80042c4:	40013400 	.word	0x40013400
 80042c8:	40014000 	.word	0x40014000
 80042cc:	00010007 	.word	0x00010007

080042d0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b082      	sub	sp, #8
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d101      	bne.n	80042e2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80042de:	2301      	movs	r3, #1
 80042e0:	e049      	b.n	8004376 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042e8:	b2db      	uxtb	r3, r3
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d106      	bne.n	80042fc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80042f6:	6878      	ldr	r0, [r7, #4]
 80042f8:	f7fc fdbc 	bl	8000e74 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2202      	movs	r2, #2
 8004300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	3304      	adds	r3, #4
 800430c:	4619      	mov	r1, r3
 800430e:	4610      	mov	r0, r2
 8004310:	f000 fe20 	bl	8004f54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2201      	movs	r2, #1
 8004318:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2201      	movs	r2, #1
 8004320:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004374:	2300      	movs	r3, #0
}
 8004376:	4618      	mov	r0, r3
 8004378:	3708      	adds	r7, #8
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}
	...

08004380 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
 8004388:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d109      	bne.n	80043a4 <HAL_TIM_PWM_Start+0x24>
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004396:	b2db      	uxtb	r3, r3
 8004398:	2b01      	cmp	r3, #1
 800439a:	bf14      	ite	ne
 800439c:	2301      	movne	r3, #1
 800439e:	2300      	moveq	r3, #0
 80043a0:	b2db      	uxtb	r3, r3
 80043a2:	e03c      	b.n	800441e <HAL_TIM_PWM_Start+0x9e>
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	d109      	bne.n	80043be <HAL_TIM_PWM_Start+0x3e>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	bf14      	ite	ne
 80043b6:	2301      	movne	r3, #1
 80043b8:	2300      	moveq	r3, #0
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	e02f      	b.n	800441e <HAL_TIM_PWM_Start+0x9e>
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d109      	bne.n	80043d8 <HAL_TIM_PWM_Start+0x58>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80043ca:	b2db      	uxtb	r3, r3
 80043cc:	2b01      	cmp	r3, #1
 80043ce:	bf14      	ite	ne
 80043d0:	2301      	movne	r3, #1
 80043d2:	2300      	moveq	r3, #0
 80043d4:	b2db      	uxtb	r3, r3
 80043d6:	e022      	b.n	800441e <HAL_TIM_PWM_Start+0x9e>
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b0c      	cmp	r3, #12
 80043dc:	d109      	bne.n	80043f2 <HAL_TIM_PWM_Start+0x72>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e4:	b2db      	uxtb	r3, r3
 80043e6:	2b01      	cmp	r3, #1
 80043e8:	bf14      	ite	ne
 80043ea:	2301      	movne	r3, #1
 80043ec:	2300      	moveq	r3, #0
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	e015      	b.n	800441e <HAL_TIM_PWM_Start+0x9e>
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d109      	bne.n	800440c <HAL_TIM_PWM_Start+0x8c>
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80043fe:	b2db      	uxtb	r3, r3
 8004400:	2b01      	cmp	r3, #1
 8004402:	bf14      	ite	ne
 8004404:	2301      	movne	r3, #1
 8004406:	2300      	moveq	r3, #0
 8004408:	b2db      	uxtb	r3, r3
 800440a:	e008      	b.n	800441e <HAL_TIM_PWM_Start+0x9e>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004412:	b2db      	uxtb	r3, r3
 8004414:	2b01      	cmp	r3, #1
 8004416:	bf14      	ite	ne
 8004418:	2301      	movne	r3, #1
 800441a:	2300      	moveq	r3, #0
 800441c:	b2db      	uxtb	r3, r3
 800441e:	2b00      	cmp	r3, #0
 8004420:	d001      	beq.n	8004426 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	e097      	b.n	8004556 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d104      	bne.n	8004436 <HAL_TIM_PWM_Start+0xb6>
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2202      	movs	r2, #2
 8004430:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004434:	e023      	b.n	800447e <HAL_TIM_PWM_Start+0xfe>
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	2b04      	cmp	r3, #4
 800443a:	d104      	bne.n	8004446 <HAL_TIM_PWM_Start+0xc6>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2202      	movs	r2, #2
 8004440:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004444:	e01b      	b.n	800447e <HAL_TIM_PWM_Start+0xfe>
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	2b08      	cmp	r3, #8
 800444a:	d104      	bne.n	8004456 <HAL_TIM_PWM_Start+0xd6>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2202      	movs	r2, #2
 8004450:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004454:	e013      	b.n	800447e <HAL_TIM_PWM_Start+0xfe>
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b0c      	cmp	r3, #12
 800445a:	d104      	bne.n	8004466 <HAL_TIM_PWM_Start+0xe6>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2202      	movs	r2, #2
 8004460:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004464:	e00b      	b.n	800447e <HAL_TIM_PWM_Start+0xfe>
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b10      	cmp	r3, #16
 800446a:	d104      	bne.n	8004476 <HAL_TIM_PWM_Start+0xf6>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2202      	movs	r2, #2
 8004470:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004474:	e003      	b.n	800447e <HAL_TIM_PWM_Start+0xfe>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2202      	movs	r2, #2
 800447a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2201      	movs	r2, #1
 8004484:	6839      	ldr	r1, [r7, #0]
 8004486:	4618      	mov	r0, r3
 8004488:	f001 f986 	bl	8005798 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	4a33      	ldr	r2, [pc, #204]	; (8004560 <HAL_TIM_PWM_Start+0x1e0>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d013      	beq.n	80044be <HAL_TIM_PWM_Start+0x13e>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a32      	ldr	r2, [pc, #200]	; (8004564 <HAL_TIM_PWM_Start+0x1e4>)
 800449c:	4293      	cmp	r3, r2
 800449e:	d00e      	beq.n	80044be <HAL_TIM_PWM_Start+0x13e>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	4a30      	ldr	r2, [pc, #192]	; (8004568 <HAL_TIM_PWM_Start+0x1e8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d009      	beq.n	80044be <HAL_TIM_PWM_Start+0x13e>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	4a2f      	ldr	r2, [pc, #188]	; (800456c <HAL_TIM_PWM_Start+0x1ec>)
 80044b0:	4293      	cmp	r3, r2
 80044b2:	d004      	beq.n	80044be <HAL_TIM_PWM_Start+0x13e>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a2d      	ldr	r2, [pc, #180]	; (8004570 <HAL_TIM_PWM_Start+0x1f0>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d101      	bne.n	80044c2 <HAL_TIM_PWM_Start+0x142>
 80044be:	2301      	movs	r3, #1
 80044c0:	e000      	b.n	80044c4 <HAL_TIM_PWM_Start+0x144>
 80044c2:	2300      	movs	r3, #0
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d007      	beq.n	80044d8 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044d6:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a20      	ldr	r2, [pc, #128]	; (8004560 <HAL_TIM_PWM_Start+0x1e0>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d018      	beq.n	8004514 <HAL_TIM_PWM_Start+0x194>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ea:	d013      	beq.n	8004514 <HAL_TIM_PWM_Start+0x194>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a20      	ldr	r2, [pc, #128]	; (8004574 <HAL_TIM_PWM_Start+0x1f4>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d00e      	beq.n	8004514 <HAL_TIM_PWM_Start+0x194>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a1f      	ldr	r2, [pc, #124]	; (8004578 <HAL_TIM_PWM_Start+0x1f8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d009      	beq.n	8004514 <HAL_TIM_PWM_Start+0x194>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a17      	ldr	r2, [pc, #92]	; (8004564 <HAL_TIM_PWM_Start+0x1e4>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d004      	beq.n	8004514 <HAL_TIM_PWM_Start+0x194>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a16      	ldr	r2, [pc, #88]	; (8004568 <HAL_TIM_PWM_Start+0x1e8>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d115      	bne.n	8004540 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	689a      	ldr	r2, [r3, #8]
 800451a:	4b18      	ldr	r3, [pc, #96]	; (800457c <HAL_TIM_PWM_Start+0x1fc>)
 800451c:	4013      	ands	r3, r2
 800451e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2b06      	cmp	r3, #6
 8004524:	d015      	beq.n	8004552 <HAL_TIM_PWM_Start+0x1d2>
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800452c:	d011      	beq.n	8004552 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	681a      	ldr	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f042 0201 	orr.w	r2, r2, #1
 800453c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800453e:	e008      	b.n	8004552 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	681a      	ldr	r2, [r3, #0]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0201 	orr.w	r2, r2, #1
 800454e:	601a      	str	r2, [r3, #0]
 8004550:	e000      	b.n	8004554 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004552:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
 800455e:	bf00      	nop
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40013400 	.word	0x40013400
 8004568:	40014000 	.word	0x40014000
 800456c:	40014400 	.word	0x40014400
 8004570:	40014800 	.word	0x40014800
 8004574:	40000400 	.word	0x40000400
 8004578:	40000800 	.word	0x40000800
 800457c:	00010007 	.word	0x00010007

08004580 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e097      	b.n	80046c4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800459a:	b2db      	uxtb	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d106      	bne.n	80045ae <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f7fc fbbd 	bl	8000d28 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2202      	movs	r2, #2
 80045b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	6812      	ldr	r2, [r2, #0]
 80045c0:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80045c4:	f023 0307 	bic.w	r3, r3, #7
 80045c8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681a      	ldr	r2, [r3, #0]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4619      	mov	r1, r3
 80045d4:	4610      	mov	r0, r2
 80045d6:	f000 fcbd 	bl	8004f54 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	699b      	ldr	r3, [r3, #24]
 80045e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80045fc:	693b      	ldr	r3, [r7, #16]
 80045fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004602:	f023 0303 	bic.w	r3, r3, #3
 8004606:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	689a      	ldr	r2, [r3, #8]
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	4313      	orrs	r3, r2
 8004614:	693a      	ldr	r2, [r7, #16]
 8004616:	4313      	orrs	r3, r2
 8004618:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800461a:	693b      	ldr	r3, [r7, #16]
 800461c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004620:	f023 030c 	bic.w	r3, r3, #12
 8004624:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800462c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004630:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	68da      	ldr	r2, [r3, #12]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	021b      	lsls	r3, r3, #8
 800463c:	4313      	orrs	r3, r2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	691b      	ldr	r3, [r3, #16]
 8004648:	011a      	lsls	r2, r3, #4
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	6a1b      	ldr	r3, [r3, #32]
 800464e:	031b      	lsls	r3, r3, #12
 8004650:	4313      	orrs	r3, r2
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	4313      	orrs	r3, r2
 8004656:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800465e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	685a      	ldr	r2, [r3, #4]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	4313      	orrs	r3, r2
 8004674:	68fa      	ldr	r2, [r7, #12]
 8004676:	4313      	orrs	r3, r2
 8004678:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	697a      	ldr	r2, [r7, #20]
 8004680:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68fa      	ldr	r2, [r7, #12]
 8004690:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	2201      	movs	r2, #1
 8004696:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2201      	movs	r2, #1
 800469e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2201      	movs	r2, #1
 80046a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	2201      	movs	r2, #1
 80046ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	2201      	movs	r2, #1
 80046b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	2201      	movs	r2, #1
 80046be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80046c2:	2300      	movs	r3, #0
}
 80046c4:	4618      	mov	r0, r3
 80046c6:	3718      	adds	r7, #24
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b084      	sub	sp, #16
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046dc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046e4:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046ec:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046f4:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d110      	bne.n	800471e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80046fc:	7bfb      	ldrb	r3, [r7, #15]
 80046fe:	2b01      	cmp	r3, #1
 8004700:	d102      	bne.n	8004708 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004702:	7b7b      	ldrb	r3, [r7, #13]
 8004704:	2b01      	cmp	r3, #1
 8004706:	d001      	beq.n	800470c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e069      	b.n	80047e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2202      	movs	r2, #2
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800471c:	e031      	b.n	8004782 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	2b04      	cmp	r3, #4
 8004722:	d110      	bne.n	8004746 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004724:	7bbb      	ldrb	r3, [r7, #14]
 8004726:	2b01      	cmp	r3, #1
 8004728:	d102      	bne.n	8004730 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800472a:	7b3b      	ldrb	r3, [r7, #12]
 800472c:	2b01      	cmp	r3, #1
 800472e:	d001      	beq.n	8004734 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004730:	2301      	movs	r3, #1
 8004732:	e055      	b.n	80047e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2202      	movs	r2, #2
 8004738:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004744:	e01d      	b.n	8004782 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004746:	7bfb      	ldrb	r3, [r7, #15]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d108      	bne.n	800475e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800474c:	7bbb      	ldrb	r3, [r7, #14]
 800474e:	2b01      	cmp	r3, #1
 8004750:	d105      	bne.n	800475e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004752:	7b7b      	ldrb	r3, [r7, #13]
 8004754:	2b01      	cmp	r3, #1
 8004756:	d102      	bne.n	800475e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004758:	7b3b      	ldrb	r3, [r7, #12]
 800475a:	2b01      	cmp	r3, #1
 800475c:	d001      	beq.n	8004762 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800475e:	2301      	movs	r3, #1
 8004760:	e03e      	b.n	80047e0 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2202      	movs	r2, #2
 8004766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2202      	movs	r2, #2
 800476e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	2202      	movs	r2, #2
 8004776:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2202      	movs	r2, #2
 800477e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	2b00      	cmp	r3, #0
 8004786:	d003      	beq.n	8004790 <HAL_TIM_Encoder_Start+0xc4>
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	2b04      	cmp	r3, #4
 800478c:	d008      	beq.n	80047a0 <HAL_TIM_Encoder_Start+0xd4>
 800478e:	e00f      	b.n	80047b0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2201      	movs	r2, #1
 8004796:	2100      	movs	r1, #0
 8004798:	4618      	mov	r0, r3
 800479a:	f000 fffd 	bl	8005798 <TIM_CCxChannelCmd>
      break;
 800479e:	e016      	b.n	80047ce <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	2201      	movs	r2, #1
 80047a6:	2104      	movs	r1, #4
 80047a8:	4618      	mov	r0, r3
 80047aa:	f000 fff5 	bl	8005798 <TIM_CCxChannelCmd>
      break;
 80047ae:	e00e      	b.n	80047ce <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	2201      	movs	r2, #1
 80047b6:	2100      	movs	r1, #0
 80047b8:	4618      	mov	r0, r3
 80047ba:	f000 ffed 	bl	8005798 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2201      	movs	r2, #1
 80047c4:	2104      	movs	r1, #4
 80047c6:	4618      	mov	r0, r3
 80047c8:	f000 ffe6 	bl	8005798 <TIM_CCxChannelCmd>
      break;
 80047cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	681a      	ldr	r2, [r3, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	f042 0201 	orr.w	r2, r2, #1
 80047dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80047de:	2300      	movs	r3, #0
}
 80047e0:	4618      	mov	r0, r3
 80047e2:	3710      	adds	r7, #16
 80047e4:	46bd      	mov	sp, r7
 80047e6:	bd80      	pop	{r7, pc}

080047e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	f003 0302 	and.w	r3, r3, #2
 80047fa:	2b02      	cmp	r3, #2
 80047fc:	d122      	bne.n	8004844 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	f003 0302 	and.w	r3, r3, #2
 8004808:	2b02      	cmp	r3, #2
 800480a:	d11b      	bne.n	8004844 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0202 	mvn.w	r2, #2
 8004814:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2201      	movs	r2, #1
 800481a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f003 0303 	and.w	r3, r3, #3
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 fb74 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004830:	e005      	b.n	800483e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 fb66 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 fb77 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	691b      	ldr	r3, [r3, #16]
 800484a:	f003 0304 	and.w	r3, r3, #4
 800484e:	2b04      	cmp	r3, #4
 8004850:	d122      	bne.n	8004898 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	68db      	ldr	r3, [r3, #12]
 8004858:	f003 0304 	and.w	r3, r3, #4
 800485c:	2b04      	cmp	r3, #4
 800485e:	d11b      	bne.n	8004898 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f06f 0204 	mvn.w	r2, #4
 8004868:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2202      	movs	r2, #2
 800486e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	699b      	ldr	r3, [r3, #24]
 8004876:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800487a:	2b00      	cmp	r3, #0
 800487c:	d003      	beq.n	8004886 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f000 fb4a 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 8004884:	e005      	b.n	8004892 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 fb3c 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f000 fb4d 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	691b      	ldr	r3, [r3, #16]
 800489e:	f003 0308 	and.w	r3, r3, #8
 80048a2:	2b08      	cmp	r3, #8
 80048a4:	d122      	bne.n	80048ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	68db      	ldr	r3, [r3, #12]
 80048ac:	f003 0308 	and.w	r3, r3, #8
 80048b0:	2b08      	cmp	r3, #8
 80048b2:	d11b      	bne.n	80048ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f06f 0208 	mvn.w	r2, #8
 80048bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2204      	movs	r2, #4
 80048c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	f003 0303 	and.w	r3, r3, #3
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 fb20 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 80048d8:	e005      	b.n	80048e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048da:	6878      	ldr	r0, [r7, #4]
 80048dc:	f000 fb12 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f000 fb23 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	2200      	movs	r2, #0
 80048ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
 80048f2:	f003 0310 	and.w	r3, r3, #16
 80048f6:	2b10      	cmp	r3, #16
 80048f8:	d122      	bne.n	8004940 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	f003 0310 	and.w	r3, r3, #16
 8004904:	2b10      	cmp	r3, #16
 8004906:	d11b      	bne.n	8004940 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f06f 0210 	mvn.w	r2, #16
 8004910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	2208      	movs	r2, #8
 8004916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	69db      	ldr	r3, [r3, #28]
 800491e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f000 faf6 	bl	8004f18 <HAL_TIM_IC_CaptureCallback>
 800492c:	e005      	b.n	800493a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800492e:	6878      	ldr	r0, [r7, #4]
 8004930:	f000 fae8 	bl	8004f04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 faf9 	bl	8004f2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	2200      	movs	r2, #0
 800493e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	691b      	ldr	r3, [r3, #16]
 8004946:	f003 0301 	and.w	r3, r3, #1
 800494a:	2b01      	cmp	r3, #1
 800494c:	d10e      	bne.n	800496c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f003 0301 	and.w	r3, r3, #1
 8004958:	2b01      	cmp	r3, #1
 800495a:	d107      	bne.n	800496c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f06f 0201 	mvn.w	r2, #1
 8004964:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004966:	6878      	ldr	r0, [r7, #4]
 8004968:	f7fb fd0a 	bl	8000380 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	691b      	ldr	r3, [r3, #16]
 8004972:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004976:	2b80      	cmp	r3, #128	; 0x80
 8004978:	d10e      	bne.n	8004998 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	68db      	ldr	r3, [r3, #12]
 8004980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004984:	2b80      	cmp	r3, #128	; 0x80
 8004986:	d107      	bne.n	8004998 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004990:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f001 f852 	bl	8005a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a6:	d10e      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	68db      	ldr	r3, [r3, #12]
 80049ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b2:	2b80      	cmp	r3, #128	; 0x80
 80049b4:	d107      	bne.n	80049c6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80049be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80049c0:	6878      	ldr	r0, [r7, #4]
 80049c2:	f001 f845 	bl	8005a50 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	691b      	ldr	r3, [r3, #16]
 80049cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049d0:	2b40      	cmp	r3, #64	; 0x40
 80049d2:	d10e      	bne.n	80049f2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d107      	bne.n	80049f2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80049ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f000 faa7 	bl	8004f40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	691b      	ldr	r3, [r3, #16]
 80049f8:	f003 0320 	and.w	r3, r3, #32
 80049fc:	2b20      	cmp	r3, #32
 80049fe:	d10e      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0320 	and.w	r3, r3, #32
 8004a0a:	2b20      	cmp	r3, #32
 8004a0c:	d107      	bne.n	8004a1e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f06f 0220 	mvn.w	r2, #32
 8004a16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f001 f805 	bl	8005a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	691b      	ldr	r3, [r3, #16]
 8004a24:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a2c:	d10f      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a38:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8004a46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f001 f80b 	bl	8005a64 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691b      	ldr	r3, [r3, #16]
 8004a54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a5c:	d10f      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004a6c:	d107      	bne.n	8004a7e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8004a76:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a78:	6878      	ldr	r0, [r7, #4]
 8004a7a:	f000 fffd 	bl	8005a78 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	691b      	ldr	r3, [r3, #16]
 8004a84:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a88:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a8c:	d10f      	bne.n	8004aae <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	68db      	ldr	r3, [r3, #12]
 8004a94:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a98:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a9c:	d107      	bne.n	8004aae <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004aa6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 ffef 	bl	8005a8c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ab8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004abc:	d10f      	bne.n	8004ade <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ac8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004acc:	d107      	bne.n	8004ade <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f000 ffe1 	bl	8005aa0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
	...

08004ae8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	60b9      	str	r1, [r7, #8]
 8004af2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004af4:	2300      	movs	r3, #0
 8004af6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004afe:	2b01      	cmp	r3, #1
 8004b00:	d101      	bne.n	8004b06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004b02:	2302      	movs	r3, #2
 8004b04:	e0ff      	b.n	8004d06 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	2201      	movs	r2, #1
 8004b0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2b14      	cmp	r3, #20
 8004b12:	f200 80f0 	bhi.w	8004cf6 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004b16:	a201      	add	r2, pc, #4	; (adr r2, 8004b1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004b18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b1c:	08004b71 	.word	0x08004b71
 8004b20:	08004cf7 	.word	0x08004cf7
 8004b24:	08004cf7 	.word	0x08004cf7
 8004b28:	08004cf7 	.word	0x08004cf7
 8004b2c:	08004bb1 	.word	0x08004bb1
 8004b30:	08004cf7 	.word	0x08004cf7
 8004b34:	08004cf7 	.word	0x08004cf7
 8004b38:	08004cf7 	.word	0x08004cf7
 8004b3c:	08004bf3 	.word	0x08004bf3
 8004b40:	08004cf7 	.word	0x08004cf7
 8004b44:	08004cf7 	.word	0x08004cf7
 8004b48:	08004cf7 	.word	0x08004cf7
 8004b4c:	08004c33 	.word	0x08004c33
 8004b50:	08004cf7 	.word	0x08004cf7
 8004b54:	08004cf7 	.word	0x08004cf7
 8004b58:	08004cf7 	.word	0x08004cf7
 8004b5c:	08004c75 	.word	0x08004c75
 8004b60:	08004cf7 	.word	0x08004cf7
 8004b64:	08004cf7 	.word	0x08004cf7
 8004b68:	08004cf7 	.word	0x08004cf7
 8004b6c:	08004cb5 	.word	0x08004cb5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	4618      	mov	r0, r3
 8004b78:	f000 fa7c 	bl	8005074 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	699a      	ldr	r2, [r3, #24]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f042 0208 	orr.w	r2, r2, #8
 8004b8a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	699a      	ldr	r2, [r3, #24]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0204 	bic.w	r2, r2, #4
 8004b9a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	6999      	ldr	r1, [r3, #24]
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691a      	ldr	r2, [r3, #16]
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	430a      	orrs	r2, r1
 8004bac:	619a      	str	r2, [r3, #24]
      break;
 8004bae:	e0a5      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	68b9      	ldr	r1, [r7, #8]
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 faec 	bl	8005194 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	699a      	ldr	r2, [r3, #24]
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	699a      	ldr	r2, [r3, #24]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bda:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6999      	ldr	r1, [r3, #24]
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	691b      	ldr	r3, [r3, #16]
 8004be6:	021a      	lsls	r2, r3, #8
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	430a      	orrs	r2, r1
 8004bee:	619a      	str	r2, [r3, #24]
      break;
 8004bf0:	e084      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	68b9      	ldr	r1, [r7, #8]
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fb55 	bl	80052a8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	69da      	ldr	r2, [r3, #28]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f042 0208 	orr.w	r2, r2, #8
 8004c0c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	69da      	ldr	r2, [r3, #28]
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f022 0204 	bic.w	r2, r2, #4
 8004c1c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	69d9      	ldr	r1, [r3, #28]
 8004c24:	68bb      	ldr	r3, [r7, #8]
 8004c26:	691a      	ldr	r2, [r3, #16]
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	430a      	orrs	r2, r1
 8004c2e:	61da      	str	r2, [r3, #28]
      break;
 8004c30:	e064      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68b9      	ldr	r1, [r7, #8]
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f000 fbbd 	bl	80053b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	69da      	ldr	r2, [r3, #28]
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	69da      	ldr	r2, [r3, #28]
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	69d9      	ldr	r1, [r3, #28]
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	021a      	lsls	r2, r3, #8
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	430a      	orrs	r2, r1
 8004c70:	61da      	str	r2, [r3, #28]
      break;
 8004c72:	e043      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	68b9      	ldr	r1, [r7, #8]
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	f000 fc26 	bl	80054cc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f042 0208 	orr.w	r2, r2, #8
 8004c8e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0204 	bic.w	r2, r2, #4
 8004c9e:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ca6:	68bb      	ldr	r3, [r7, #8]
 8004ca8:	691a      	ldr	r2, [r3, #16]
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004cb2:	e023      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	68b9      	ldr	r1, [r7, #8]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f000 fc6a 	bl	8005594 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cce:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cde:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	691b      	ldr	r3, [r3, #16]
 8004cea:	021a      	lsls	r2, r3, #8
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004cf4:	e002      	b.n	8004cfc <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	75fb      	strb	r3, [r7, #23]
      break;
 8004cfa:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2200      	movs	r2, #0
 8004d00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3718      	adds	r7, #24
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop

08004d10 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b084      	sub	sp, #16
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d101      	bne.n	8004d2c <HAL_TIM_ConfigClockSource+0x1c>
 8004d28:	2302      	movs	r3, #2
 8004d2a:	e0de      	b.n	8004eea <HAL_TIM_ConfigClockSource+0x1da>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2201      	movs	r2, #1
 8004d30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2202      	movs	r2, #2
 8004d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004d44:	68bb      	ldr	r3, [r7, #8]
 8004d46:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8004d4a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004d4e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d56:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68ba      	ldr	r2, [r7, #8]
 8004d5e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a63      	ldr	r2, [pc, #396]	; (8004ef4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	f000 80a9 	beq.w	8004ebe <HAL_TIM_ConfigClockSource+0x1ae>
 8004d6c:	4a61      	ldr	r2, [pc, #388]	; (8004ef4 <HAL_TIM_ConfigClockSource+0x1e4>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	f200 80ae 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d74:	4a60      	ldr	r2, [pc, #384]	; (8004ef8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	f000 80a1 	beq.w	8004ebe <HAL_TIM_ConfigClockSource+0x1ae>
 8004d7c:	4a5e      	ldr	r2, [pc, #376]	; (8004ef8 <HAL_TIM_ConfigClockSource+0x1e8>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	f200 80a6 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d84:	4a5d      	ldr	r2, [pc, #372]	; (8004efc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	f000 8099 	beq.w	8004ebe <HAL_TIM_ConfigClockSource+0x1ae>
 8004d8c:	4a5b      	ldr	r2, [pc, #364]	; (8004efc <HAL_TIM_ConfigClockSource+0x1ec>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	f200 809e 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004d94:	4a5a      	ldr	r2, [pc, #360]	; (8004f00 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004d96:	4293      	cmp	r3, r2
 8004d98:	f000 8091 	beq.w	8004ebe <HAL_TIM_ConfigClockSource+0x1ae>
 8004d9c:	4a58      	ldr	r2, [pc, #352]	; (8004f00 <HAL_TIM_ConfigClockSource+0x1f0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	f200 8096 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004da4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004da8:	f000 8089 	beq.w	8004ebe <HAL_TIM_ConfigClockSource+0x1ae>
 8004dac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8004db0:	f200 808e 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004db4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db8:	d03e      	beq.n	8004e38 <HAL_TIM_ConfigClockSource+0x128>
 8004dba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004dbe:	f200 8087 	bhi.w	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dc6:	f000 8086 	beq.w	8004ed6 <HAL_TIM_ConfigClockSource+0x1c6>
 8004dca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dce:	d87f      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dd0:	2b70      	cmp	r3, #112	; 0x70
 8004dd2:	d01a      	beq.n	8004e0a <HAL_TIM_ConfigClockSource+0xfa>
 8004dd4:	2b70      	cmp	r3, #112	; 0x70
 8004dd6:	d87b      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004dd8:	2b60      	cmp	r3, #96	; 0x60
 8004dda:	d050      	beq.n	8004e7e <HAL_TIM_ConfigClockSource+0x16e>
 8004ddc:	2b60      	cmp	r3, #96	; 0x60
 8004dde:	d877      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004de0:	2b50      	cmp	r3, #80	; 0x50
 8004de2:	d03c      	beq.n	8004e5e <HAL_TIM_ConfigClockSource+0x14e>
 8004de4:	2b50      	cmp	r3, #80	; 0x50
 8004de6:	d873      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004de8:	2b40      	cmp	r3, #64	; 0x40
 8004dea:	d058      	beq.n	8004e9e <HAL_TIM_ConfigClockSource+0x18e>
 8004dec:	2b40      	cmp	r3, #64	; 0x40
 8004dee:	d86f      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004df0:	2b30      	cmp	r3, #48	; 0x30
 8004df2:	d064      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x1ae>
 8004df4:	2b30      	cmp	r3, #48	; 0x30
 8004df6:	d86b      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004df8:	2b20      	cmp	r3, #32
 8004dfa:	d060      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x1ae>
 8004dfc:	2b20      	cmp	r3, #32
 8004dfe:	d867      	bhi.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d05c      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x1ae>
 8004e04:	2b10      	cmp	r3, #16
 8004e06:	d05a      	beq.n	8004ebe <HAL_TIM_ConfigClockSource+0x1ae>
 8004e08:	e062      	b.n	8004ed0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	6818      	ldr	r0, [r3, #0]
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	6899      	ldr	r1, [r3, #8]
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	68db      	ldr	r3, [r3, #12]
 8004e1a:	f000 fc9d 	bl	8005758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004e2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	68ba      	ldr	r2, [r7, #8]
 8004e34:	609a      	str	r2, [r3, #8]
      break;
 8004e36:	e04f      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	6818      	ldr	r0, [r3, #0]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	6899      	ldr	r1, [r3, #8]
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	685a      	ldr	r2, [r3, #4]
 8004e44:	683b      	ldr	r3, [r7, #0]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	f000 fc86 	bl	8005758 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	689a      	ldr	r2, [r3, #8]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004e5a:	609a      	str	r2, [r3, #8]
      break;
 8004e5c:	e03c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	6818      	ldr	r0, [r3, #0]
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	6859      	ldr	r1, [r3, #4]
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	68db      	ldr	r3, [r3, #12]
 8004e6a:	461a      	mov	r2, r3
 8004e6c:	f000 fbf8 	bl	8005660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	2150      	movs	r1, #80	; 0x50
 8004e76:	4618      	mov	r0, r3
 8004e78:	f000 fc51 	bl	800571e <TIM_ITRx_SetConfig>
      break;
 8004e7c:	e02c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6818      	ldr	r0, [r3, #0]
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	6859      	ldr	r1, [r3, #4]
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	68db      	ldr	r3, [r3, #12]
 8004e8a:	461a      	mov	r2, r3
 8004e8c:	f000 fc17 	bl	80056be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2160      	movs	r1, #96	; 0x60
 8004e96:	4618      	mov	r0, r3
 8004e98:	f000 fc41 	bl	800571e <TIM_ITRx_SetConfig>
      break;
 8004e9c:	e01c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6818      	ldr	r0, [r3, #0]
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	6859      	ldr	r1, [r3, #4]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	68db      	ldr	r3, [r3, #12]
 8004eaa:	461a      	mov	r2, r3
 8004eac:	f000 fbd8 	bl	8005660 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	2140      	movs	r1, #64	; 0x40
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	f000 fc31 	bl	800571e <TIM_ITRx_SetConfig>
      break;
 8004ebc:	e00c      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4610      	mov	r0, r2
 8004eca:	f000 fc28 	bl	800571e <TIM_ITRx_SetConfig>
      break;
 8004ece:	e003      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ed4:	e000      	b.n	8004ed8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8004ed6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	00100070 	.word	0x00100070
 8004ef8:	00100040 	.word	0x00100040
 8004efc:	00100030 	.word	0x00100030
 8004f00:	00100020 	.word	0x00100020

08004f04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b083      	sub	sp, #12
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f0c:	bf00      	nop
 8004f0e:	370c      	adds	r7, #12
 8004f10:	46bd      	mov	sp, r7
 8004f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f16:	4770      	bx	lr

08004f18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b083      	sub	sp, #12
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr

08004f2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004f34:	bf00      	nop
 8004f36:	370c      	adds	r7, #12
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr

08004f54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f54:	b480      	push	{r7}
 8004f56:	b085      	sub	sp, #20
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	4a3c      	ldr	r2, [pc, #240]	; (8005058 <TIM_Base_SetConfig+0x104>)
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d00f      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f72:	d00b      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	4a39      	ldr	r2, [pc, #228]	; (800505c <TIM_Base_SetConfig+0x108>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d007      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	4a38      	ldr	r2, [pc, #224]	; (8005060 <TIM_Base_SetConfig+0x10c>)
 8004f80:	4293      	cmp	r3, r2
 8004f82:	d003      	beq.n	8004f8c <TIM_Base_SetConfig+0x38>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	4a37      	ldr	r2, [pc, #220]	; (8005064 <TIM_Base_SetConfig+0x110>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d108      	bne.n	8004f9e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f92:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f94:	683b      	ldr	r3, [r7, #0]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	68fa      	ldr	r2, [r7, #12]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a2d      	ldr	r2, [pc, #180]	; (8005058 <TIM_Base_SetConfig+0x104>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d01b      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fac:	d017      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a2a      	ldr	r2, [pc, #168]	; (800505c <TIM_Base_SetConfig+0x108>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d013      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a29      	ldr	r2, [pc, #164]	; (8005060 <TIM_Base_SetConfig+0x10c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00f      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a28      	ldr	r2, [pc, #160]	; (8005064 <TIM_Base_SetConfig+0x110>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d00b      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a27      	ldr	r2, [pc, #156]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d007      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a26      	ldr	r2, [pc, #152]	; (800506c <TIM_Base_SetConfig+0x118>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d003      	beq.n	8004fde <TIM_Base_SetConfig+0x8a>
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	4a25      	ldr	r2, [pc, #148]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d108      	bne.n	8004ff0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fe4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fe6:	683b      	ldr	r3, [r7, #0]
 8004fe8:	68db      	ldr	r3, [r3, #12]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	695b      	ldr	r3, [r3, #20]
 8004ffa:	4313      	orrs	r3, r2
 8004ffc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	689a      	ldr	r2, [r3, #8]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	681a      	ldr	r2, [r3, #0]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a10      	ldr	r2, [pc, #64]	; (8005058 <TIM_Base_SetConfig+0x104>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00f      	beq.n	800503c <TIM_Base_SetConfig+0xe8>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a11      	ldr	r2, [pc, #68]	; (8005064 <TIM_Base_SetConfig+0x110>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d00b      	beq.n	800503c <TIM_Base_SetConfig+0xe8>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a10      	ldr	r2, [pc, #64]	; (8005068 <TIM_Base_SetConfig+0x114>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d007      	beq.n	800503c <TIM_Base_SetConfig+0xe8>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a0f      	ldr	r2, [pc, #60]	; (800506c <TIM_Base_SetConfig+0x118>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d003      	beq.n	800503c <TIM_Base_SetConfig+0xe8>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	4a0e      	ldr	r2, [pc, #56]	; (8005070 <TIM_Base_SetConfig+0x11c>)
 8005038:	4293      	cmp	r3, r2
 800503a:	d103      	bne.n	8005044 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	615a      	str	r2, [r3, #20]
}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	40012c00 	.word	0x40012c00
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	40013400 	.word	0x40013400
 8005068:	40014000 	.word	0x40014000
 800506c:	40014400 	.word	0x40014400
 8005070:	40014800 	.word	0x40014800

08005074 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005074:	b480      	push	{r7}
 8005076:	b087      	sub	sp, #28
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
 800507c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	6a1b      	ldr	r3, [r3, #32]
 800508e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	685b      	ldr	r3, [r3, #4]
 8005094:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	699b      	ldr	r3, [r3, #24]
 800509a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0303 	bic.w	r3, r3, #3
 80050ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68fa      	ldr	r2, [r7, #12]
 80050b6:	4313      	orrs	r3, r2
 80050b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	f023 0302 	bic.w	r3, r3, #2
 80050c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80050c2:	683b      	ldr	r3, [r7, #0]
 80050c4:	689b      	ldr	r3, [r3, #8]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	4a2c      	ldr	r2, [pc, #176]	; (8005180 <TIM_OC1_SetConfig+0x10c>)
 80050d0:	4293      	cmp	r3, r2
 80050d2:	d00f      	beq.n	80050f4 <TIM_OC1_SetConfig+0x80>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	4a2b      	ldr	r2, [pc, #172]	; (8005184 <TIM_OC1_SetConfig+0x110>)
 80050d8:	4293      	cmp	r3, r2
 80050da:	d00b      	beq.n	80050f4 <TIM_OC1_SetConfig+0x80>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	4a2a      	ldr	r2, [pc, #168]	; (8005188 <TIM_OC1_SetConfig+0x114>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d007      	beq.n	80050f4 <TIM_OC1_SetConfig+0x80>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	4a29      	ldr	r2, [pc, #164]	; (800518c <TIM_OC1_SetConfig+0x118>)
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d003      	beq.n	80050f4 <TIM_OC1_SetConfig+0x80>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	4a28      	ldr	r2, [pc, #160]	; (8005190 <TIM_OC1_SetConfig+0x11c>)
 80050f0:	4293      	cmp	r3, r2
 80050f2:	d10c      	bne.n	800510e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	f023 0308 	bic.w	r3, r3, #8
 80050fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	697a      	ldr	r2, [r7, #20]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f023 0304 	bic.w	r3, r3, #4
 800510c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a1b      	ldr	r2, [pc, #108]	; (8005180 <TIM_OC1_SetConfig+0x10c>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00f      	beq.n	8005136 <TIM_OC1_SetConfig+0xc2>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a1a      	ldr	r2, [pc, #104]	; (8005184 <TIM_OC1_SetConfig+0x110>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d00b      	beq.n	8005136 <TIM_OC1_SetConfig+0xc2>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a19      	ldr	r2, [pc, #100]	; (8005188 <TIM_OC1_SetConfig+0x114>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d007      	beq.n	8005136 <TIM_OC1_SetConfig+0xc2>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a18      	ldr	r2, [pc, #96]	; (800518c <TIM_OC1_SetConfig+0x118>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d003      	beq.n	8005136 <TIM_OC1_SetConfig+0xc2>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	4a17      	ldr	r2, [pc, #92]	; (8005190 <TIM_OC1_SetConfig+0x11c>)
 8005132:	4293      	cmp	r3, r2
 8005134:	d111      	bne.n	800515a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005136:	693b      	ldr	r3, [r7, #16]
 8005138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800513c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	695b      	ldr	r3, [r3, #20]
 800514a:	693a      	ldr	r2, [r7, #16]
 800514c:	4313      	orrs	r3, r2
 800514e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	693a      	ldr	r2, [r7, #16]
 800515e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	68fa      	ldr	r2, [r7, #12]
 8005164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	685a      	ldr	r2, [r3, #4]
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	697a      	ldr	r2, [r7, #20]
 8005172:	621a      	str	r2, [r3, #32]
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	40012c00 	.word	0x40012c00
 8005184:	40013400 	.word	0x40013400
 8005188:	40014000 	.word	0x40014000
 800518c:	40014400 	.word	0x40014400
 8005190:	40014800 	.word	0x40014800

08005194 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005194:	b480      	push	{r7}
 8005196:	b087      	sub	sp, #28
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6a1b      	ldr	r3, [r3, #32]
 80051a2:	f023 0210 	bic.w	r2, r3, #16
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	6a1b      	ldr	r3, [r3, #32]
 80051ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	699b      	ldr	r3, [r3, #24]
 80051ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051d0:	683b      	ldr	r3, [r7, #0]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	021b      	lsls	r3, r3, #8
 80051d6:	68fa      	ldr	r2, [r7, #12]
 80051d8:	4313      	orrs	r3, r2
 80051da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	f023 0320 	bic.w	r3, r3, #32
 80051e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051e4:	683b      	ldr	r3, [r7, #0]
 80051e6:	689b      	ldr	r3, [r3, #8]
 80051e8:	011b      	lsls	r3, r3, #4
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	4313      	orrs	r3, r2
 80051ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	4a28      	ldr	r2, [pc, #160]	; (8005294 <TIM_OC2_SetConfig+0x100>)
 80051f4:	4293      	cmp	r3, r2
 80051f6:	d003      	beq.n	8005200 <TIM_OC2_SetConfig+0x6c>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a27      	ldr	r2, [pc, #156]	; (8005298 <TIM_OC2_SetConfig+0x104>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d10d      	bne.n	800521c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005206:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	011b      	lsls	r3, r3, #4
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005214:	697b      	ldr	r3, [r7, #20]
 8005216:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800521a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a1d      	ldr	r2, [pc, #116]	; (8005294 <TIM_OC2_SetConfig+0x100>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d00f      	beq.n	8005244 <TIM_OC2_SetConfig+0xb0>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a1c      	ldr	r2, [pc, #112]	; (8005298 <TIM_OC2_SetConfig+0x104>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d00b      	beq.n	8005244 <TIM_OC2_SetConfig+0xb0>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a1b      	ldr	r2, [pc, #108]	; (800529c <TIM_OC2_SetConfig+0x108>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d007      	beq.n	8005244 <TIM_OC2_SetConfig+0xb0>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	4a1a      	ldr	r2, [pc, #104]	; (80052a0 <TIM_OC2_SetConfig+0x10c>)
 8005238:	4293      	cmp	r3, r2
 800523a:	d003      	beq.n	8005244 <TIM_OC2_SetConfig+0xb0>
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a19      	ldr	r2, [pc, #100]	; (80052a4 <TIM_OC2_SetConfig+0x110>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d113      	bne.n	800526c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800524a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800524c:	693b      	ldr	r3, [r7, #16]
 800524e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005252:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	695b      	ldr	r3, [r3, #20]
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	693a      	ldr	r2, [r7, #16]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	699b      	ldr	r3, [r3, #24]
 8005264:	009b      	lsls	r3, r3, #2
 8005266:	693a      	ldr	r2, [r7, #16]
 8005268:	4313      	orrs	r3, r2
 800526a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	693a      	ldr	r2, [r7, #16]
 8005270:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68fa      	ldr	r2, [r7, #12]
 8005276:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	697a      	ldr	r2, [r7, #20]
 8005284:	621a      	str	r2, [r3, #32]
}
 8005286:	bf00      	nop
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005290:	4770      	bx	lr
 8005292:	bf00      	nop
 8005294:	40012c00 	.word	0x40012c00
 8005298:	40013400 	.word	0x40013400
 800529c:	40014000 	.word	0x40014000
 80052a0:	40014400 	.word	0x40014400
 80052a4:	40014800 	.word	0x40014800

080052a8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80052a8:	b480      	push	{r7}
 80052aa:	b087      	sub	sp, #28
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a1b      	ldr	r3, [r3, #32]
 80052b6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6a1b      	ldr	r3, [r3, #32]
 80052c2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	69db      	ldr	r3, [r3, #28]
 80052ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0303 	bic.w	r3, r3, #3
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	4313      	orrs	r3, r2
 80052ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052ee:	697b      	ldr	r3, [r7, #20]
 80052f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	689b      	ldr	r3, [r3, #8]
 80052fa:	021b      	lsls	r3, r3, #8
 80052fc:	697a      	ldr	r2, [r7, #20]
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	4a27      	ldr	r2, [pc, #156]	; (80053a4 <TIM_OC3_SetConfig+0xfc>)
 8005306:	4293      	cmp	r3, r2
 8005308:	d003      	beq.n	8005312 <TIM_OC3_SetConfig+0x6a>
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4a26      	ldr	r2, [pc, #152]	; (80053a8 <TIM_OC3_SetConfig+0x100>)
 800530e:	4293      	cmp	r3, r2
 8005310:	d10d      	bne.n	800532e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005318:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	68db      	ldr	r3, [r3, #12]
 800531e:	021b      	lsls	r3, r3, #8
 8005320:	697a      	ldr	r2, [r7, #20]
 8005322:	4313      	orrs	r3, r2
 8005324:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	4a1c      	ldr	r2, [pc, #112]	; (80053a4 <TIM_OC3_SetConfig+0xfc>)
 8005332:	4293      	cmp	r3, r2
 8005334:	d00f      	beq.n	8005356 <TIM_OC3_SetConfig+0xae>
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	4a1b      	ldr	r2, [pc, #108]	; (80053a8 <TIM_OC3_SetConfig+0x100>)
 800533a:	4293      	cmp	r3, r2
 800533c:	d00b      	beq.n	8005356 <TIM_OC3_SetConfig+0xae>
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	4a1a      	ldr	r2, [pc, #104]	; (80053ac <TIM_OC3_SetConfig+0x104>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d007      	beq.n	8005356 <TIM_OC3_SetConfig+0xae>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	4a19      	ldr	r2, [pc, #100]	; (80053b0 <TIM_OC3_SetConfig+0x108>)
 800534a:	4293      	cmp	r3, r2
 800534c:	d003      	beq.n	8005356 <TIM_OC3_SetConfig+0xae>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	4a18      	ldr	r2, [pc, #96]	; (80053b4 <TIM_OC3_SetConfig+0x10c>)
 8005352:	4293      	cmp	r3, r2
 8005354:	d113      	bne.n	800537e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005356:	693b      	ldr	r3, [r7, #16]
 8005358:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800535c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800535e:	693b      	ldr	r3, [r7, #16]
 8005360:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005364:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	695b      	ldr	r3, [r3, #20]
 800536a:	011b      	lsls	r3, r3, #4
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4313      	orrs	r3, r2
 8005370:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	699b      	ldr	r3, [r3, #24]
 8005376:	011b      	lsls	r3, r3, #4
 8005378:	693a      	ldr	r2, [r7, #16]
 800537a:	4313      	orrs	r3, r2
 800537c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	693a      	ldr	r2, [r7, #16]
 8005382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	68fa      	ldr	r2, [r7, #12]
 8005388:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	685a      	ldr	r2, [r3, #4]
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	621a      	str	r2, [r3, #32]
}
 8005398:	bf00      	nop
 800539a:	371c      	adds	r7, #28
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40013400 	.word	0x40013400
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800

080053b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b087      	sub	sp, #28
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053f4:	683b      	ldr	r3, [r7, #0]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	021b      	lsls	r3, r3, #8
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005406:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	689b      	ldr	r3, [r3, #8]
 800540c:	031b      	lsls	r3, r3, #12
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	4313      	orrs	r3, r2
 8005412:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	4a28      	ldr	r2, [pc, #160]	; (80054b8 <TIM_OC4_SetConfig+0x100>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d003      	beq.n	8005424 <TIM_OC4_SetConfig+0x6c>
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a27      	ldr	r2, [pc, #156]	; (80054bc <TIM_OC4_SetConfig+0x104>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d10d      	bne.n	8005440 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800542a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	68db      	ldr	r3, [r3, #12]
 8005430:	031b      	lsls	r3, r3, #12
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800543e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	4a1d      	ldr	r2, [pc, #116]	; (80054b8 <TIM_OC4_SetConfig+0x100>)
 8005444:	4293      	cmp	r3, r2
 8005446:	d00f      	beq.n	8005468 <TIM_OC4_SetConfig+0xb0>
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	4a1c      	ldr	r2, [pc, #112]	; (80054bc <TIM_OC4_SetConfig+0x104>)
 800544c:	4293      	cmp	r3, r2
 800544e:	d00b      	beq.n	8005468 <TIM_OC4_SetConfig+0xb0>
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	4a1b      	ldr	r2, [pc, #108]	; (80054c0 <TIM_OC4_SetConfig+0x108>)
 8005454:	4293      	cmp	r3, r2
 8005456:	d007      	beq.n	8005468 <TIM_OC4_SetConfig+0xb0>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	4a1a      	ldr	r2, [pc, #104]	; (80054c4 <TIM_OC4_SetConfig+0x10c>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d003      	beq.n	8005468 <TIM_OC4_SetConfig+0xb0>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	4a19      	ldr	r2, [pc, #100]	; (80054c8 <TIM_OC4_SetConfig+0x110>)
 8005464:	4293      	cmp	r3, r2
 8005466:	d113      	bne.n	8005490 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005468:	693b      	ldr	r3, [r7, #16]
 800546a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800546e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005476:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	695b      	ldr	r3, [r3, #20]
 800547c:	019b      	lsls	r3, r3, #6
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	4313      	orrs	r3, r2
 8005482:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	699b      	ldr	r3, [r3, #24]
 8005488:	019b      	lsls	r3, r3, #6
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	4313      	orrs	r3, r2
 800548e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	693a      	ldr	r2, [r7, #16]
 8005494:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	697a      	ldr	r2, [r7, #20]
 80054a8:	621a      	str	r2, [r3, #32]
}
 80054aa:	bf00      	nop
 80054ac:	371c      	adds	r7, #28
 80054ae:	46bd      	mov	sp, r7
 80054b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b4:	4770      	bx	lr
 80054b6:	bf00      	nop
 80054b8:	40012c00 	.word	0x40012c00
 80054bc:	40013400 	.word	0x40013400
 80054c0:	40014000 	.word	0x40014000
 80054c4:	40014400 	.word	0x40014400
 80054c8:	40014800 	.word	0x40014800

080054cc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80054cc:	b480      	push	{r7}
 80054ce:	b087      	sub	sp, #28
 80054d0:	af00      	add	r7, sp, #0
 80054d2:	6078      	str	r0, [r7, #4]
 80054d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6a1b      	ldr	r3, [r3, #32]
 80054da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a1b      	ldr	r3, [r3, #32]
 80054e6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005500:	683b      	ldr	r3, [r7, #0]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68fa      	ldr	r2, [r7, #12]
 8005506:	4313      	orrs	r3, r2
 8005508:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005510:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	041b      	lsls	r3, r3, #16
 8005518:	693a      	ldr	r2, [r7, #16]
 800551a:	4313      	orrs	r3, r2
 800551c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	4a17      	ldr	r2, [pc, #92]	; (8005580 <TIM_OC5_SetConfig+0xb4>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d00f      	beq.n	8005546 <TIM_OC5_SetConfig+0x7a>
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	4a16      	ldr	r2, [pc, #88]	; (8005584 <TIM_OC5_SetConfig+0xb8>)
 800552a:	4293      	cmp	r3, r2
 800552c:	d00b      	beq.n	8005546 <TIM_OC5_SetConfig+0x7a>
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	4a15      	ldr	r2, [pc, #84]	; (8005588 <TIM_OC5_SetConfig+0xbc>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d007      	beq.n	8005546 <TIM_OC5_SetConfig+0x7a>
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	4a14      	ldr	r2, [pc, #80]	; (800558c <TIM_OC5_SetConfig+0xc0>)
 800553a:	4293      	cmp	r3, r2
 800553c:	d003      	beq.n	8005546 <TIM_OC5_SetConfig+0x7a>
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	4a13      	ldr	r2, [pc, #76]	; (8005590 <TIM_OC5_SetConfig+0xc4>)
 8005542:	4293      	cmp	r3, r2
 8005544:	d109      	bne.n	800555a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800554c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	695b      	ldr	r3, [r3, #20]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	68fa      	ldr	r2, [r7, #12]
 8005564:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	685a      	ldr	r2, [r3, #4]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	693a      	ldr	r2, [r7, #16]
 8005572:	621a      	str	r2, [r3, #32]
}
 8005574:	bf00      	nop
 8005576:	371c      	adds	r7, #28
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	40012c00 	.word	0x40012c00
 8005584:	40013400 	.word	0x40013400
 8005588:	40014000 	.word	0x40014000
 800558c:	40014400 	.word	0x40014400
 8005590:	40014800 	.word	0x40014800

08005594 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8005594:	b480      	push	{r7}
 8005596:	b087      	sub	sp, #28
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
 800559c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	6a1b      	ldr	r3, [r3, #32]
 80055a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6a1b      	ldr	r3, [r3, #32]
 80055ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80055c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80055c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	021b      	lsls	r3, r3, #8
 80055ce:	68fa      	ldr	r2, [r7, #12]
 80055d0:	4313      	orrs	r3, r2
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80055da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	051b      	lsls	r3, r3, #20
 80055e2:	693a      	ldr	r2, [r7, #16]
 80055e4:	4313      	orrs	r3, r2
 80055e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4a18      	ldr	r2, [pc, #96]	; (800564c <TIM_OC6_SetConfig+0xb8>)
 80055ec:	4293      	cmp	r3, r2
 80055ee:	d00f      	beq.n	8005610 <TIM_OC6_SetConfig+0x7c>
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4a17      	ldr	r2, [pc, #92]	; (8005650 <TIM_OC6_SetConfig+0xbc>)
 80055f4:	4293      	cmp	r3, r2
 80055f6:	d00b      	beq.n	8005610 <TIM_OC6_SetConfig+0x7c>
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	4a16      	ldr	r2, [pc, #88]	; (8005654 <TIM_OC6_SetConfig+0xc0>)
 80055fc:	4293      	cmp	r3, r2
 80055fe:	d007      	beq.n	8005610 <TIM_OC6_SetConfig+0x7c>
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a15      	ldr	r2, [pc, #84]	; (8005658 <TIM_OC6_SetConfig+0xc4>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_OC6_SetConfig+0x7c>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a14      	ldr	r2, [pc, #80]	; (800565c <TIM_OC6_SetConfig+0xc8>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d109      	bne.n	8005624 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005616:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	695b      	ldr	r3, [r3, #20]
 800561c:	029b      	lsls	r3, r3, #10
 800561e:	697a      	ldr	r2, [r7, #20]
 8005620:	4313      	orrs	r3, r2
 8005622:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	697a      	ldr	r2, [r7, #20]
 8005628:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	68fa      	ldr	r2, [r7, #12]
 800562e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	685a      	ldr	r2, [r3, #4]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	693a      	ldr	r2, [r7, #16]
 800563c:	621a      	str	r2, [r3, #32]
}
 800563e:	bf00      	nop
 8005640:	371c      	adds	r7, #28
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	40012c00 	.word	0x40012c00
 8005650:	40013400 	.word	0x40013400
 8005654:	40014000 	.word	0x40014000
 8005658:	40014400 	.word	0x40014400
 800565c:	40014800 	.word	0x40014800

08005660 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005660:	b480      	push	{r7}
 8005662:	b087      	sub	sp, #28
 8005664:	af00      	add	r7, sp, #0
 8005666:	60f8      	str	r0, [r7, #12]
 8005668:	60b9      	str	r1, [r7, #8]
 800566a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	6a1b      	ldr	r3, [r3, #32]
 8005670:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	6a1b      	ldr	r3, [r3, #32]
 8005676:	f023 0201 	bic.w	r2, r3, #1
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	699b      	ldr	r3, [r3, #24]
 8005682:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005684:	693b      	ldr	r3, [r7, #16]
 8005686:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800568a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	011b      	lsls	r3, r3, #4
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	4313      	orrs	r3, r2
 8005694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005696:	697b      	ldr	r3, [r7, #20]
 8005698:	f023 030a 	bic.w	r3, r3, #10
 800569c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	697a      	ldr	r2, [r7, #20]
 80056b0:	621a      	str	r2, [r3, #32]
}
 80056b2:	bf00      	nop
 80056b4:	371c      	adds	r7, #28
 80056b6:	46bd      	mov	sp, r7
 80056b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056bc:	4770      	bx	lr

080056be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056be:	b480      	push	{r7}
 80056c0:	b087      	sub	sp, #28
 80056c2:	af00      	add	r7, sp, #0
 80056c4:	60f8      	str	r0, [r7, #12]
 80056c6:	60b9      	str	r1, [r7, #8]
 80056c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	6a1b      	ldr	r3, [r3, #32]
 80056ce:	f023 0210 	bic.w	r2, r3, #16
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	699b      	ldr	r3, [r3, #24]
 80056da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80056e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	031b      	lsls	r3, r3, #12
 80056ee:	697a      	ldr	r2, [r7, #20]
 80056f0:	4313      	orrs	r3, r2
 80056f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80056fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80056fc:	68bb      	ldr	r3, [r7, #8]
 80056fe:	011b      	lsls	r3, r3, #4
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	697a      	ldr	r2, [r7, #20]
 800570a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	693a      	ldr	r2, [r7, #16]
 8005710:	621a      	str	r2, [r3, #32]
}
 8005712:	bf00      	nop
 8005714:	371c      	adds	r7, #28
 8005716:	46bd      	mov	sp, r7
 8005718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571c:	4770      	bx	lr

0800571e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800571e:	b480      	push	{r7}
 8005720:	b085      	sub	sp, #20
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
 8005726:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	689b      	ldr	r3, [r3, #8]
 800572c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005734:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005738:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800573a:	683a      	ldr	r2, [r7, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	4313      	orrs	r3, r2
 8005740:	f043 0307 	orr.w	r3, r3, #7
 8005744:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68fa      	ldr	r2, [r7, #12]
 800574a:	609a      	str	r2, [r3, #8]
}
 800574c:	bf00      	nop
 800574e:	3714      	adds	r7, #20
 8005750:	46bd      	mov	sp, r7
 8005752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005756:	4770      	bx	lr

08005758 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005758:	b480      	push	{r7}
 800575a:	b087      	sub	sp, #28
 800575c:	af00      	add	r7, sp, #0
 800575e:	60f8      	str	r0, [r7, #12]
 8005760:	60b9      	str	r1, [r7, #8]
 8005762:	607a      	str	r2, [r7, #4]
 8005764:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689b      	ldr	r3, [r3, #8]
 800576a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800576c:	697b      	ldr	r3, [r7, #20]
 800576e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005772:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	021a      	lsls	r2, r3, #8
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	431a      	orrs	r2, r3
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	4313      	orrs	r3, r2
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	4313      	orrs	r3, r2
 8005784:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	697a      	ldr	r2, [r7, #20]
 800578a:	609a      	str	r2, [r3, #8]
}
 800578c:	bf00      	nop
 800578e:	371c      	adds	r7, #28
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005798:	b480      	push	{r7}
 800579a:	b087      	sub	sp, #28
 800579c:	af00      	add	r7, sp, #0
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	f003 031f 	and.w	r3, r3, #31
 80057aa:	2201      	movs	r2, #1
 80057ac:	fa02 f303 	lsl.w	r3, r2, r3
 80057b0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	6a1a      	ldr	r2, [r3, #32]
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	43db      	mvns	r3, r3
 80057ba:	401a      	ands	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	68bb      	ldr	r3, [r7, #8]
 80057c6:	f003 031f 	and.w	r3, r3, #31
 80057ca:	6879      	ldr	r1, [r7, #4]
 80057cc:	fa01 f303 	lsl.w	r3, r1, r3
 80057d0:	431a      	orrs	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	621a      	str	r2, [r3, #32]
}
 80057d6:	bf00      	nop
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr
	...

080057e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80057e4:	b480      	push	{r7}
 80057e6:	b085      	sub	sp, #20
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
 80057ec:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057f4:	2b01      	cmp	r3, #1
 80057f6:	d101      	bne.n	80057fc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057f8:	2302      	movs	r3, #2
 80057fa:	e065      	b.n	80058c8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2201      	movs	r2, #1
 8005800:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	2202      	movs	r2, #2
 8005808:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	689b      	ldr	r3, [r3, #8]
 800581a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a2c      	ldr	r2, [pc, #176]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d004      	beq.n	8005830 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	4a2b      	ldr	r2, [pc, #172]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800582c:	4293      	cmp	r3, r2
 800582e:	d108      	bne.n	8005842 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005836:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	685b      	ldr	r3, [r3, #4]
 800583c:	68fa      	ldr	r2, [r7, #12]
 800583e:	4313      	orrs	r3, r2
 8005840:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005848:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800584c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	4313      	orrs	r3, r2
 8005856:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	4a1b      	ldr	r2, [pc, #108]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005866:	4293      	cmp	r3, r2
 8005868:	d018      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005872:	d013      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	4a18      	ldr	r2, [pc, #96]	; (80058dc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800587a:	4293      	cmp	r3, r2
 800587c:	d00e      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	4a17      	ldr	r2, [pc, #92]	; (80058e0 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d009      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	4a12      	ldr	r2, [pc, #72]	; (80058d8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800588e:	4293      	cmp	r3, r2
 8005890:	d004      	beq.n	800589c <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4a13      	ldr	r2, [pc, #76]	; (80058e4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d10c      	bne.n	80058b6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058a2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058a4:	683b      	ldr	r3, [r7, #0]
 80058a6:	689b      	ldr	r3, [r3, #8]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	68ba      	ldr	r2, [r7, #8]
 80058b4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2201      	movs	r2, #1
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c6:	2300      	movs	r3, #0
}
 80058c8:	4618      	mov	r0, r3
 80058ca:	3714      	adds	r7, #20
 80058cc:	46bd      	mov	sp, r7
 80058ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d2:	4770      	bx	lr
 80058d4:	40012c00 	.word	0x40012c00
 80058d8:	40013400 	.word	0x40013400
 80058dc:	40000400 	.word	0x40000400
 80058e0:	40000800 	.word	0x40000800
 80058e4:	40014000 	.word	0x40014000

080058e8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
 80058f0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80058f2:	2300      	movs	r3, #0
 80058f4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fc:	2b01      	cmp	r3, #1
 80058fe:	d101      	bne.n	8005904 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005900:	2302      	movs	r3, #2
 8005902:	e087      	b.n	8005a14 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2201      	movs	r2, #1
 8005908:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	4313      	orrs	r3, r2
 8005918:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005920:	683b      	ldr	r3, [r7, #0]
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	691b      	ldr	r3, [r3, #16]
 800594e:	4313      	orrs	r3, r2
 8005950:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	695b      	ldr	r3, [r3, #20]
 800595c:	4313      	orrs	r3, r2
 800595e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800596a:	4313      	orrs	r3, r2
 800596c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	699b      	ldr	r3, [r3, #24]
 8005978:	041b      	lsls	r3, r3, #16
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	4a27      	ldr	r2, [pc, #156]	; (8005a20 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 8005984:	4293      	cmp	r3, r2
 8005986:	d004      	beq.n	8005992 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a25      	ldr	r2, [pc, #148]	; (8005a24 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 800598e:	4293      	cmp	r3, r2
 8005990:	d106      	bne.n	80059a0 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	69db      	ldr	r3, [r3, #28]
 800599c:	4313      	orrs	r3, r2
 800599e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	4a1e      	ldr	r2, [pc, #120]	; (8005a20 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d004      	beq.n	80059b4 <HAL_TIMEx_ConfigBreakDeadTime+0xcc>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	4a1d      	ldr	r2, [pc, #116]	; (8005a24 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059b0:	4293      	cmp	r3, r2
 80059b2:	d126      	bne.n	8005a02 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80059ba:	683b      	ldr	r3, [r7, #0]
 80059bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059be:	051b      	lsls	r3, r3, #20
 80059c0:	4313      	orrs	r3, r2
 80059c2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80059ca:	683b      	ldr	r3, [r7, #0]
 80059cc:	6a1b      	ldr	r3, [r3, #32]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80059d8:	683b      	ldr	r3, [r7, #0]
 80059da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059dc:	4313      	orrs	r3, r2
 80059de:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4a0e      	ldr	r2, [pc, #56]	; (8005a20 <HAL_TIMEx_ConfigBreakDeadTime+0x138>)
 80059e6:	4293      	cmp	r3, r2
 80059e8:	d004      	beq.n	80059f4 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	4a0d      	ldr	r2, [pc, #52]	; (8005a24 <HAL_TIMEx_ConfigBreakDeadTime+0x13c>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d106      	bne.n	8005a02 <HAL_TIMEx_ConfigBreakDeadTime+0x11a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68fa      	ldr	r2, [r7, #12]
 8005a08:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005a12:	2300      	movs	r3, #0
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3714      	adds	r7, #20
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1e:	4770      	bx	lr
 8005a20:	40012c00 	.word	0x40012c00
 8005a24:	40013400 	.word	0x40013400

08005a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005a58:	bf00      	nop
 8005a5a:	370c      	adds	r7, #12
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr

08005a64 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b083      	sub	sp, #12
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005a6c:	bf00      	nop
 8005a6e:	370c      	adds	r7, #12
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b083      	sub	sp, #12
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005a80:	bf00      	nop
 8005a82:	370c      	adds	r7, #12
 8005a84:	46bd      	mov	sp, r7
 8005a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8a:	4770      	bx	lr

08005a8c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b083      	sub	sp, #12
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005a94:	bf00      	nop
 8005a96:	370c      	adds	r7, #12
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9e:	4770      	bx	lr

08005aa0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b085      	sub	sp, #20
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005ac4:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005ac8:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	b29a      	uxth	r2, r3
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8005aea:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8005aee:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	b29b      	uxth	r3, r3
 8005afc:	43db      	mvns	r3, r3
 8005afe:	b29b      	uxth	r3, r3
 8005b00:	4013      	ands	r3, r2
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3714      	adds	r7, #20
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8005b18:	b084      	sub	sp, #16
 8005b1a:	b480      	push	{r7}
 8005b1c:	b083      	sub	sp, #12
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
 8005b22:	f107 0014 	add.w	r0, r7, #20
 8005b26:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	2201      	movs	r2, #1
 8005b2e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2200      	movs	r2, #0
 8005b46:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8005b4a:	2300      	movs	r3, #0
}
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	b004      	add	sp, #16
 8005b58:	4770      	bx	lr
	...

08005b5c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b09d      	sub	sp, #116	; 0x74
 8005b60:	af00      	add	r7, sp, #0
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005b66:	2300      	movs	r3, #0
 8005b68:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8005b6c:	687a      	ldr	r2, [r7, #4]
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	009b      	lsls	r3, r3, #2
 8005b74:	4413      	add	r3, r2
 8005b76:	881b      	ldrh	r3, [r3, #0]
 8005b78:	b29b      	uxth	r3, r3
 8005b7a:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8005b7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b82:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c

  /* initialize Endpoint */
  switch (ep->type)
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	78db      	ldrb	r3, [r3, #3]
 8005b8a:	2b03      	cmp	r3, #3
 8005b8c:	d81f      	bhi.n	8005bce <USB_ActivateEndpoint+0x72>
 8005b8e:	a201      	add	r2, pc, #4	; (adr r2, 8005b94 <USB_ActivateEndpoint+0x38>)
 8005b90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b94:	08005ba5 	.word	0x08005ba5
 8005b98:	08005bc1 	.word	0x08005bc1
 8005b9c:	08005bd7 	.word	0x08005bd7
 8005ba0:	08005bb3 	.word	0x08005bb3
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8005ba4:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005ba8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bac:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005bb0:	e012      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 8005bb2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005bb6:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8005bba:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005bbe:	e00b      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8005bc0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005bc4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005bc8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
      break;
 8005bcc:	e004      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
      break;
 8005bd4:	e000      	b.n	8005bd8 <USB_ActivateEndpoint+0x7c>
      break;
 8005bd6:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8005bd8:	687a      	ldr	r2, [r7, #4]
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	441a      	add	r2, r3
 8005be2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 8005be6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005bea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005bee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005bf2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bf6:	b29b      	uxth	r3, r3
 8005bf8:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	781b      	ldrb	r3, [r3, #0]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	4413      	add	r3, r2
 8005c04:	881b      	ldrh	r3, [r3, #0]
 8005c06:	b29b      	uxth	r3, r3
 8005c08:	b21b      	sxth	r3, r3
 8005c0a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c12:	b21a      	sxth	r2, r3
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	781b      	ldrb	r3, [r3, #0]
 8005c18:	b21b      	sxth	r3, r3
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	b21b      	sxth	r3, r3
 8005c1e:	f8a7 3066 	strh.w	r3, [r7, #102]	; 0x66
 8005c22:	687a      	ldr	r2, [r7, #4]
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	781b      	ldrb	r3, [r3, #0]
 8005c28:	009b      	lsls	r3, r3, #2
 8005c2a:	441a      	add	r2, r3
 8005c2c:	f8b7 3066 	ldrh.w	r3, [r7, #102]	; 0x66
 8005c30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005c34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005c38:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c40:	b29b      	uxth	r3, r3
 8005c42:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	7b1b      	ldrb	r3, [r3, #12]
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f040 8149 	bne.w	8005ee0 <USB_ActivateEndpoint+0x384>
  {
    if (ep->is_in != 0U)
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	785b      	ldrb	r3, [r3, #1]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	f000 8084 	beq.w	8005d60 <USB_ActivateEndpoint+0x204>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	61bb      	str	r3, [r7, #24]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	461a      	mov	r2, r3
 8005c66:	69bb      	ldr	r3, [r7, #24]
 8005c68:	4413      	add	r3, r2
 8005c6a:	61bb      	str	r3, [r7, #24]
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	781b      	ldrb	r3, [r3, #0]
 8005c70:	00da      	lsls	r2, r3, #3
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	4413      	add	r3, r2
 8005c76:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c7a:	617b      	str	r3, [r7, #20]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	88db      	ldrh	r3, [r3, #6]
 8005c80:	085b      	lsrs	r3, r3, #1
 8005c82:	b29b      	uxth	r3, r3
 8005c84:	005b      	lsls	r3, r3, #1
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	697b      	ldr	r3, [r7, #20]
 8005c8a:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	009b      	lsls	r3, r3, #2
 8005c94:	4413      	add	r3, r2
 8005c96:	881b      	ldrh	r3, [r3, #0]
 8005c98:	827b      	strh	r3, [r7, #18]
 8005c9a:	8a7b      	ldrh	r3, [r7, #18]
 8005c9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d01b      	beq.n	8005cdc <USB_ActivateEndpoint+0x180>
 8005ca4:	687a      	ldr	r2, [r7, #4]
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	781b      	ldrb	r3, [r3, #0]
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4413      	add	r3, r2
 8005cae:	881b      	ldrh	r3, [r3, #0]
 8005cb0:	b29b      	uxth	r3, r3
 8005cb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cba:	823b      	strh	r3, [r7, #16]
 8005cbc:	687a      	ldr	r2, [r7, #4]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	009b      	lsls	r3, r3, #2
 8005cc4:	441a      	add	r2, r3
 8005cc6:	8a3b      	ldrh	r3, [r7, #16]
 8005cc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ccc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005cd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005cd4:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8005cd8:	b29b      	uxth	r3, r3
 8005cda:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	78db      	ldrb	r3, [r3, #3]
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	d020      	beq.n	8005d26 <USB_ActivateEndpoint+0x1ca>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8005ce4:	687a      	ldr	r2, [r7, #4]
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	781b      	ldrb	r3, [r3, #0]
 8005cea:	009b      	lsls	r3, r3, #2
 8005cec:	4413      	add	r3, r2
 8005cee:	881b      	ldrh	r3, [r3, #0]
 8005cf0:	b29b      	uxth	r3, r3
 8005cf2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005cf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005cfa:	81bb      	strh	r3, [r7, #12]
 8005cfc:	89bb      	ldrh	r3, [r7, #12]
 8005cfe:	f083 0320 	eor.w	r3, r3, #32
 8005d02:	81bb      	strh	r3, [r7, #12]
 8005d04:	687a      	ldr	r2, [r7, #4]
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	009b      	lsls	r3, r3, #2
 8005d0c:	441a      	add	r2, r3
 8005d0e:	89bb      	ldrh	r3, [r7, #12]
 8005d10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d20:	b29b      	uxth	r3, r3
 8005d22:	8013      	strh	r3, [r2, #0]
 8005d24:	e2a6      	b.n	8006274 <USB_ActivateEndpoint+0x718>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	781b      	ldrb	r3, [r3, #0]
 8005d2c:	009b      	lsls	r3, r3, #2
 8005d2e:	4413      	add	r3, r2
 8005d30:	881b      	ldrh	r3, [r3, #0]
 8005d32:	b29b      	uxth	r3, r3
 8005d34:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d3c:	81fb      	strh	r3, [r7, #14]
 8005d3e:	687a      	ldr	r2, [r7, #4]
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	781b      	ldrb	r3, [r3, #0]
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	441a      	add	r2, r3
 8005d48:	89fb      	ldrh	r3, [r7, #14]
 8005d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	8013      	strh	r3, [r2, #0]
 8005d5e:	e289      	b.n	8006274 <USB_ActivateEndpoint+0x718>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	633b      	str	r3, [r7, #48]	; 0x30
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	461a      	mov	r2, r3
 8005d6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d70:	4413      	add	r3, r2
 8005d72:	633b      	str	r3, [r7, #48]	; 0x30
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	00da      	lsls	r2, r3, #3
 8005d7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7c:	4413      	add	r3, r2
 8005d7e:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005d82:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	88db      	ldrh	r3, [r3, #6]
 8005d88:	085b      	lsrs	r3, r3, #1
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	005b      	lsls	r3, r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d92:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	62bb      	str	r3, [r7, #40]	; 0x28
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005d9e:	b29b      	uxth	r3, r3
 8005da0:	461a      	mov	r2, r3
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	4413      	add	r3, r2
 8005da6:	62bb      	str	r3, [r7, #40]	; 0x28
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	00da      	lsls	r2, r3, #3
 8005dae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db0:	4413      	add	r3, r2
 8005db2:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8005db6:	627b      	str	r3, [r7, #36]	; 0x24
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b3e      	cmp	r3, #62	; 0x3e
 8005dbe:	d918      	bls.n	8005df2 <USB_ActivateEndpoint+0x296>
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	691b      	ldr	r3, [r3, #16]
 8005dc4:	095b      	lsrs	r3, r3, #5
 8005dc6:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	691b      	ldr	r3, [r3, #16]
 8005dcc:	f003 031f 	and.w	r3, r3, #31
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d102      	bne.n	8005dda <USB_ActivateEndpoint+0x27e>
 8005dd4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005dd6:	3b01      	subs	r3, #1
 8005dd8:	66bb      	str	r3, [r7, #104]	; 0x68
 8005dda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ddc:	b29b      	uxth	r3, r3
 8005dde:	029b      	lsls	r3, r3, #10
 8005de0:	b29b      	uxth	r3, r3
 8005de2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005de6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005dea:	b29a      	uxth	r2, r3
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	801a      	strh	r2, [r3, #0]
 8005df0:	e029      	b.n	8005e46 <USB_ActivateEndpoint+0x2ea>
 8005df2:	683b      	ldr	r3, [r7, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d112      	bne.n	8005e20 <USB_ActivateEndpoint+0x2c4>
 8005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfc:	881b      	ldrh	r3, [r3, #0]
 8005dfe:	b29b      	uxth	r3, r3
 8005e00:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8005e04:	b29a      	uxth	r2, r3
 8005e06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e08:	801a      	strh	r2, [r3, #0]
 8005e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0c:	881b      	ldrh	r3, [r3, #0]
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8005e14:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8005e18:	b29a      	uxth	r2, r3
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	801a      	strh	r2, [r3, #0]
 8005e1e:	e012      	b.n	8005e46 <USB_ActivateEndpoint+0x2ea>
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	085b      	lsrs	r3, r3, #1
 8005e26:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	f003 0301 	and.w	r3, r3, #1
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d002      	beq.n	8005e3a <USB_ActivateEndpoint+0x2de>
 8005e34:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e36:	3301      	adds	r3, #1
 8005e38:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e3c:	b29b      	uxth	r3, r3
 8005e3e:	029b      	lsls	r3, r3, #10
 8005e40:	b29a      	uxth	r2, r3
 8005e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e44:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005e46:	687a      	ldr	r2, [r7, #4]
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	781b      	ldrb	r3, [r3, #0]
 8005e4c:	009b      	lsls	r3, r3, #2
 8005e4e:	4413      	add	r3, r2
 8005e50:	881b      	ldrh	r3, [r3, #0]
 8005e52:	847b      	strh	r3, [r7, #34]	; 0x22
 8005e54:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005e56:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d01b      	beq.n	8005e96 <USB_ActivateEndpoint+0x33a>
 8005e5e:	687a      	ldr	r2, [r7, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	781b      	ldrb	r3, [r3, #0]
 8005e64:	009b      	lsls	r3, r3, #2
 8005e66:	4413      	add	r3, r2
 8005e68:	881b      	ldrh	r3, [r3, #0]
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e70:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e74:	843b      	strh	r3, [r7, #32]
 8005e76:	687a      	ldr	r2, [r7, #4]
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	781b      	ldrb	r3, [r3, #0]
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	441a      	add	r2, r3
 8005e80:	8c3b      	ldrh	r3, [r7, #32]
 8005e82:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005e86:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005e8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005e92:	b29b      	uxth	r3, r3
 8005e94:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	009b      	lsls	r3, r3, #2
 8005e9e:	4413      	add	r3, r2
 8005ea0:	881b      	ldrh	r3, [r3, #0]
 8005ea2:	b29b      	uxth	r3, r3
 8005ea4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ea8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eac:	83fb      	strh	r3, [r7, #30]
 8005eae:	8bfb      	ldrh	r3, [r7, #30]
 8005eb0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8005eb4:	83fb      	strh	r3, [r7, #30]
 8005eb6:	8bfb      	ldrh	r3, [r7, #30]
 8005eb8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8005ebc:	83fb      	strh	r3, [r7, #30]
 8005ebe:	687a      	ldr	r2, [r7, #4]
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	441a      	add	r2, r3
 8005ec8:	8bfb      	ldrh	r3, [r7, #30]
 8005eca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005ece:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005ed2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005ed6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eda:	b29b      	uxth	r3, r3
 8005edc:	8013      	strh	r3, [r2, #0]
 8005ede:	e1c9      	b.n	8006274 <USB_ActivateEndpoint+0x718>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	78db      	ldrb	r3, [r3, #3]
 8005ee4:	2b02      	cmp	r3, #2
 8005ee6:	d11e      	bne.n	8005f26 <USB_ActivateEndpoint+0x3ca>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8005ee8:	687a      	ldr	r2, [r7, #4]
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	781b      	ldrb	r3, [r3, #0]
 8005eee:	009b      	lsls	r3, r3, #2
 8005ef0:	4413      	add	r3, r2
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	b29b      	uxth	r3, r3
 8005ef6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005efa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005efe:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8005f02:	687a      	ldr	r2, [r7, #4]
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	781b      	ldrb	r3, [r3, #0]
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	441a      	add	r2, r3
 8005f0c:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8005f10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f18:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8005f1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f20:	b29b      	uxth	r3, r3
 8005f22:	8013      	strh	r3, [r2, #0]
 8005f24:	e01d      	b.n	8005f62 <USB_ActivateEndpoint+0x406>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8005f26:	687a      	ldr	r2, [r7, #4]
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	781b      	ldrb	r3, [r3, #0]
 8005f2c:	009b      	lsls	r3, r3, #2
 8005f2e:	4413      	add	r3, r2
 8005f30:	881b      	ldrh	r3, [r3, #0]
 8005f32:	b29b      	uxth	r3, r3
 8005f34:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8005f38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f3c:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 8005f40:	687a      	ldr	r2, [r7, #4]
 8005f42:	683b      	ldr	r3, [r7, #0]
 8005f44:	781b      	ldrb	r3, [r3, #0]
 8005f46:	009b      	lsls	r3, r3, #2
 8005f48:	441a      	add	r2, r3
 8005f4a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8005f4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8005f52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8005f56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	8013      	strh	r3, [r2, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	461a      	mov	r2, r3
 8005f70:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f72:	4413      	add	r3, r2
 8005f74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	781b      	ldrb	r3, [r3, #0]
 8005f7a:	00da      	lsls	r2, r3, #3
 8005f7c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f7e:	4413      	add	r3, r2
 8005f80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005f84:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	891b      	ldrh	r3, [r3, #8]
 8005f8a:	085b      	lsrs	r3, r3, #1
 8005f8c:	b29b      	uxth	r3, r3
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	b29a      	uxth	r2, r3
 8005f92:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f94:	801a      	strh	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	657b      	str	r3, [r7, #84]	; 0x54
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8005fa0:	b29b      	uxth	r3, r3
 8005fa2:	461a      	mov	r2, r3
 8005fa4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fa6:	4413      	add	r3, r2
 8005fa8:	657b      	str	r3, [r7, #84]	; 0x54
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	00da      	lsls	r2, r3, #3
 8005fb0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8005fb8:	653b      	str	r3, [r7, #80]	; 0x50
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	895b      	ldrh	r3, [r3, #10]
 8005fbe:	085b      	lsrs	r3, r3, #1
 8005fc0:	b29b      	uxth	r3, r3
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	b29a      	uxth	r2, r3
 8005fc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fc8:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	785b      	ldrb	r3, [r3, #1]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	f040 8093 	bne.w	80060fa <USB_ActivateEndpoint+0x59e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8005fd4:	687a      	ldr	r2, [r7, #4]
 8005fd6:	683b      	ldr	r3, [r7, #0]
 8005fd8:	781b      	ldrb	r3, [r3, #0]
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	881b      	ldrh	r3, [r3, #0]
 8005fe0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8005fe4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8005fe8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d01b      	beq.n	8006028 <USB_ActivateEndpoint+0x4cc>
 8005ff0:	687a      	ldr	r2, [r7, #4]
 8005ff2:	683b      	ldr	r3, [r7, #0]
 8005ff4:	781b      	ldrb	r3, [r3, #0]
 8005ff6:	009b      	lsls	r3, r3, #2
 8005ff8:	4413      	add	r3, r2
 8005ffa:	881b      	ldrh	r3, [r3, #0]
 8005ffc:	b29b      	uxth	r3, r3
 8005ffe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006002:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006006:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8006008:	687a      	ldr	r2, [r7, #4]
 800600a:	683b      	ldr	r3, [r7, #0]
 800600c:	781b      	ldrb	r3, [r3, #0]
 800600e:	009b      	lsls	r3, r3, #2
 8006010:	441a      	add	r2, r3
 8006012:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8006014:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006018:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800601c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006020:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006024:	b29b      	uxth	r3, r3
 8006026:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006028:	687a      	ldr	r2, [r7, #4]
 800602a:	683b      	ldr	r3, [r7, #0]
 800602c:	781b      	ldrb	r3, [r3, #0]
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	881b      	ldrh	r3, [r3, #0]
 8006034:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8006036:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006038:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800603c:	2b00      	cmp	r3, #0
 800603e:	d01b      	beq.n	8006078 <USB_ActivateEndpoint+0x51c>
 8006040:	687a      	ldr	r2, [r7, #4]
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	781b      	ldrb	r3, [r3, #0]
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	b29b      	uxth	r3, r3
 800604e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006052:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006056:	877b      	strh	r3, [r7, #58]	; 0x3a
 8006058:	687a      	ldr	r2, [r7, #4]
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	009b      	lsls	r3, r3, #2
 8006060:	441a      	add	r2, r3
 8006062:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006064:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006068:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800606c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006070:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006074:	b29b      	uxth	r3, r3
 8006076:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8006078:	687a      	ldr	r2, [r7, #4]
 800607a:	683b      	ldr	r3, [r7, #0]
 800607c:	781b      	ldrb	r3, [r3, #0]
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	881b      	ldrh	r3, [r3, #0]
 8006084:	b29b      	uxth	r3, r3
 8006086:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800608a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608e:	873b      	strh	r3, [r7, #56]	; 0x38
 8006090:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8006092:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006096:	873b      	strh	r3, [r7, #56]	; 0x38
 8006098:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800609a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800609e:	873b      	strh	r3, [r7, #56]	; 0x38
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	781b      	ldrb	r3, [r3, #0]
 80060a6:	009b      	lsls	r3, r3, #2
 80060a8:	441a      	add	r2, r3
 80060aa:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80060ac:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060b0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060bc:	b29b      	uxth	r3, r3
 80060be:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	781b      	ldrb	r3, [r3, #0]
 80060c6:	009b      	lsls	r3, r3, #2
 80060c8:	4413      	add	r3, r2
 80060ca:	881b      	ldrh	r3, [r3, #0]
 80060cc:	b29b      	uxth	r3, r3
 80060ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80060d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060d6:	86fb      	strh	r3, [r7, #54]	; 0x36
 80060d8:	687a      	ldr	r2, [r7, #4]
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	009b      	lsls	r3, r3, #2
 80060e0:	441a      	add	r2, r3
 80060e2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80060e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80060e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80060ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060f4:	b29b      	uxth	r3, r3
 80060f6:	8013      	strh	r3, [r2, #0]
 80060f8:	e0bc      	b.n	8006274 <USB_ActivateEndpoint+0x718>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80060fa:	687a      	ldr	r2, [r7, #4]
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	881b      	ldrh	r3, [r3, #0]
 8006106:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800610a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800610e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006112:	2b00      	cmp	r3, #0
 8006114:	d01d      	beq.n	8006152 <USB_ActivateEndpoint+0x5f6>
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	781b      	ldrb	r3, [r3, #0]
 800611c:	009b      	lsls	r3, r3, #2
 800611e:	4413      	add	r3, r2
 8006120:	881b      	ldrh	r3, [r3, #0]
 8006122:	b29b      	uxth	r3, r3
 8006124:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006128:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800612c:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8006130:	687a      	ldr	r2, [r7, #4]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	441a      	add	r2, r3
 800613a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800613e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006142:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006146:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800614a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800614e:	b29b      	uxth	r3, r3
 8006150:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006152:	687a      	ldr	r2, [r7, #4]
 8006154:	683b      	ldr	r3, [r7, #0]
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	009b      	lsls	r3, r3, #2
 800615a:	4413      	add	r3, r2
 800615c:	881b      	ldrh	r3, [r3, #0]
 800615e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8006162:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8006166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800616a:	2b00      	cmp	r3, #0
 800616c:	d01d      	beq.n	80061aa <USB_ActivateEndpoint+0x64e>
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	683b      	ldr	r3, [r7, #0]
 8006172:	781b      	ldrb	r3, [r3, #0]
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	4413      	add	r3, r2
 8006178:	881b      	ldrh	r3, [r3, #0]
 800617a:	b29b      	uxth	r3, r3
 800617c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006180:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006184:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8006188:	687a      	ldr	r2, [r7, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	009b      	lsls	r3, r3, #2
 8006190:	441a      	add	r2, r3
 8006192:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8006196:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800619a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800619e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061a2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80061a6:	b29b      	uxth	r3, r3
 80061a8:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	78db      	ldrb	r3, [r3, #3]
 80061ae:	2b01      	cmp	r3, #1
 80061b0:	d024      	beq.n	80061fc <USB_ActivateEndpoint+0x6a0>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80061b2:	687a      	ldr	r2, [r7, #4]
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	4413      	add	r3, r2
 80061bc:	881b      	ldrh	r3, [r3, #0]
 80061be:	b29b      	uxth	r3, r3
 80061c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80061c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061c8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80061cc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80061d0:	f083 0320 	eor.w	r3, r3, #32
 80061d4:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	009b      	lsls	r3, r3, #2
 80061e0:	441a      	add	r2, r3
 80061e2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80061e6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80061ea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80061ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80061f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80061f6:	b29b      	uxth	r3, r3
 80061f8:	8013      	strh	r3, [r2, #0]
 80061fa:	e01d      	b.n	8006238 <USB_ActivateEndpoint+0x6dc>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	683b      	ldr	r3, [r7, #0]
 8006200:	781b      	ldrb	r3, [r3, #0]
 8006202:	009b      	lsls	r3, r3, #2
 8006204:	4413      	add	r3, r2
 8006206:	881b      	ldrh	r3, [r3, #0]
 8006208:	b29b      	uxth	r3, r3
 800620a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800620e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006212:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8006216:	687a      	ldr	r2, [r7, #4]
 8006218:	683b      	ldr	r3, [r7, #0]
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	009b      	lsls	r3, r3, #2
 800621e:	441a      	add	r2, r3
 8006220:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8006224:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006228:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800622c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006234:	b29b      	uxth	r3, r3
 8006236:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	009b      	lsls	r3, r3, #2
 8006240:	4413      	add	r3, r2
 8006242:	881b      	ldrh	r3, [r3, #0]
 8006244:	b29b      	uxth	r3, r3
 8006246:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800624a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800624e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8006252:	687a      	ldr	r2, [r7, #4]
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	781b      	ldrb	r3, [r3, #0]
 8006258:	009b      	lsls	r3, r3, #2
 800625a:	441a      	add	r2, r3
 800625c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8006260:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006264:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006268:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800626c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006270:	b29b      	uxth	r3, r3
 8006272:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8006274:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8006278:	4618      	mov	r0, r3
 800627a:	3774      	adds	r7, #116	; 0x74
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr

08006284 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8006284:	b480      	push	{r7}
 8006286:	b08d      	sub	sp, #52	; 0x34
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800628e:	683b      	ldr	r3, [r7, #0]
 8006290:	7b1b      	ldrb	r3, [r3, #12]
 8006292:	2b00      	cmp	r3, #0
 8006294:	f040 808e 	bne.w	80063b4 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	785b      	ldrb	r3, [r3, #1]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d044      	beq.n	800632a <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80062a0:	687a      	ldr	r2, [r7, #4]
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	781b      	ldrb	r3, [r3, #0]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	4413      	add	r3, r2
 80062aa:	881b      	ldrh	r3, [r3, #0]
 80062ac:	81bb      	strh	r3, [r7, #12]
 80062ae:	89bb      	ldrh	r3, [r7, #12]
 80062b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062b4:	2b00      	cmp	r3, #0
 80062b6:	d01b      	beq.n	80062f0 <USB_DeactivateEndpoint+0x6c>
 80062b8:	687a      	ldr	r2, [r7, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	781b      	ldrb	r3, [r3, #0]
 80062be:	009b      	lsls	r3, r3, #2
 80062c0:	4413      	add	r3, r2
 80062c2:	881b      	ldrh	r3, [r3, #0]
 80062c4:	b29b      	uxth	r3, r3
 80062c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80062ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ce:	817b      	strh	r3, [r7, #10]
 80062d0:	687a      	ldr	r2, [r7, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	781b      	ldrb	r3, [r3, #0]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	441a      	add	r2, r3
 80062da:	897b      	ldrh	r3, [r7, #10]
 80062dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80062e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80062e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80062e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80062f0:	687a      	ldr	r2, [r7, #4]
 80062f2:	683b      	ldr	r3, [r7, #0]
 80062f4:	781b      	ldrb	r3, [r3, #0]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	881b      	ldrh	r3, [r3, #0]
 80062fc:	b29b      	uxth	r3, r3
 80062fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006302:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006306:	813b      	strh	r3, [r7, #8]
 8006308:	687a      	ldr	r2, [r7, #4]
 800630a:	683b      	ldr	r3, [r7, #0]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	009b      	lsls	r3, r3, #2
 8006310:	441a      	add	r2, r3
 8006312:	893b      	ldrh	r3, [r7, #8]
 8006314:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006318:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800631c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006320:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006324:	b29b      	uxth	r3, r3
 8006326:	8013      	strh	r3, [r2, #0]
 8006328:	e192      	b.n	8006650 <USB_DeactivateEndpoint+0x3cc>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800632a:	687a      	ldr	r2, [r7, #4]
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	781b      	ldrb	r3, [r3, #0]
 8006330:	009b      	lsls	r3, r3, #2
 8006332:	4413      	add	r3, r2
 8006334:	881b      	ldrh	r3, [r3, #0]
 8006336:	827b      	strh	r3, [r7, #18]
 8006338:	8a7b      	ldrh	r3, [r7, #18]
 800633a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800633e:	2b00      	cmp	r3, #0
 8006340:	d01b      	beq.n	800637a <USB_DeactivateEndpoint+0xf6>
 8006342:	687a      	ldr	r2, [r7, #4]
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	781b      	ldrb	r3, [r3, #0]
 8006348:	009b      	lsls	r3, r3, #2
 800634a:	4413      	add	r3, r2
 800634c:	881b      	ldrh	r3, [r3, #0]
 800634e:	b29b      	uxth	r3, r3
 8006350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006358:	823b      	strh	r3, [r7, #16]
 800635a:	687a      	ldr	r2, [r7, #4]
 800635c:	683b      	ldr	r3, [r7, #0]
 800635e:	781b      	ldrb	r3, [r3, #0]
 8006360:	009b      	lsls	r3, r3, #2
 8006362:	441a      	add	r2, r3
 8006364:	8a3b      	ldrh	r3, [r7, #16]
 8006366:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800636a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800636e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006372:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006376:	b29b      	uxth	r3, r3
 8006378:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800637a:	687a      	ldr	r2, [r7, #4]
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	781b      	ldrb	r3, [r3, #0]
 8006380:	009b      	lsls	r3, r3, #2
 8006382:	4413      	add	r3, r2
 8006384:	881b      	ldrh	r3, [r3, #0]
 8006386:	b29b      	uxth	r3, r3
 8006388:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800638c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006390:	81fb      	strh	r3, [r7, #14]
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	781b      	ldrb	r3, [r3, #0]
 8006398:	009b      	lsls	r3, r3, #2
 800639a:	441a      	add	r2, r3
 800639c:	89fb      	ldrh	r3, [r7, #14]
 800639e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80063a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80063ae:	b29b      	uxth	r3, r3
 80063b0:	8013      	strh	r3, [r2, #0]
 80063b2:	e14d      	b.n	8006650 <USB_DeactivateEndpoint+0x3cc>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	785b      	ldrb	r3, [r3, #1]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f040 80a5 	bne.w	8006508 <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	009b      	lsls	r3, r3, #2
 80063c6:	4413      	add	r3, r2
 80063c8:	881b      	ldrh	r3, [r3, #0]
 80063ca:	843b      	strh	r3, [r7, #32]
 80063cc:	8c3b      	ldrh	r3, [r7, #32]
 80063ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d01b      	beq.n	800640e <USB_DeactivateEndpoint+0x18a>
 80063d6:	687a      	ldr	r2, [r7, #4]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	781b      	ldrb	r3, [r3, #0]
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4413      	add	r3, r2
 80063e0:	881b      	ldrh	r3, [r3, #0]
 80063e2:	b29b      	uxth	r3, r3
 80063e4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80063e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ec:	83fb      	strh	r3, [r7, #30]
 80063ee:	687a      	ldr	r2, [r7, #4]
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	781b      	ldrb	r3, [r3, #0]
 80063f4:	009b      	lsls	r3, r3, #2
 80063f6:	441a      	add	r2, r3
 80063f8:	8bfb      	ldrh	r3, [r7, #30]
 80063fa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80063fe:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006402:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800640a:	b29b      	uxth	r3, r3
 800640c:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800640e:	687a      	ldr	r2, [r7, #4]
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	781b      	ldrb	r3, [r3, #0]
 8006414:	009b      	lsls	r3, r3, #2
 8006416:	4413      	add	r3, r2
 8006418:	881b      	ldrh	r3, [r3, #0]
 800641a:	83bb      	strh	r3, [r7, #28]
 800641c:	8bbb      	ldrh	r3, [r7, #28]
 800641e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006422:	2b00      	cmp	r3, #0
 8006424:	d01b      	beq.n	800645e <USB_DeactivateEndpoint+0x1da>
 8006426:	687a      	ldr	r2, [r7, #4]
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	781b      	ldrb	r3, [r3, #0]
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	881b      	ldrh	r3, [r3, #0]
 8006432:	b29b      	uxth	r3, r3
 8006434:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006438:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800643c:	837b      	strh	r3, [r7, #26]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	781b      	ldrb	r3, [r3, #0]
 8006444:	009b      	lsls	r3, r3, #2
 8006446:	441a      	add	r2, r3
 8006448:	8b7b      	ldrh	r3, [r7, #26]
 800644a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800644e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006452:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006456:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800645a:	b29b      	uxth	r3, r3
 800645c:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 800645e:	687a      	ldr	r2, [r7, #4]
 8006460:	683b      	ldr	r3, [r7, #0]
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	009b      	lsls	r3, r3, #2
 8006466:	4413      	add	r3, r2
 8006468:	881b      	ldrh	r3, [r3, #0]
 800646a:	b29b      	uxth	r3, r3
 800646c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006470:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006474:	833b      	strh	r3, [r7, #24]
 8006476:	687a      	ldr	r2, [r7, #4]
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	781b      	ldrb	r3, [r3, #0]
 800647c:	009b      	lsls	r3, r3, #2
 800647e:	441a      	add	r2, r3
 8006480:	8b3b      	ldrh	r3, [r7, #24]
 8006482:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006486:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800648a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800648e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006492:	b29b      	uxth	r3, r3
 8006494:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006496:	687a      	ldr	r2, [r7, #4]
 8006498:	683b      	ldr	r3, [r7, #0]
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	4413      	add	r3, r2
 80064a0:	881b      	ldrh	r3, [r3, #0]
 80064a2:	b29b      	uxth	r3, r3
 80064a4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80064a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064ac:	82fb      	strh	r3, [r7, #22]
 80064ae:	687a      	ldr	r2, [r7, #4]
 80064b0:	683b      	ldr	r3, [r7, #0]
 80064b2:	781b      	ldrb	r3, [r3, #0]
 80064b4:	009b      	lsls	r3, r3, #2
 80064b6:	441a      	add	r2, r3
 80064b8:	8afb      	ldrh	r3, [r7, #22]
 80064ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064c2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064ca:	b29b      	uxth	r3, r3
 80064cc:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	683b      	ldr	r3, [r7, #0]
 80064d2:	781b      	ldrb	r3, [r3, #0]
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4413      	add	r3, r2
 80064d8:	881b      	ldrh	r3, [r3, #0]
 80064da:	b29b      	uxth	r3, r3
 80064dc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80064e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80064e4:	82bb      	strh	r3, [r7, #20]
 80064e6:	687a      	ldr	r2, [r7, #4]
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	781b      	ldrb	r3, [r3, #0]
 80064ec:	009b      	lsls	r3, r3, #2
 80064ee:	441a      	add	r2, r3
 80064f0:	8abb      	ldrh	r3, [r7, #20]
 80064f2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80064f6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80064fa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80064fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006502:	b29b      	uxth	r3, r3
 8006504:	8013      	strh	r3, [r2, #0]
 8006506:	e0a3      	b.n	8006650 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	683b      	ldr	r3, [r7, #0]
 800650c:	781b      	ldrb	r3, [r3, #0]
 800650e:	009b      	lsls	r3, r3, #2
 8006510:	4413      	add	r3, r2
 8006512:	881b      	ldrh	r3, [r3, #0]
 8006514:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8006516:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006518:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800651c:	2b00      	cmp	r3, #0
 800651e:	d01b      	beq.n	8006558 <USB_DeactivateEndpoint+0x2d4>
 8006520:	687a      	ldr	r2, [r7, #4]
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	009b      	lsls	r3, r3, #2
 8006528:	4413      	add	r3, r2
 800652a:	881b      	ldrh	r3, [r3, #0]
 800652c:	b29b      	uxth	r3, r3
 800652e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006532:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006536:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8006538:	687a      	ldr	r2, [r7, #4]
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	781b      	ldrb	r3, [r3, #0]
 800653e:	009b      	lsls	r3, r3, #2
 8006540:	441a      	add	r2, r3
 8006542:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006544:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006548:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800654c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006554:	b29b      	uxth	r3, r3
 8006556:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8006558:	687a      	ldr	r2, [r7, #4]
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	781b      	ldrb	r3, [r3, #0]
 800655e:	009b      	lsls	r3, r3, #2
 8006560:	4413      	add	r3, r2
 8006562:	881b      	ldrh	r3, [r3, #0]
 8006564:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006566:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006568:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800656c:	2b00      	cmp	r3, #0
 800656e:	d01b      	beq.n	80065a8 <USB_DeactivateEndpoint+0x324>
 8006570:	687a      	ldr	r2, [r7, #4]
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	781b      	ldrb	r3, [r3, #0]
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	881b      	ldrh	r3, [r3, #0]
 800657c:	b29b      	uxth	r3, r3
 800657e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006582:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006586:	853b      	strh	r3, [r7, #40]	; 0x28
 8006588:	687a      	ldr	r2, [r7, #4]
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	781b      	ldrb	r3, [r3, #0]
 800658e:	009b      	lsls	r3, r3, #2
 8006590:	441a      	add	r2, r3
 8006592:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006594:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006598:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800659c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80065a0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80065a4:	b29b      	uxth	r3, r3
 80065a6:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 80065a8:	687a      	ldr	r2, [r7, #4]
 80065aa:	683b      	ldr	r3, [r7, #0]
 80065ac:	781b      	ldrb	r3, [r3, #0]
 80065ae:	009b      	lsls	r3, r3, #2
 80065b0:	4413      	add	r3, r2
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	b29b      	uxth	r3, r3
 80065b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065be:	84fb      	strh	r3, [r7, #38]	; 0x26
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	781b      	ldrb	r3, [r3, #0]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	441a      	add	r2, r3
 80065ca:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065cc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80065d0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80065d4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80065d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80065dc:	b29b      	uxth	r3, r3
 80065de:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80065e0:	687a      	ldr	r2, [r7, #4]
 80065e2:	683b      	ldr	r3, [r7, #0]
 80065e4:	781b      	ldrb	r3, [r3, #0]
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	881b      	ldrh	r3, [r3, #0]
 80065ec:	b29b      	uxth	r3, r3
 80065ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065f2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80065f6:	84bb      	strh	r3, [r7, #36]	; 0x24
 80065f8:	687a      	ldr	r2, [r7, #4]
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	009b      	lsls	r3, r3, #2
 8006600:	441a      	add	r2, r3
 8006602:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006604:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006608:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800660c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006614:	b29b      	uxth	r3, r3
 8006616:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8006618:	687a      	ldr	r2, [r7, #4]
 800661a:	683b      	ldr	r3, [r7, #0]
 800661c:	781b      	ldrb	r3, [r3, #0]
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4413      	add	r3, r2
 8006622:	881b      	ldrh	r3, [r3, #0]
 8006624:	b29b      	uxth	r3, r3
 8006626:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800662a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800662e:	847b      	strh	r3, [r7, #34]	; 0x22
 8006630:	687a      	ldr	r2, [r7, #4]
 8006632:	683b      	ldr	r3, [r7, #0]
 8006634:	781b      	ldrb	r3, [r3, #0]
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	441a      	add	r2, r3
 800663a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800663c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006640:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006644:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006648:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800664c:	b29b      	uxth	r3, r3
 800664e:	8013      	strh	r3, [r2, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8006650:	2300      	movs	r3, #0
}
 8006652:	4618      	mov	r0, r3
 8006654:	3734      	adds	r7, #52	; 0x34
 8006656:	46bd      	mov	sp, r7
 8006658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665c:	4770      	bx	lr

0800665e <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b0c2      	sub	sp, #264	; 0x108
 8006662:	af00      	add	r7, sp, #0
 8006664:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006668:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800666c:	6018      	str	r0, [r3, #0]
 800666e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006676:	6019      	str	r1, [r3, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8006678:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800667c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	785b      	ldrb	r3, [r3, #1]
 8006684:	2b01      	cmp	r3, #1
 8006686:	f040 867b 	bne.w	8007380 <USB_EPStartXfer+0xd22>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 800668a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800668e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	699a      	ldr	r2, [r3, #24]
 8006696:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800669a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	429a      	cmp	r2, r3
 80066a4:	d908      	bls.n	80066b8 <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 80066a6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066aa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	691b      	ldr	r3, [r3, #16]
 80066b2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80066b6:	e007      	b.n	80066c8 <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 80066b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	699b      	ldr	r3, [r3, #24]
 80066c4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 80066c8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066cc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	7b1b      	ldrb	r3, [r3, #12]
 80066d4:	2b00      	cmp	r3, #0
 80066d6:	d13a      	bne.n	800674e <USB_EPStartXfer+0xf0>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 80066d8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	6959      	ldr	r1, [r3, #20]
 80066e4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80066e8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	88da      	ldrh	r2, [r3, #6]
 80066f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	f507 7084 	add.w	r0, r7, #264	; 0x108
 80066fa:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 80066fe:	6800      	ldr	r0, [r0, #0]
 8006700:	f001 fc1d 	bl	8007f3e <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006708:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	613b      	str	r3, [r7, #16]
 8006710:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006714:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800671e:	b29b      	uxth	r3, r3
 8006720:	461a      	mov	r2, r3
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4413      	add	r3, r2
 8006726:	613b      	str	r3, [r7, #16]
 8006728:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800672c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	781b      	ldrb	r3, [r3, #0]
 8006734:	00da      	lsls	r2, r3, #3
 8006736:	693b      	ldr	r3, [r7, #16]
 8006738:	4413      	add	r3, r2
 800673a:	f203 4302 	addw	r3, r3, #1026	; 0x402
 800673e:	60fb      	str	r3, [r7, #12]
 8006740:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	801a      	strh	r2, [r3, #0]
 800674a:	f000 bde3 	b.w	8007314 <USB_EPStartXfer+0xcb6>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 800674e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006752:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	78db      	ldrb	r3, [r3, #3]
 800675a:	2b02      	cmp	r3, #2
 800675c:	f040 843a 	bne.w	8006fd4 <USB_EPStartXfer+0x976>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8006760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	6a1a      	ldr	r2, [r3, #32]
 800676c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006770:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	429a      	cmp	r2, r3
 800677a:	f240 83b7 	bls.w	8006eec <USB_EPStartXfer+0x88e>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 800677e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006782:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800678c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	781b      	ldrb	r3, [r3, #0]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	881b      	ldrh	r3, [r3, #0]
 800679a:	b29b      	uxth	r3, r3
 800679c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067a4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 80067a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067ac:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067b6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	009b      	lsls	r3, r3, #2
 80067c0:	441a      	add	r2, r3
 80067c2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80067c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80067ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80067ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80067d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80067da:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067de:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	6a1a      	ldr	r2, [r3, #32]
 80067e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80067ea:	1ad2      	subs	r2, r2, r3
 80067ec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067f0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 80067f8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80067fc:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006800:	681a      	ldr	r2, [r3, #0]
 8006802:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006806:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	009b      	lsls	r3, r3, #2
 8006810:	4413      	add	r3, r2
 8006812:	881b      	ldrh	r3, [r3, #0]
 8006814:	b29b      	uxth	r3, r3
 8006816:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800681a:	2b00      	cmp	r3, #0
 800681c:	f000 81b3 	beq.w	8006b86 <USB_EPStartXfer+0x528>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006820:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006824:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	633b      	str	r3, [r7, #48]	; 0x30
 800682c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006830:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	785b      	ldrb	r3, [r3, #1]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d16d      	bne.n	8006918 <USB_EPStartXfer+0x2ba>
 800683c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006840:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	62bb      	str	r3, [r7, #40]	; 0x28
 8006848:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800684c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006856:	b29b      	uxth	r3, r3
 8006858:	461a      	mov	r2, r3
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	4413      	add	r3, r2
 800685e:	62bb      	str	r3, [r7, #40]	; 0x28
 8006860:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006864:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	781b      	ldrb	r3, [r3, #0]
 800686c:	00da      	lsls	r2, r3, #3
 800686e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006870:	4413      	add	r3, r2
 8006872:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006876:	627b      	str	r3, [r7, #36]	; 0x24
 8006878:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800687c:	2b3e      	cmp	r3, #62	; 0x3e
 800687e:	d91c      	bls.n	80068ba <USB_EPStartXfer+0x25c>
 8006880:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006884:	095b      	lsrs	r3, r3, #5
 8006886:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800688a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800688e:	f003 031f 	and.w	r3, r3, #31
 8006892:	2b00      	cmp	r3, #0
 8006894:	d104      	bne.n	80068a0 <USB_EPStartXfer+0x242>
 8006896:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800689a:	3b01      	subs	r3, #1
 800689c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068a0:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80068a4:	b29b      	uxth	r3, r3
 80068a6:	029b      	lsls	r3, r3, #10
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068b2:	b29a      	uxth	r2, r3
 80068b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b6:	801a      	strh	r2, [r3, #0]
 80068b8:	e053      	b.n	8006962 <USB_EPStartXfer+0x304>
 80068ba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d112      	bne.n	80068e8 <USB_EPStartXfer+0x28a>
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	881b      	ldrh	r3, [r3, #0]
 80068c6:	b29b      	uxth	r3, r3
 80068c8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068cc:	b29a      	uxth	r2, r3
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	801a      	strh	r2, [r3, #0]
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	881b      	ldrh	r3, [r3, #0]
 80068d6:	b29b      	uxth	r3, r3
 80068d8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068dc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e4:	801a      	strh	r2, [r3, #0]
 80068e6:	e03c      	b.n	8006962 <USB_EPStartXfer+0x304>
 80068e8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068ec:	085b      	lsrs	r3, r3, #1
 80068ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80068f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d004      	beq.n	8006908 <USB_EPStartXfer+0x2aa>
 80068fe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8006902:	3301      	adds	r3, #1
 8006904:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8006908:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800690c:	b29b      	uxth	r3, r3
 800690e:	029b      	lsls	r3, r3, #10
 8006910:	b29a      	uxth	r2, r3
 8006912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006914:	801a      	strh	r2, [r3, #0]
 8006916:	e024      	b.n	8006962 <USB_EPStartXfer+0x304>
 8006918:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800691c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	785b      	ldrb	r3, [r3, #1]
 8006924:	2b01      	cmp	r3, #1
 8006926:	d11c      	bne.n	8006962 <USB_EPStartXfer+0x304>
 8006928:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800692c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006936:	b29b      	uxth	r3, r3
 8006938:	461a      	mov	r2, r3
 800693a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800693c:	4413      	add	r3, r2
 800693e:	633b      	str	r3, [r7, #48]	; 0x30
 8006940:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006944:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	781b      	ldrb	r3, [r3, #0]
 800694c:	00da      	lsls	r2, r3, #3
 800694e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006950:	4413      	add	r3, r2
 8006952:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006956:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006958:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800695c:	b29a      	uxth	r2, r3
 800695e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006960:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006962:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006966:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	895b      	ldrh	r3, [r3, #10]
 800696e:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006972:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006976:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	6959      	ldr	r1, [r3, #20]
 800697e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006982:	b29b      	uxth	r3, r3
 8006984:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006988:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800698c:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006990:	6800      	ldr	r0, [r0, #0]
 8006992:	f001 fad4 	bl	8007f3e <USB_WritePMA>
            ep->xfer_buff += len;
 8006996:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800699a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	695a      	ldr	r2, [r3, #20]
 80069a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069a6:	441a      	add	r2, r3
 80069a8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069ac:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 80069b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6a1a      	ldr	r2, [r3, #32]
 80069c0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069c4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	691b      	ldr	r3, [r3, #16]
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d90f      	bls.n	80069f0 <USB_EPStartXfer+0x392>
            {
              ep->xfer_len_db -= len;
 80069d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	6a1a      	ldr	r2, [r3, #32]
 80069dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80069e0:	1ad2      	subs	r2, r2, r3
 80069e2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069e6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	621a      	str	r2, [r3, #32]
 80069ee:	e00e      	b.n	8006a0e <USB_EPStartXfer+0x3b0>
            }
            else
            {
              len = ep->xfer_len_db;
 80069f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80069f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	6a1b      	ldr	r3, [r3, #32]
 80069fc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006a00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a04:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006a0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	785b      	ldrb	r3, [r3, #1]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d16d      	bne.n	8006afa <USB_EPStartXfer+0x49c>
 8006a1e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a22:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	61bb      	str	r3, [r7, #24]
 8006a2a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a2e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a38:	b29b      	uxth	r3, r3
 8006a3a:	461a      	mov	r2, r3
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	4413      	add	r3, r2
 8006a40:	61bb      	str	r3, [r7, #24]
 8006a42:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006a46:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	781b      	ldrb	r3, [r3, #0]
 8006a4e:	00da      	lsls	r2, r3, #3
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	4413      	add	r3, r2
 8006a54:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006a58:	617b      	str	r3, [r7, #20]
 8006a5a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a5e:	2b3e      	cmp	r3, #62	; 0x3e
 8006a60:	d91c      	bls.n	8006a9c <USB_EPStartXfer+0x43e>
 8006a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a66:	095b      	lsrs	r3, r3, #5
 8006a68:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006a70:	f003 031f 	and.w	r3, r3, #31
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d104      	bne.n	8006a82 <USB_EPStartXfer+0x424>
 8006a78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a7c:	3b01      	subs	r3, #1
 8006a7e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006a82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	029b      	lsls	r3, r3, #10
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006a90:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	801a      	strh	r2, [r3, #0]
 8006a9a:	e059      	b.n	8006b50 <USB_EPStartXfer+0x4f2>
 8006a9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006aa0:	2b00      	cmp	r3, #0
 8006aa2:	d112      	bne.n	8006aca <USB_EPStartXfer+0x46c>
 8006aa4:	697b      	ldr	r3, [r7, #20]
 8006aa6:	881b      	ldrh	r3, [r3, #0]
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	697b      	ldr	r3, [r7, #20]
 8006ab2:	801a      	strh	r2, [r3, #0]
 8006ab4:	697b      	ldr	r3, [r7, #20]
 8006ab6:	881b      	ldrh	r3, [r3, #0]
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006abe:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ac2:	b29a      	uxth	r2, r3
 8006ac4:	697b      	ldr	r3, [r7, #20]
 8006ac6:	801a      	strh	r2, [r3, #0]
 8006ac8:	e042      	b.n	8006b50 <USB_EPStartXfer+0x4f2>
 8006aca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ace:	085b      	lsrs	r3, r3, #1
 8006ad0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ad8:	f003 0301 	and.w	r3, r3, #1
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d004      	beq.n	8006aea <USB_EPStartXfer+0x48c>
 8006ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8006aea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	029b      	lsls	r3, r3, #10
 8006af2:	b29a      	uxth	r2, r3
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	801a      	strh	r2, [r3, #0]
 8006af8:	e02a      	b.n	8006b50 <USB_EPStartXfer+0x4f2>
 8006afa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006afe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	785b      	ldrb	r3, [r3, #1]
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d122      	bne.n	8006b50 <USB_EPStartXfer+0x4f2>
 8006b0a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b0e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	623b      	str	r3, [r7, #32]
 8006b16:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b1a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	461a      	mov	r2, r3
 8006b28:	6a3b      	ldr	r3, [r7, #32]
 8006b2a:	4413      	add	r3, r2
 8006b2c:	623b      	str	r3, [r7, #32]
 8006b2e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b32:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	781b      	ldrb	r3, [r3, #0]
 8006b3a:	00da      	lsls	r2, r3, #3
 8006b3c:	6a3b      	ldr	r3, [r7, #32]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006b44:	61fb      	str	r3, [r7, #28]
 8006b46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b4a:	b29a      	uxth	r2, r3
 8006b4c:	69fb      	ldr	r3, [r7, #28]
 8006b4e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006b50:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b54:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	891b      	ldrh	r3, [r3, #8]
 8006b5c:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006b60:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b64:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	6959      	ldr	r1, [r3, #20]
 8006b6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006b76:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006b7a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006b7e:	6800      	ldr	r0, [r0, #0]
 8006b80:	f001 f9dd 	bl	8007f3e <USB_WritePMA>
 8006b84:	e3c6      	b.n	8007314 <USB_EPStartXfer+0xcb6>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8006b86:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b8a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	785b      	ldrb	r3, [r3, #1]
 8006b92:	2b00      	cmp	r3, #0
 8006b94:	d16d      	bne.n	8006c72 <USB_EPStartXfer+0x614>
 8006b96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006b9a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ba2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ba6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bb6:	4413      	add	r3, r2
 8006bb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8006bba:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006bbe:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	781b      	ldrb	r3, [r3, #0]
 8006bc6:	00da      	lsls	r2, r3, #3
 8006bc8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bca:	4413      	add	r3, r2
 8006bcc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006bd0:	647b      	str	r3, [r7, #68]	; 0x44
 8006bd2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bd6:	2b3e      	cmp	r3, #62	; 0x3e
 8006bd8:	d91c      	bls.n	8006c14 <USB_EPStartXfer+0x5b6>
 8006bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006bde:	095b      	lsrs	r3, r3, #5
 8006be0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006be4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006be8:	f003 031f 	and.w	r3, r3, #31
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <USB_EPStartXfer+0x59c>
 8006bf0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006bfa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006bfe:	b29b      	uxth	r3, r3
 8006c00:	029b      	lsls	r3, r3, #10
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c0c:	b29a      	uxth	r2, r3
 8006c0e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c10:	801a      	strh	r2, [r3, #0]
 8006c12:	e059      	b.n	8006cc8 <USB_EPStartXfer+0x66a>
 8006c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d112      	bne.n	8006c42 <USB_EPStartXfer+0x5e4>
 8006c1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c1e:	881b      	ldrh	r3, [r3, #0]
 8006c20:	b29b      	uxth	r3, r3
 8006c22:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2a:	801a      	strh	r2, [r3, #0]
 8006c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c2e:	881b      	ldrh	r3, [r3, #0]
 8006c30:	b29b      	uxth	r3, r3
 8006c32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006c36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006c3a:	b29a      	uxth	r2, r3
 8006c3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c3e:	801a      	strh	r2, [r3, #0]
 8006c40:	e042      	b.n	8006cc8 <USB_EPStartXfer+0x66a>
 8006c42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c46:	085b      	lsrs	r3, r3, #1
 8006c48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006c50:	f003 0301 	and.w	r3, r3, #1
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <USB_EPStartXfer+0x604>
 8006c58:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8006c62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006c66:	b29b      	uxth	r3, r3
 8006c68:	029b      	lsls	r3, r3, #10
 8006c6a:	b29a      	uxth	r2, r3
 8006c6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006c6e:	801a      	strh	r2, [r3, #0]
 8006c70:	e02a      	b.n	8006cc8 <USB_EPStartXfer+0x66a>
 8006c72:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c76:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	785b      	ldrb	r3, [r3, #1]
 8006c7e:	2b01      	cmp	r3, #1
 8006c80:	d122      	bne.n	8006cc8 <USB_EPStartXfer+0x66a>
 8006c82:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c86:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	653b      	str	r3, [r7, #80]	; 0x50
 8006c8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006c92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	461a      	mov	r2, r3
 8006ca0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ca2:	4413      	add	r3, r2
 8006ca4:	653b      	str	r3, [r7, #80]	; 0x50
 8006ca6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006caa:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	00da      	lsls	r2, r3, #3
 8006cb4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cb6:	4413      	add	r3, r2
 8006cb8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006cbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006cc2:	b29a      	uxth	r2, r3
 8006cc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006cc6:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8006cc8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ccc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	891b      	ldrh	r3, [r3, #8]
 8006cd4:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006cd8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006cdc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6959      	ldr	r1, [r3, #20]
 8006ce4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006cee:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006cf2:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006cf6:	6800      	ldr	r0, [r0, #0]
 8006cf8:	f001 f921 	bl	8007f3e <USB_WritePMA>
            ep->xfer_buff += len;
 8006cfc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d00:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	695a      	ldr	r2, [r3, #20]
 8006d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d0c:	441a      	add	r2, r3
 8006d0e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d12:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8006d1a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d1e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6a1a      	ldr	r2, [r3, #32]
 8006d26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d2a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	429a      	cmp	r2, r3
 8006d34:	d90f      	bls.n	8006d56 <USB_EPStartXfer+0x6f8>
            {
              ep->xfer_len_db -= len;
 8006d36:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d3a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	6a1a      	ldr	r2, [r3, #32]
 8006d42:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006d46:	1ad2      	subs	r2, r2, r3
 8006d48:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d4c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	621a      	str	r2, [r3, #32]
 8006d54:	e00e      	b.n	8006d74 <USB_EPStartXfer+0x716>
            }
            else
            {
              len = ep->xfer_len_db;
 8006d56:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d5a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
              ep->xfer_len_db = 0U;
 8006d66:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d6a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2200      	movs	r2, #0
 8006d72:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8006d74:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d78:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	643b      	str	r3, [r7, #64]	; 0x40
 8006d80:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d84:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	785b      	ldrb	r3, [r3, #1]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d16d      	bne.n	8006e6c <USB_EPStartXfer+0x80e>
 8006d90:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006d94:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8006d9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006da0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006daa:	b29b      	uxth	r3, r3
 8006dac:	461a      	mov	r2, r3
 8006dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006db0:	4413      	add	r3, r2
 8006db2:	63bb      	str	r3, [r7, #56]	; 0x38
 8006db4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006db8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	00da      	lsls	r2, r3, #3
 8006dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006dca:	637b      	str	r3, [r7, #52]	; 0x34
 8006dcc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd0:	2b3e      	cmp	r3, #62	; 0x3e
 8006dd2:	d91c      	bls.n	8006e0e <USB_EPStartXfer+0x7b0>
 8006dd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006dd8:	095b      	lsrs	r3, r3, #5
 8006dda:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006dde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <USB_EPStartXfer+0x796>
 8006dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006dee:	3b01      	subs	r3, #1
 8006df0:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006df4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	029b      	lsls	r3, r3, #10
 8006dfc:	b29b      	uxth	r3, r3
 8006dfe:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e02:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e06:	b29a      	uxth	r2, r3
 8006e08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e0a:	801a      	strh	r2, [r3, #0]
 8006e0c:	e053      	b.n	8006eb6 <USB_EPStartXfer+0x858>
 8006e0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d112      	bne.n	8006e3c <USB_EPStartXfer+0x7de>
 8006e16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e18:	881b      	ldrh	r3, [r3, #0]
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006e20:	b29a      	uxth	r2, r3
 8006e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e24:	801a      	strh	r2, [r3, #0]
 8006e26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e28:	881b      	ldrh	r3, [r3, #0]
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006e30:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006e34:	b29a      	uxth	r2, r3
 8006e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e38:	801a      	strh	r2, [r3, #0]
 8006e3a:	e03c      	b.n	8006eb6 <USB_EPStartXfer+0x858>
 8006e3c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e40:	085b      	lsrs	r3, r3, #1
 8006e42:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e46:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006e4a:	f003 0301 	and.w	r3, r3, #1
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d004      	beq.n	8006e5c <USB_EPStartXfer+0x7fe>
 8006e52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e56:	3301      	adds	r3, #1
 8006e58:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8006e5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006e60:	b29b      	uxth	r3, r3
 8006e62:	029b      	lsls	r3, r3, #10
 8006e64:	b29a      	uxth	r2, r3
 8006e66:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e68:	801a      	strh	r2, [r3, #0]
 8006e6a:	e024      	b.n	8006eb6 <USB_EPStartXfer+0x858>
 8006e6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e70:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	785b      	ldrb	r3, [r3, #1]
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d11c      	bne.n	8006eb6 <USB_EPStartXfer+0x858>
 8006e7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e80:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006e8a:	b29b      	uxth	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e90:	4413      	add	r3, r2
 8006e92:	643b      	str	r3, [r7, #64]	; 0x40
 8006e94:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006e98:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	781b      	ldrb	r3, [r3, #0]
 8006ea0:	00da      	lsls	r2, r3, #3
 8006ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8006eaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006eac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006eb0:	b29a      	uxth	r2, r3
 8006eb2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eb4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8006eb6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	895b      	ldrh	r3, [r3, #10]
 8006ec2:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006ec6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006eca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6959      	ldr	r1, [r3, #20]
 8006ed2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006ed6:	b29b      	uxth	r3, r3
 8006ed8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006edc:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006ee0:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006ee4:	6800      	ldr	r0, [r0, #0]
 8006ee6:	f001 f82a 	bl	8007f3e <USB_WritePMA>
 8006eea:	e213      	b.n	8007314 <USB_EPStartXfer+0xcb6>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 8006eec:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ef0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	6a1b      	ldr	r3, [r3, #32]
 8006ef8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8006efc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f00:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f0a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	009b      	lsls	r3, r3, #2
 8006f14:	4413      	add	r3, r2
 8006f16:	881b      	ldrh	r3, [r3, #0]
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 8006f1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f22:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 8006f26:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f2a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f2e:	681a      	ldr	r2, [r3, #0]
 8006f30:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f34:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	009b      	lsls	r3, r3, #2
 8006f3e:	441a      	add	r2, r3
 8006f40:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8006f44:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006f48:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006f4c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006f50:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8006f58:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f5c:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f64:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f68:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f72:	b29b      	uxth	r3, r3
 8006f74:	461a      	mov	r2, r3
 8006f76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f78:	4413      	add	r3, r2
 8006f7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006f7c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006f80:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	781b      	ldrb	r3, [r3, #0]
 8006f88:	00da      	lsls	r2, r3, #3
 8006f8a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f8c:	4413      	add	r3, r2
 8006f8e:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8006f92:	65bb      	str	r3, [r7, #88]	; 0x58
 8006f94:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006f98:	b29a      	uxth	r2, r3
 8006f9a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f9c:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8006f9e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fa2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	891b      	ldrh	r3, [r3, #8]
 8006faa:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8006fae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fb2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6959      	ldr	r1, [r3, #20]
 8006fba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fbe:	b29b      	uxth	r3, r3
 8006fc0:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8006fc4:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8006fc8:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 8006fcc:	6800      	ldr	r0, [r0, #0]
 8006fce:	f000 ffb6 	bl	8007f3e <USB_WritePMA>
 8006fd2:	e19f      	b.n	8007314 <USB_EPStartXfer+0xcb6>
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8006fd4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fd8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6a1a      	ldr	r2, [r3, #32]
 8006fe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006fe4:	1ad2      	subs	r2, r2, r3
 8006fe6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006fea:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8006ff2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8006ff6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007000:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	781b      	ldrb	r3, [r3, #0]
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	4413      	add	r3, r2
 800700c:	881b      	ldrh	r3, [r3, #0]
 800700e:	b29b      	uxth	r3, r3
 8007010:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007014:	2b00      	cmp	r3, #0
 8007016:	f000 80bc 	beq.w	8007192 <USB_EPStartXfer+0xb34>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800701a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800701e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	673b      	str	r3, [r7, #112]	; 0x70
 8007026:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800702a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	785b      	ldrb	r3, [r3, #1]
 8007032:	2b00      	cmp	r3, #0
 8007034:	d16d      	bne.n	8007112 <USB_EPStartXfer+0xab4>
 8007036:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800703a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	66bb      	str	r3, [r7, #104]	; 0x68
 8007042:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007046:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007050:	b29b      	uxth	r3, r3
 8007052:	461a      	mov	r2, r3
 8007054:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007056:	4413      	add	r3, r2
 8007058:	66bb      	str	r3, [r7, #104]	; 0x68
 800705a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800705e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	781b      	ldrb	r3, [r3, #0]
 8007066:	00da      	lsls	r2, r3, #3
 8007068:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800706a:	4413      	add	r3, r2
 800706c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007070:	667b      	str	r3, [r7, #100]	; 0x64
 8007072:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007076:	2b3e      	cmp	r3, #62	; 0x3e
 8007078:	d91c      	bls.n	80070b4 <USB_EPStartXfer+0xa56>
 800707a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800707e:	095b      	lsrs	r3, r3, #5
 8007080:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007084:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007088:	f003 031f 	and.w	r3, r3, #31
 800708c:	2b00      	cmp	r3, #0
 800708e:	d104      	bne.n	800709a <USB_EPStartXfer+0xa3c>
 8007090:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007094:	3b01      	subs	r3, #1
 8007096:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800709a:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800709e:	b29b      	uxth	r3, r3
 80070a0:	029b      	lsls	r3, r3, #10
 80070a2:	b29b      	uxth	r3, r3
 80070a4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070a8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070b0:	801a      	strh	r2, [r3, #0]
 80070b2:	e053      	b.n	800715c <USB_EPStartXfer+0xafe>
 80070b4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d112      	bne.n	80070e2 <USB_EPStartXfer+0xa84>
 80070bc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070be:	881b      	ldrh	r3, [r3, #0]
 80070c0:	b29b      	uxth	r3, r3
 80070c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ca:	801a      	strh	r2, [r3, #0]
 80070cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070ce:	881b      	ldrh	r3, [r3, #0]
 80070d0:	b29b      	uxth	r3, r3
 80070d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80070d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80070da:	b29a      	uxth	r2, r3
 80070dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80070de:	801a      	strh	r2, [r3, #0]
 80070e0:	e03c      	b.n	800715c <USB_EPStartXfer+0xafe>
 80070e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070e6:	085b      	lsrs	r3, r3, #1
 80070e8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80070ec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80070f0:	f003 0301 	and.w	r3, r3, #1
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d004      	beq.n	8007102 <USB_EPStartXfer+0xaa4>
 80070f8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80070fc:	3301      	adds	r3, #1
 80070fe:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007102:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007106:	b29b      	uxth	r3, r3
 8007108:	029b      	lsls	r3, r3, #10
 800710a:	b29a      	uxth	r2, r3
 800710c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800710e:	801a      	strh	r2, [r3, #0]
 8007110:	e024      	b.n	800715c <USB_EPStartXfer+0xafe>
 8007112:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007116:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	785b      	ldrb	r3, [r3, #1]
 800711e:	2b01      	cmp	r3, #1
 8007120:	d11c      	bne.n	800715c <USB_EPStartXfer+0xafe>
 8007122:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007126:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007130:	b29b      	uxth	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007136:	4413      	add	r3, r2
 8007138:	673b      	str	r3, [r7, #112]	; 0x70
 800713a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800713e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	781b      	ldrb	r3, [r3, #0]
 8007146:	00da      	lsls	r2, r3, #3
 8007148:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800714a:	4413      	add	r3, r2
 800714c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007150:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007152:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007156:	b29a      	uxth	r2, r3
 8007158:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800715a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800715c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007160:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	895b      	ldrh	r3, [r3, #10]
 8007168:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800716c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007170:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	6959      	ldr	r1, [r3, #20]
 8007178:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800717c:	b29b      	uxth	r3, r3
 800717e:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007182:	f507 7084 	add.w	r0, r7, #264	; 0x108
 8007186:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800718a:	6800      	ldr	r0, [r0, #0]
 800718c:	f000 fed7 	bl	8007f3e <USB_WritePMA>
 8007190:	e0c0      	b.n	8007314 <USB_EPStartXfer+0xcb6>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8007192:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007196:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	785b      	ldrb	r3, [r3, #1]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d16d      	bne.n	800727e <USB_EPStartXfer+0xc20>
 80071a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071b2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80071bc:	b29b      	uxth	r3, r3
 80071be:	461a      	mov	r2, r3
 80071c0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071c2:	4413      	add	r3, r2
 80071c4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80071c6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80071ca:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	00da      	lsls	r2, r3, #3
 80071d4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80071d6:	4413      	add	r3, r2
 80071d8:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80071dc:	67bb      	str	r3, [r7, #120]	; 0x78
 80071de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071e2:	2b3e      	cmp	r3, #62	; 0x3e
 80071e4:	d91c      	bls.n	8007220 <USB_EPStartXfer+0xbc2>
 80071e6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071ea:	095b      	lsrs	r3, r3, #5
 80071ec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80071f0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d104      	bne.n	8007206 <USB_EPStartXfer+0xba8>
 80071fc:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007200:	3b01      	subs	r3, #1
 8007202:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007206:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800720a:	b29b      	uxth	r3, r3
 800720c:	029b      	lsls	r3, r3, #10
 800720e:	b29b      	uxth	r3, r3
 8007210:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007214:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007218:	b29a      	uxth	r2, r3
 800721a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800721c:	801a      	strh	r2, [r3, #0]
 800721e:	e05f      	b.n	80072e0 <USB_EPStartXfer+0xc82>
 8007220:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007224:	2b00      	cmp	r3, #0
 8007226:	d112      	bne.n	800724e <USB_EPStartXfer+0xbf0>
 8007228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800722a:	881b      	ldrh	r3, [r3, #0]
 800722c:	b29b      	uxth	r3, r3
 800722e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007232:	b29a      	uxth	r2, r3
 8007234:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007236:	801a      	strh	r2, [r3, #0]
 8007238:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800723a:	881b      	ldrh	r3, [r3, #0]
 800723c:	b29b      	uxth	r3, r3
 800723e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007242:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007246:	b29a      	uxth	r2, r3
 8007248:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800724a:	801a      	strh	r2, [r3, #0]
 800724c:	e048      	b.n	80072e0 <USB_EPStartXfer+0xc82>
 800724e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007252:	085b      	lsrs	r3, r3, #1
 8007254:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007258:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800725c:	f003 0301 	and.w	r3, r3, #1
 8007260:	2b00      	cmp	r3, #0
 8007262:	d004      	beq.n	800726e <USB_EPStartXfer+0xc10>
 8007264:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007268:	3301      	adds	r3, #1
 800726a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800726e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007272:	b29b      	uxth	r3, r3
 8007274:	029b      	lsls	r3, r3, #10
 8007276:	b29a      	uxth	r2, r3
 8007278:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800727a:	801a      	strh	r2, [r3, #0]
 800727c:	e030      	b.n	80072e0 <USB_EPStartXfer+0xc82>
 800727e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007282:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	785b      	ldrb	r3, [r3, #1]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d128      	bne.n	80072e0 <USB_EPStartXfer+0xc82>
 800728e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007292:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800729c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072a0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072aa:	b29b      	uxth	r3, r3
 80072ac:	461a      	mov	r2, r3
 80072ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072b2:	4413      	add	r3, r2
 80072b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80072b8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072bc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	781b      	ldrb	r3, [r3, #0]
 80072c4:	00da      	lsls	r2, r3, #3
 80072c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80072ca:	4413      	add	r3, r2
 80072cc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80072d0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80072d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80072d8:	b29a      	uxth	r2, r3
 80072da:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80072de:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 80072e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	891b      	ldrh	r3, [r3, #8]
 80072ec:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80072f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80072f4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	6959      	ldr	r1, [r3, #20]
 80072fc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007300:	b29b      	uxth	r3, r3
 8007302:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007306:	f507 7084 	add.w	r0, r7, #264	; 0x108
 800730a:	f5a0 7082 	sub.w	r0, r0, #260	; 0x104
 800730e:	6800      	ldr	r0, [r0, #0]
 8007310:	f000 fe15 	bl	8007f3e <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8007314:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007318:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007322:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	009b      	lsls	r3, r3, #2
 800732c:	4413      	add	r3, r2
 800732e:	881b      	ldrh	r3, [r3, #0]
 8007330:	b29b      	uxth	r3, r3
 8007332:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007336:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800733a:	817b      	strh	r3, [r7, #10]
 800733c:	897b      	ldrh	r3, [r7, #10]
 800733e:	f083 0310 	eor.w	r3, r3, #16
 8007342:	817b      	strh	r3, [r7, #10]
 8007344:	897b      	ldrh	r3, [r7, #10]
 8007346:	f083 0320 	eor.w	r3, r3, #32
 800734a:	817b      	strh	r3, [r7, #10]
 800734c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007350:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007354:	681a      	ldr	r2, [r3, #0]
 8007356:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800735a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	009b      	lsls	r3, r3, #2
 8007364:	441a      	add	r2, r3
 8007366:	897b      	ldrh	r3, [r7, #10]
 8007368:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800736c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007370:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007378:	b29b      	uxth	r3, r3
 800737a:	8013      	strh	r3, [r2, #0]
 800737c:	f000 bc9f 	b.w	8007cbe <USB_EPStartXfer+0x1660>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8007380:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007384:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	7b1b      	ldrb	r3, [r3, #12]
 800738c:	2b00      	cmp	r3, #0
 800738e:	f040 80ae 	bne.w	80074ee <USB_EPStartXfer+0xe90>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8007392:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007396:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	699a      	ldr	r2, [r3, #24]
 800739e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	691b      	ldr	r3, [r3, #16]
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d917      	bls.n	80073de <USB_EPStartXfer+0xd80>
      {
        len = ep->maxpacket;
 80073ae:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073b2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	691b      	ldr	r3, [r3, #16]
 80073ba:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len -= len;
 80073be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073c2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699a      	ldr	r2, [r3, #24]
 80073ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80073ce:	1ad2      	subs	r2, r2, r3
 80073d0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073d4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	619a      	str	r2, [r3, #24]
 80073dc:	e00e      	b.n	80073fc <USB_EPStartXfer+0xd9e>
      }
      else
      {
        len = ep->xfer_len;
 80073de:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073e2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	699b      	ldr	r3, [r3, #24]
 80073ea:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
        ep->xfer_len = 0U;
 80073ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80073f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2200      	movs	r2, #0
 80073fa:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 80073fc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007400:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800740a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800740e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007418:	b29b      	uxth	r3, r3
 800741a:	461a      	mov	r2, r3
 800741c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007420:	4413      	add	r3, r2
 8007422:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007426:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800742a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	781b      	ldrb	r3, [r3, #0]
 8007432:	00da      	lsls	r2, r3, #3
 8007434:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007438:	4413      	add	r3, r2
 800743a:	f203 4306 	addw	r3, r3, #1030	; 0x406
 800743e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007442:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007446:	2b3e      	cmp	r3, #62	; 0x3e
 8007448:	d91d      	bls.n	8007486 <USB_EPStartXfer+0xe28>
 800744a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800744e:	095b      	lsrs	r3, r3, #5
 8007450:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007454:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007458:	f003 031f 	and.w	r3, r3, #31
 800745c:	2b00      	cmp	r3, #0
 800745e:	d104      	bne.n	800746a <USB_EPStartXfer+0xe0c>
 8007460:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8007464:	3b01      	subs	r3, #1
 8007466:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800746a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800746e:	b29b      	uxth	r3, r3
 8007470:	029b      	lsls	r3, r3, #10
 8007472:	b29b      	uxth	r3, r3
 8007474:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007478:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800747c:	b29a      	uxth	r2, r3
 800747e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007482:	801a      	strh	r2, [r3, #0]
 8007484:	e3e1      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
 8007486:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800748a:	2b00      	cmp	r3, #0
 800748c:	d116      	bne.n	80074bc <USB_EPStartXfer+0xe5e>
 800748e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007492:	881b      	ldrh	r3, [r3, #0]
 8007494:	b29b      	uxth	r3, r3
 8007496:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800749a:	b29a      	uxth	r2, r3
 800749c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074a0:	801a      	strh	r2, [r3, #0]
 80074a2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074a6:	881b      	ldrh	r3, [r3, #0]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80074ae:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80074b2:	b29a      	uxth	r2, r3
 80074b4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074b8:	801a      	strh	r2, [r3, #0]
 80074ba:	e3c6      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
 80074bc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074c0:	085b      	lsrs	r3, r3, #1
 80074c2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074c6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80074ca:	f003 0301 	and.w	r3, r3, #1
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d004      	beq.n	80074dc <USB_EPStartXfer+0xe7e>
 80074d2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074d6:	3301      	adds	r3, #1
 80074d8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80074dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80074e0:	b29b      	uxth	r3, r3
 80074e2:	029b      	lsls	r3, r3, #10
 80074e4:	b29a      	uxth	r2, r3
 80074e6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80074ea:	801a      	strh	r2, [r3, #0]
 80074ec:	e3ad      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 80074ee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80074f2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	78db      	ldrb	r3, [r3, #3]
 80074fa:	2b02      	cmp	r3, #2
 80074fc:	f040 8200 	bne.w	8007900 <USB_EPStartXfer+0x12a2>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8007500:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007504:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	785b      	ldrb	r3, [r3, #1]
 800750c:	2b00      	cmp	r3, #0
 800750e:	f040 8091 	bne.w	8007634 <USB_EPStartXfer+0xfd6>
 8007512:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007516:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007520:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007524:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800752e:	b29b      	uxth	r3, r3
 8007530:	461a      	mov	r2, r3
 8007532:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007536:	4413      	add	r3, r2
 8007538:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800753c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007540:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	00da      	lsls	r2, r3, #3
 800754a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800754e:	4413      	add	r3, r2
 8007550:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007554:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007558:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800755c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	691b      	ldr	r3, [r3, #16]
 8007564:	2b3e      	cmp	r3, #62	; 0x3e
 8007566:	d925      	bls.n	80075b4 <USB_EPStartXfer+0xf56>
 8007568:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800756c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	691b      	ldr	r3, [r3, #16]
 8007574:	095b      	lsrs	r3, r3, #5
 8007576:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800757a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800757e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	691b      	ldr	r3, [r3, #16]
 8007586:	f003 031f 	and.w	r3, r3, #31
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <USB_EPStartXfer+0xf3a>
 800758e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007592:	3b01      	subs	r3, #1
 8007594:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007598:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800759c:	b29b      	uxth	r3, r3
 800759e:	029b      	lsls	r3, r3, #10
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075b0:	801a      	strh	r2, [r3, #0]
 80075b2:	e074      	b.n	800769e <USB_EPStartXfer+0x1040>
 80075b4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075b8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075bc:	681b      	ldr	r3, [r3, #0]
 80075be:	691b      	ldr	r3, [r3, #16]
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d116      	bne.n	80075f2 <USB_EPStartXfer+0xf94>
 80075c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075c8:	881b      	ldrh	r3, [r3, #0]
 80075ca:	b29b      	uxth	r3, r3
 80075cc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80075d0:	b29a      	uxth	r2, r3
 80075d2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075d6:	801a      	strh	r2, [r3, #0]
 80075d8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075dc:	881b      	ldrh	r3, [r3, #0]
 80075de:	b29b      	uxth	r3, r3
 80075e0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075e4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075e8:	b29a      	uxth	r2, r3
 80075ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80075ee:	801a      	strh	r2, [r3, #0]
 80075f0:	e055      	b.n	800769e <USB_EPStartXfer+0x1040>
 80075f2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80075f6:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	691b      	ldr	r3, [r3, #16]
 80075fe:	085b      	lsrs	r3, r3, #1
 8007600:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007604:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007608:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	691b      	ldr	r3, [r3, #16]
 8007610:	f003 0301 	and.w	r3, r3, #1
 8007614:	2b00      	cmp	r3, #0
 8007616:	d004      	beq.n	8007622 <USB_EPStartXfer+0xfc4>
 8007618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800761c:	3301      	adds	r3, #1
 800761e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007622:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007626:	b29b      	uxth	r3, r3
 8007628:	029b      	lsls	r3, r3, #10
 800762a:	b29a      	uxth	r2, r3
 800762c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8007630:	801a      	strh	r2, [r3, #0]
 8007632:	e034      	b.n	800769e <USB_EPStartXfer+0x1040>
 8007634:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007638:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	785b      	ldrb	r3, [r3, #1]
 8007640:	2b01      	cmp	r3, #1
 8007642:	d12c      	bne.n	800769e <USB_EPStartXfer+0x1040>
 8007644:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007648:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007652:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007656:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007660:	b29b      	uxth	r3, r3
 8007662:	461a      	mov	r2, r3
 8007664:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007668:	4413      	add	r3, r2
 800766a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800766e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007672:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	00da      	lsls	r2, r3, #3
 800767c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8007680:	4413      	add	r3, r2
 8007682:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007686:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800768a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800768e:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	691b      	ldr	r3, [r3, #16]
 8007696:	b29a      	uxth	r2, r3
 8007698:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800769c:	801a      	strh	r2, [r3, #0]
 800769e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076a2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80076ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	785b      	ldrb	r3, [r3, #1]
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	f040 8091 	bne.w	80077e0 <USB_EPStartXfer+0x1182>
 80076be:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076c2:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80076da:	b29b      	uxth	r3, r3
 80076dc:	461a      	mov	r2, r3
 80076de:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076e2:	4413      	add	r3, r2
 80076e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80076e8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80076ec:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	781b      	ldrb	r3, [r3, #0]
 80076f4:	00da      	lsls	r2, r3, #3
 80076f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80076fa:	4413      	add	r3, r2
 80076fc:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007700:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007704:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007708:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	691b      	ldr	r3, [r3, #16]
 8007710:	2b3e      	cmp	r3, #62	; 0x3e
 8007712:	d925      	bls.n	8007760 <USB_EPStartXfer+0x1102>
 8007714:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007718:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	691b      	ldr	r3, [r3, #16]
 8007720:	095b      	lsrs	r3, r3, #5
 8007722:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007726:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800772a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 031f 	and.w	r3, r3, #31
 8007736:	2b00      	cmp	r3, #0
 8007738:	d104      	bne.n	8007744 <USB_EPStartXfer+0x10e6>
 800773a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800773e:	3b01      	subs	r3, #1
 8007740:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007748:	b29b      	uxth	r3, r3
 800774a:	029b      	lsls	r3, r3, #10
 800774c:	b29b      	uxth	r3, r3
 800774e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007752:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007756:	b29a      	uxth	r2, r3
 8007758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800775c:	801a      	strh	r2, [r3, #0]
 800775e:	e06d      	b.n	800783c <USB_EPStartXfer+0x11de>
 8007760:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007764:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	691b      	ldr	r3, [r3, #16]
 800776c:	2b00      	cmp	r3, #0
 800776e:	d116      	bne.n	800779e <USB_EPStartXfer+0x1140>
 8007770:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007774:	881b      	ldrh	r3, [r3, #0]
 8007776:	b29b      	uxth	r3, r3
 8007778:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800777c:	b29a      	uxth	r2, r3
 800777e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007782:	801a      	strh	r2, [r3, #0]
 8007784:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007788:	881b      	ldrh	r3, [r3, #0]
 800778a:	b29b      	uxth	r3, r3
 800778c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007790:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007794:	b29a      	uxth	r2, r3
 8007796:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800779a:	801a      	strh	r2, [r3, #0]
 800779c:	e04e      	b.n	800783c <USB_EPStartXfer+0x11de>
 800779e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077a2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	691b      	ldr	r3, [r3, #16]
 80077aa:	085b      	lsrs	r3, r3, #1
 80077ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077b0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077b4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	f003 0301 	and.w	r3, r3, #1
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d004      	beq.n	80077ce <USB_EPStartXfer+0x1170>
 80077c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077c8:	3301      	adds	r3, #1
 80077ca:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80077ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	029b      	lsls	r3, r3, #10
 80077d6:	b29a      	uxth	r2, r3
 80077d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80077dc:	801a      	strh	r2, [r3, #0]
 80077de:	e02d      	b.n	800783c <USB_EPStartXfer+0x11de>
 80077e0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077e4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	785b      	ldrb	r3, [r3, #1]
 80077ec:	2b01      	cmp	r3, #1
 80077ee:	d125      	bne.n	800783c <USB_EPStartXfer+0x11de>
 80077f0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80077f4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80077fe:	b29b      	uxth	r3, r3
 8007800:	461a      	mov	r2, r3
 8007802:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8007806:	4413      	add	r3, r2
 8007808:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800780c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007810:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	781b      	ldrb	r3, [r3, #0]
 8007818:	00da      	lsls	r2, r3, #3
 800781a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800781e:	4413      	add	r3, r2
 8007820:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007824:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007828:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800782c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	b29a      	uxth	r2, r3
 8007836:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800783a:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800783c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007840:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	2b00      	cmp	r3, #0
 800784a:	f000 81fe 	beq.w	8007c4a <USB_EPStartXfer+0x15ec>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800784e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007852:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007856:	681a      	ldr	r2, [r3, #0]
 8007858:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800785c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	781b      	ldrb	r3, [r3, #0]
 8007864:	009b      	lsls	r3, r3, #2
 8007866:	4413      	add	r3, r2
 8007868:	881b      	ldrh	r3, [r3, #0]
 800786a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800786e:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007876:	2b00      	cmp	r3, #0
 8007878:	d005      	beq.n	8007886 <USB_EPStartXfer+0x1228>
 800787a:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800787e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007882:	2b00      	cmp	r3, #0
 8007884:	d10d      	bne.n	80078a2 <USB_EPStartXfer+0x1244>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007886:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800788a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800788e:	2b00      	cmp	r3, #0
 8007890:	f040 81db 	bne.w	8007c4a <USB_EPStartXfer+0x15ec>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8007894:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8007898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800789c:	2b00      	cmp	r3, #0
 800789e:	f040 81d4 	bne.w	8007c4a <USB_EPStartXfer+0x15ec>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 80078a2:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078a6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078b0:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	781b      	ldrb	r3, [r3, #0]
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	4413      	add	r3, r2
 80078bc:	881b      	ldrh	r3, [r3, #0]
 80078be:	b29b      	uxth	r3, r3
 80078c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80078c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078c8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
 80078cc:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078d0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80078d4:	681a      	ldr	r2, [r3, #0]
 80078d6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80078da:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	781b      	ldrb	r3, [r3, #0]
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	441a      	add	r2, r3
 80078e6:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 80078ea:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80078ee:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80078f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80078f6:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80078fa:	b29b      	uxth	r3, r3
 80078fc:	8013      	strh	r3, [r2, #0]
 80078fe:	e1a4      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8007900:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007904:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	78db      	ldrb	r3, [r3, #3]
 800790c:	2b01      	cmp	r3, #1
 800790e:	f040 819a 	bne.w	8007c46 <USB_EPStartXfer+0x15e8>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8007912:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007916:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	699a      	ldr	r2, [r3, #24]
 800791e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007922:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	691b      	ldr	r3, [r3, #16]
 800792a:	429a      	cmp	r2, r3
 800792c:	d917      	bls.n	800795e <USB_EPStartXfer+0x1300>
        {
          len = ep->maxpacket;
 800792e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007932:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	691b      	ldr	r3, [r3, #16]
 800793a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len -= len;
 800793e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007942:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	699a      	ldr	r2, [r3, #24]
 800794a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800794e:	1ad2      	subs	r2, r2, r3
 8007950:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007954:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	619a      	str	r2, [r3, #24]
 800795c:	e00e      	b.n	800797c <USB_EPStartXfer+0x131e>
        }
        else
        {
          len = ep->xfer_len;
 800795e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007962:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
          ep->xfer_len = 0U;
 800796e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007972:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	2200      	movs	r2, #0
 800797a:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800797c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007980:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	785b      	ldrb	r3, [r3, #1]
 8007988:	2b00      	cmp	r3, #0
 800798a:	d178      	bne.n	8007a7e <USB_EPStartXfer+0x1420>
 800798c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007990:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800799a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800799e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80079a8:	b29b      	uxth	r3, r3
 80079aa:	461a      	mov	r2, r3
 80079ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079b0:	4413      	add	r3, r2
 80079b2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80079b6:	f507 7384 	add.w	r3, r7, #264	; 0x108
 80079ba:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	781b      	ldrb	r3, [r3, #0]
 80079c2:	00da      	lsls	r2, r3, #3
 80079c4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80079c8:	4413      	add	r3, r2
 80079ca:	f203 4302 	addw	r3, r3, #1026	; 0x402
 80079ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80079d2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079d6:	2b3e      	cmp	r3, #62	; 0x3e
 80079d8:	d91d      	bls.n	8007a16 <USB_EPStartXfer+0x13b8>
 80079da:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079de:	095b      	lsrs	r3, r3, #5
 80079e0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079e4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80079e8:	f003 031f 	and.w	r3, r3, #31
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d104      	bne.n	80079fa <USB_EPStartXfer+0x139c>
 80079f0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079f4:	3b01      	subs	r3, #1
 80079f6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80079fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80079fe:	b29b      	uxth	r3, r3
 8007a00:	029b      	lsls	r3, r3, #10
 8007a02:	b29b      	uxth	r3, r3
 8007a04:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a08:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a12:	801a      	strh	r2, [r3, #0]
 8007a14:	e064      	b.n	8007ae0 <USB_EPStartXfer+0x1482>
 8007a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d116      	bne.n	8007a4c <USB_EPStartXfer+0x13ee>
 8007a1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a22:	881b      	ldrh	r3, [r3, #0]
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007a2a:	b29a      	uxth	r2, r3
 8007a2c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a30:	801a      	strh	r2, [r3, #0]
 8007a32:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a36:	881b      	ldrh	r3, [r3, #0]
 8007a38:	b29b      	uxth	r3, r3
 8007a3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007a3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007a42:	b29a      	uxth	r2, r3
 8007a44:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a48:	801a      	strh	r2, [r3, #0]
 8007a4a:	e049      	b.n	8007ae0 <USB_EPStartXfer+0x1482>
 8007a4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a50:	085b      	lsrs	r3, r3, #1
 8007a52:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007a5a:	f003 0301 	and.w	r3, r3, #1
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d004      	beq.n	8007a6c <USB_EPStartXfer+0x140e>
 8007a62:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a66:	3301      	adds	r3, #1
 8007a68:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8007a6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a70:	b29b      	uxth	r3, r3
 8007a72:	029b      	lsls	r3, r3, #10
 8007a74:	b29a      	uxth	r2, r3
 8007a76:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007a7a:	801a      	strh	r2, [r3, #0]
 8007a7c:	e030      	b.n	8007ae0 <USB_EPStartXfer+0x1482>
 8007a7e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a82:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	785b      	ldrb	r3, [r3, #1]
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d128      	bne.n	8007ae0 <USB_EPStartXfer+0x1482>
 8007a8e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007a92:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007aa0:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007aaa:	b29b      	uxth	r3, r3
 8007aac:	461a      	mov	r2, r3
 8007aae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007ab2:	4413      	add	r3, r2
 8007ab4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007ab8:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007abc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	781b      	ldrb	r3, [r3, #0]
 8007ac4:	00da      	lsls	r2, r3, #3
 8007ac6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007aca:	4413      	add	r3, r2
 8007acc:	f203 4302 	addw	r3, r3, #1026	; 0x402
 8007ad0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007ad4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8007ade:	801a      	strh	r2, [r3, #0]
 8007ae0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007ae4:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007aee:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007af2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	785b      	ldrb	r3, [r3, #1]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d178      	bne.n	8007bf0 <USB_EPStartXfer+0x1592>
 8007afe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b02:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b0c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b10:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007b1a:	b29b      	uxth	r3, r3
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b22:	4413      	add	r3, r2
 8007b24:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8007b28:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007b2c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	781b      	ldrb	r3, [r3, #0]
 8007b34:	00da      	lsls	r2, r3, #3
 8007b36:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8007b3a:	4413      	add	r3, r2
 8007b3c:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007b40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007b44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b48:	2b3e      	cmp	r3, #62	; 0x3e
 8007b4a:	d91d      	bls.n	8007b88 <USB_EPStartXfer+0x152a>
 8007b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b50:	095b      	lsrs	r3, r3, #5
 8007b52:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b5a:	f003 031f 	and.w	r3, r3, #31
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d104      	bne.n	8007b6c <USB_EPStartXfer+0x150e>
 8007b62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b66:	3b01      	subs	r3, #1
 8007b68:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007b6c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	029b      	lsls	r3, r3, #10
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007b7a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007b7e:	b29a      	uxth	r2, r3
 8007b80:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b84:	801a      	strh	r2, [r3, #0]
 8007b86:	e060      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
 8007b88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d116      	bne.n	8007bbe <USB_EPStartXfer+0x1560>
 8007b90:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007b94:	881b      	ldrh	r3, [r3, #0]
 8007b96:	b29b      	uxth	r3, r3
 8007b98:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007b9c:	b29a      	uxth	r2, r3
 8007b9e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ba2:	801a      	strh	r2, [r3, #0]
 8007ba4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007ba8:	881b      	ldrh	r3, [r3, #0]
 8007baa:	b29b      	uxth	r3, r3
 8007bac:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007bb0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bba:	801a      	strh	r2, [r3, #0]
 8007bbc:	e045      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
 8007bbe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bc2:	085b      	lsrs	r3, r3, #1
 8007bc4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007bcc:	f003 0301 	and.w	r3, r3, #1
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d004      	beq.n	8007bde <USB_EPStartXfer+0x1580>
 8007bd4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007bd8:	3301      	adds	r3, #1
 8007bda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007bde:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007be2:	b29b      	uxth	r3, r3
 8007be4:	029b      	lsls	r3, r3, #10
 8007be6:	b29a      	uxth	r2, r3
 8007be8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007bec:	801a      	strh	r2, [r3, #0]
 8007bee:	e02c      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
 8007bf0:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007bf4:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	785b      	ldrb	r3, [r3, #1]
 8007bfc:	2b01      	cmp	r3, #1
 8007bfe:	d124      	bne.n	8007c4a <USB_EPStartXfer+0x15ec>
 8007c00:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c04:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c08:	681b      	ldr	r3, [r3, #0]
 8007c0a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007c0e:	b29b      	uxth	r3, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c16:	4413      	add	r3, r2
 8007c18:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007c1c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c20:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	781b      	ldrb	r3, [r3, #0]
 8007c28:	00da      	lsls	r2, r3, #3
 8007c2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007c2e:	4413      	add	r3, r2
 8007c30:	f203 4306 	addw	r3, r3, #1030	; 0x406
 8007c34:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007c38:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8007c3c:	b29a      	uxth	r2, r3
 8007c3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007c42:	801a      	strh	r2, [r3, #0]
 8007c44:	e001      	b.n	8007c4a <USB_EPStartXfer+0x15ec>
      }
      else
      {
        return HAL_ERROR;
 8007c46:	2301      	movs	r3, #1
 8007c48:	e03a      	b.n	8007cc0 <USB_EPStartXfer+0x1662>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007c4a:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c4e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c52:	681a      	ldr	r2, [r3, #0]
 8007c54:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c58:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	781b      	ldrb	r3, [r3, #0]
 8007c60:	009b      	lsls	r3, r3, #2
 8007c62:	4413      	add	r3, r2
 8007c64:	881b      	ldrh	r3, [r3, #0]
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007c70:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007c74:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007c78:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007c7c:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007c80:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007c84:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007c88:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
 8007c8c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c90:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8007c9a:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	009b      	lsls	r3, r3, #2
 8007ca4:	441a      	add	r2, r3
 8007ca6:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8007caa:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007cae:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007cb2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007cb6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cba:	b29b      	uxth	r3, r3
 8007cbc:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007cbe:	2300      	movs	r3, #0
}
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}

08007cca <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007cca:	b480      	push	{r7}
 8007ccc:	b085      	sub	sp, #20
 8007cce:	af00      	add	r7, sp, #0
 8007cd0:	6078      	str	r0, [r7, #4]
 8007cd2:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	785b      	ldrb	r3, [r3, #1]
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d020      	beq.n	8007d1e <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8007cdc:	687a      	ldr	r2, [r7, #4]
 8007cde:	683b      	ldr	r3, [r7, #0]
 8007ce0:	781b      	ldrb	r3, [r3, #0]
 8007ce2:	009b      	lsls	r3, r3, #2
 8007ce4:	4413      	add	r3, r2
 8007ce6:	881b      	ldrh	r3, [r3, #0]
 8007ce8:	b29b      	uxth	r3, r3
 8007cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007cee:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cf2:	81bb      	strh	r3, [r7, #12]
 8007cf4:	89bb      	ldrh	r3, [r7, #12]
 8007cf6:	f083 0310 	eor.w	r3, r3, #16
 8007cfa:	81bb      	strh	r3, [r7, #12]
 8007cfc:	687a      	ldr	r2, [r7, #4]
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	781b      	ldrb	r3, [r3, #0]
 8007d02:	009b      	lsls	r3, r3, #2
 8007d04:	441a      	add	r2, r3
 8007d06:	89bb      	ldrh	r3, [r7, #12]
 8007d08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d10:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d18:	b29b      	uxth	r3, r3
 8007d1a:	8013      	strh	r3, [r2, #0]
 8007d1c:	e01f      	b.n	8007d5e <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8007d1e:	687a      	ldr	r2, [r7, #4]
 8007d20:	683b      	ldr	r3, [r7, #0]
 8007d22:	781b      	ldrb	r3, [r3, #0]
 8007d24:	009b      	lsls	r3, r3, #2
 8007d26:	4413      	add	r3, r2
 8007d28:	881b      	ldrh	r3, [r3, #0]
 8007d2a:	b29b      	uxth	r3, r3
 8007d2c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007d30:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d34:	81fb      	strh	r3, [r7, #14]
 8007d36:	89fb      	ldrh	r3, [r7, #14]
 8007d38:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007d3c:	81fb      	strh	r3, [r7, #14]
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	683b      	ldr	r3, [r7, #0]
 8007d42:	781b      	ldrb	r3, [r3, #0]
 8007d44:	009b      	lsls	r3, r3, #2
 8007d46:	441a      	add	r2, r3
 8007d48:	89fb      	ldrh	r3, [r7, #14]
 8007d4a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007d4e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007d52:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d5a:	b29b      	uxth	r3, r3
 8007d5c:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 8007d5e:	2300      	movs	r3, #0
}
 8007d60:	4618      	mov	r0, r3
 8007d62:	3714      	adds	r7, #20
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8007d76:	683b      	ldr	r3, [r7, #0]
 8007d78:	7b1b      	ldrb	r3, [r3, #12]
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	f040 809d 	bne.w	8007eba <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	785b      	ldrb	r3, [r3, #1]
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d04c      	beq.n	8007e22 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8007d88:	687a      	ldr	r2, [r7, #4]
 8007d8a:	683b      	ldr	r3, [r7, #0]
 8007d8c:	781b      	ldrb	r3, [r3, #0]
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	881b      	ldrh	r3, [r3, #0]
 8007d94:	823b      	strh	r3, [r7, #16]
 8007d96:	8a3b      	ldrh	r3, [r7, #16]
 8007d98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d01b      	beq.n	8007dd8 <USB_EPClearStall+0x6c>
 8007da0:	687a      	ldr	r2, [r7, #4]
 8007da2:	683b      	ldr	r3, [r7, #0]
 8007da4:	781b      	ldrb	r3, [r3, #0]
 8007da6:	009b      	lsls	r3, r3, #2
 8007da8:	4413      	add	r3, r2
 8007daa:	881b      	ldrh	r3, [r3, #0]
 8007dac:	b29b      	uxth	r3, r3
 8007dae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db6:	81fb      	strh	r3, [r7, #14]
 8007db8:	687a      	ldr	r2, [r7, #4]
 8007dba:	683b      	ldr	r3, [r7, #0]
 8007dbc:	781b      	ldrb	r3, [r3, #0]
 8007dbe:	009b      	lsls	r3, r3, #2
 8007dc0:	441a      	add	r2, r3
 8007dc2:	89fb      	ldrh	r3, [r7, #14]
 8007dc4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007dc8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007dd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8007dd4:	b29b      	uxth	r3, r3
 8007dd6:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8007dd8:	683b      	ldr	r3, [r7, #0]
 8007dda:	78db      	ldrb	r3, [r3, #3]
 8007ddc:	2b01      	cmp	r3, #1
 8007dde:	d06c      	beq.n	8007eba <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	683b      	ldr	r3, [r7, #0]
 8007de4:	781b      	ldrb	r3, [r3, #0]
 8007de6:	009b      	lsls	r3, r3, #2
 8007de8:	4413      	add	r3, r2
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	b29b      	uxth	r3, r3
 8007dee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007df2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007df6:	81bb      	strh	r3, [r7, #12]
 8007df8:	89bb      	ldrh	r3, [r7, #12]
 8007dfa:	f083 0320 	eor.w	r3, r3, #32
 8007dfe:	81bb      	strh	r3, [r7, #12]
 8007e00:	687a      	ldr	r2, [r7, #4]
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	781b      	ldrb	r3, [r3, #0]
 8007e06:	009b      	lsls	r3, r3, #2
 8007e08:	441a      	add	r2, r3
 8007e0a:	89bb      	ldrh	r3, [r7, #12]
 8007e0c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e10:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e14:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007e18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e1c:	b29b      	uxth	r3, r3
 8007e1e:	8013      	strh	r3, [r2, #0]
 8007e20:	e04b      	b.n	8007eba <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8007e22:	687a      	ldr	r2, [r7, #4]
 8007e24:	683b      	ldr	r3, [r7, #0]
 8007e26:	781b      	ldrb	r3, [r3, #0]
 8007e28:	009b      	lsls	r3, r3, #2
 8007e2a:	4413      	add	r3, r2
 8007e2c:	881b      	ldrh	r3, [r3, #0]
 8007e2e:	82fb      	strh	r3, [r7, #22]
 8007e30:	8afb      	ldrh	r3, [r7, #22]
 8007e32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d01b      	beq.n	8007e72 <USB_EPClearStall+0x106>
 8007e3a:	687a      	ldr	r2, [r7, #4]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	781b      	ldrb	r3, [r3, #0]
 8007e40:	009b      	lsls	r3, r3, #2
 8007e42:	4413      	add	r3, r2
 8007e44:	881b      	ldrh	r3, [r3, #0]
 8007e46:	b29b      	uxth	r3, r3
 8007e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e50:	82bb      	strh	r3, [r7, #20]
 8007e52:	687a      	ldr	r2, [r7, #4]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	781b      	ldrb	r3, [r3, #0]
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	441a      	add	r2, r3
 8007e5c:	8abb      	ldrh	r3, [r7, #20]
 8007e5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007e62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007e66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007e6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8007e72:	687a      	ldr	r2, [r7, #4]
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	781b      	ldrb	r3, [r3, #0]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	4413      	add	r3, r2
 8007e7c:	881b      	ldrh	r3, [r3, #0]
 8007e7e:	b29b      	uxth	r3, r3
 8007e80:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007e84:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e88:	827b      	strh	r3, [r7, #18]
 8007e8a:	8a7b      	ldrh	r3, [r7, #18]
 8007e8c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8007e90:	827b      	strh	r3, [r7, #18]
 8007e92:	8a7b      	ldrh	r3, [r7, #18]
 8007e94:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8007e98:	827b      	strh	r3, [r7, #18]
 8007e9a:	687a      	ldr	r2, [r7, #4]
 8007e9c:	683b      	ldr	r3, [r7, #0]
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	441a      	add	r2, r3
 8007ea4:	8a7b      	ldrh	r3, [r7, #18]
 8007ea6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007eaa:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007eae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007eb6:	b29b      	uxth	r3, r3
 8007eb8:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8007eba:	2300      	movs	r3, #0
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	371c      	adds	r7, #28
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ec6:	4770      	bx	lr

08007ec8 <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b083      	sub	sp, #12
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 8007ed4:	78fb      	ldrb	r3, [r7, #3]
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d103      	bne.n	8007ee2 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2280      	movs	r2, #128	; 0x80
 8007ede:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8007ee2:	2300      	movs	r3, #0
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	370c      	adds	r7, #12
 8007ee8:	46bd      	mov	sp, r7
 8007eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eee:	4770      	bx	lr

08007ef0 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b083      	sub	sp, #12
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007efe:	b29b      	uxth	r3, r3
 8007f00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007f04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007f08:	b29a      	uxth	r2, r3
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  return HAL_OK;
 8007f10:	2300      	movs	r3, #0
}
 8007f12:	4618      	mov	r0, r3
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b085      	sub	sp, #20
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8007f2c:	b29b      	uxth	r3, r3
 8007f2e:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8007f30:	68fb      	ldr	r3, [r7, #12]
}
 8007f32:	4618      	mov	r0, r3
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr

08007f3e <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007f3e:	b480      	push	{r7}
 8007f40:	b08d      	sub	sp, #52	; 0x34
 8007f42:	af00      	add	r7, sp, #0
 8007f44:	60f8      	str	r0, [r7, #12]
 8007f46:	60b9      	str	r1, [r7, #8]
 8007f48:	4611      	mov	r1, r2
 8007f4a:	461a      	mov	r2, r3
 8007f4c:	460b      	mov	r3, r1
 8007f4e:	80fb      	strh	r3, [r7, #6]
 8007f50:	4613      	mov	r3, r2
 8007f52:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8007f54:	88bb      	ldrh	r3, [r7, #4]
 8007f56:	3301      	adds	r3, #1
 8007f58:	085b      	lsrs	r3, r3, #1
 8007f5a:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	61fb      	str	r3, [r7, #28]
  uint32_t i;
  uint32_t temp1;
  uint32_t temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007f60:	68bb      	ldr	r3, [r7, #8]
 8007f62:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007f64:	88fa      	ldrh	r2, [r7, #6]
 8007f66:	69fb      	ldr	r3, [r7, #28]
 8007f68:	4413      	add	r3, r2
 8007f6a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007f6e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 8007f70:	6a3b      	ldr	r3, [r7, #32]
 8007f72:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f74:	e01b      	b.n	8007fae <USB_WritePMA+0x70>
  {
    temp1 = *pBuf;
 8007f76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f78:	781b      	ldrb	r3, [r3, #0]
 8007f7a:	61bb      	str	r3, [r7, #24]
    pBuf++;
 8007f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f7e:	3301      	adds	r3, #1
 8007f80:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8007f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f84:	781b      	ldrb	r3, [r3, #0]
 8007f86:	b29b      	uxth	r3, r3
 8007f88:	021b      	lsls	r3, r3, #8
 8007f8a:	b29b      	uxth	r3, r3
 8007f8c:	461a      	mov	r2, r3
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	4313      	orrs	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	b29a      	uxth	r2, r3
 8007f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9a:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8007f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f9e:	3302      	adds	r3, #2
 8007fa0:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 8007fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa4:	3301      	adds	r3, #1
 8007fa6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 8007fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007faa:	3b01      	subs	r3, #1
 8007fac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d1e0      	bne.n	8007f76 <USB_WritePMA+0x38>
  }
}
 8007fb4:	bf00      	nop
 8007fb6:	bf00      	nop
 8007fb8:	3734      	adds	r7, #52	; 0x34
 8007fba:	46bd      	mov	sp, r7
 8007fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc0:	4770      	bx	lr

08007fc2 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8007fc2:	b480      	push	{r7}
 8007fc4:	b08b      	sub	sp, #44	; 0x2c
 8007fc6:	af00      	add	r7, sp, #0
 8007fc8:	60f8      	str	r0, [r7, #12]
 8007fca:	60b9      	str	r1, [r7, #8]
 8007fcc:	4611      	mov	r1, r2
 8007fce:	461a      	mov	r2, r3
 8007fd0:	460b      	mov	r3, r1
 8007fd2:	80fb      	strh	r3, [r7, #6]
 8007fd4:	4613      	mov	r3, r2
 8007fd6:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 8007fd8:	88bb      	ldrh	r3, [r7, #4]
 8007fda:	085b      	lsrs	r3, r3, #1
 8007fdc:	b29b      	uxth	r3, r3
 8007fde:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	617b      	str	r3, [r7, #20]
  uint32_t i;
  uint32_t temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8007fe4:	68bb      	ldr	r3, [r7, #8]
 8007fe6:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8007fe8:	88fa      	ldrh	r2, [r7, #6]
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007ff2:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 8007ff4:	69bb      	ldr	r3, [r7, #24]
 8007ff6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ff8:	e018      	b.n	800802c <USB_ReadPMA+0x6a>
  {
    temp = *(__IO uint16_t *)pdwVal;
 8007ffa:	6a3b      	ldr	r3, [r7, #32]
 8007ffc:	881b      	ldrh	r3, [r3, #0]
 8007ffe:	b29b      	uxth	r3, r3
 8008000:	613b      	str	r3, [r7, #16]
    pdwVal++;
 8008002:	6a3b      	ldr	r3, [r7, #32]
 8008004:	3302      	adds	r3, #2
 8008006:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	b2da      	uxtb	r2, r3
 800800c:	69fb      	ldr	r3, [r7, #28]
 800800e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008010:	69fb      	ldr	r3, [r7, #28]
 8008012:	3301      	adds	r3, #1
 8008014:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8008016:	693b      	ldr	r3, [r7, #16]
 8008018:	0a1b      	lsrs	r3, r3, #8
 800801a:	b2da      	uxtb	r2, r3
 800801c:	69fb      	ldr	r3, [r7, #28]
 800801e:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8008020:	69fb      	ldr	r3, [r7, #28]
 8008022:	3301      	adds	r3, #1
 8008024:	61fb      	str	r3, [r7, #28]
  for (i = n; i != 0U; i--)
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008028:	3b01      	subs	r3, #1
 800802a:	627b      	str	r3, [r7, #36]	; 0x24
 800802c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802e:	2b00      	cmp	r3, #0
 8008030:	d1e3      	bne.n	8007ffa <USB_ReadPMA+0x38>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8008032:	88bb      	ldrh	r3, [r7, #4]
 8008034:	f003 0301 	and.w	r3, r3, #1
 8008038:	b29b      	uxth	r3, r3
 800803a:	2b00      	cmp	r3, #0
 800803c:	d007      	beq.n	800804e <USB_ReadPMA+0x8c>
  {
    temp = *pdwVal;
 800803e:	6a3b      	ldr	r3, [r7, #32]
 8008040:	881b      	ldrh	r3, [r3, #0]
 8008042:	b29b      	uxth	r3, r3
 8008044:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8008046:	693b      	ldr	r3, [r7, #16]
 8008048:	b2da      	uxtb	r2, r3
 800804a:	69fb      	ldr	r3, [r7, #28]
 800804c:	701a      	strb	r2, [r3, #0]
  }
}
 800804e:	bf00      	nop
 8008050:	372c      	adds	r7, #44	; 0x2c
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800805a:	b580      	push	{r7, lr}
 800805c:	b084      	sub	sp, #16
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8008066:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800806a:	f002 f901 	bl	800a270 <USBD_static_malloc>
 800806e:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	2b00      	cmp	r3, #0
 8008074:	d105      	bne.n	8008082 <USBD_CDC_Init+0x28>
  {
    pdev->pClassData = NULL;
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	2200      	movs	r2, #0
 800807a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
    return (uint8_t)USBD_EMEM;
 800807e:	2302      	movs	r3, #2
 8008080:	e066      	b.n	8008150 <USBD_CDC_Init+0xf6>
  }

  pdev->pClassData = (void *)hcdc;
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	68fa      	ldr	r2, [r7, #12]
 8008086:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	7c1b      	ldrb	r3, [r3, #16]
 800808e:	2b00      	cmp	r3, #0
 8008090:	d119      	bne.n	80080c6 <USBD_CDC_Init+0x6c>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8008092:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008096:	2202      	movs	r2, #2
 8008098:	2181      	movs	r1, #129	; 0x81
 800809a:	6878      	ldr	r0, [r7, #4]
 800809c:	f001 ff8d 	bl	8009fba <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	2201      	movs	r2, #1
 80080a4:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80080aa:	2202      	movs	r2, #2
 80080ac:	2101      	movs	r1, #1
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f001 ff83 	bl	8009fba <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2201      	movs	r2, #1
 80080b8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	2210      	movs	r2, #16
 80080c0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
 80080c4:	e016      	b.n	80080f4 <USBD_CDC_Init+0x9a>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80080c6:	2340      	movs	r3, #64	; 0x40
 80080c8:	2202      	movs	r2, #2
 80080ca:	2181      	movs	r1, #129	; 0x81
 80080cc:	6878      	ldr	r0, [r7, #4]
 80080ce:	f001 ff74 	bl	8009fba <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	2201      	movs	r2, #1
 80080d6:	871a      	strh	r2, [r3, #56]	; 0x38

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80080d8:	2340      	movs	r3, #64	; 0x40
 80080da:	2202      	movs	r2, #2
 80080dc:	2101      	movs	r1, #1
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	f001 ff6b 	bl	8009fba <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = CDC_FS_BINTERVAL;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2210      	movs	r2, #16
 80080f0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80080f4:	2308      	movs	r3, #8
 80080f6:	2203      	movs	r2, #3
 80080f8:	2182      	movs	r1, #130	; 0x82
 80080fa:	6878      	ldr	r0, [r7, #4]
 80080fc:	f001 ff5d 	bl	8009fba <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2201      	movs	r2, #1
 8008104:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	7c1b      	ldrb	r3, [r3, #16]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d109      	bne.n	800813e <USBD_CDC_Init+0xe4>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008134:	2101      	movs	r1, #1
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f002 f82f 	bl	800a19a <USBD_LL_PrepareReceive>
 800813c:	e007      	b.n	800814e <USBD_CDC_Init+0xf4>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008144:	2340      	movs	r3, #64	; 0x40
 8008146:	2101      	movs	r1, #1
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f002 f826 	bl	800a19a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800814e:	2300      	movs	r3, #0
}
 8008150:	4618      	mov	r0, r3
 8008152:	3710      	adds	r7, #16
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDC_IN_EP);
 8008164:	2181      	movs	r1, #129	; 0x81
 8008166:	6878      	ldr	r0, [r7, #4]
 8008168:	f001 ff4d 	bl	800a006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	2200      	movs	r2, #0
 8008170:	871a      	strh	r2, [r3, #56]	; 0x38

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8008172:	2101      	movs	r1, #1
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f001 ff46 	bl	800a006 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	2200      	movs	r2, #0
 800817e:	f8a3 2178 	strh.w	r2, [r3, #376]	; 0x178

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8008182:	2182      	movs	r1, #130	; 0x82
 8008184:	6878      	ldr	r0, [r7, #4]
 8008186:	f001 ff3e 	bl	800a006 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	2200      	movs	r2, #0
 800818e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  pdev->ep_in[CDC_CMD_EP & 0xFU].bInterval = 0U;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2200      	movs	r2, #0
 8008196:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d00e      	beq.n	80081c2 <USBD_CDC_DeInit+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80081aa:	685b      	ldr	r3, [r3, #4]
 80081ac:	4798      	blx	r3
    (void)USBD_free(pdev->pClassData);
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081b4:	4618      	mov	r0, r3
 80081b6:	f002 f869 	bl	800a28c <USBD_static_free>
    pdev->pClassData = NULL;
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	2200      	movs	r2, #0
 80081be:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80081c2:	2300      	movs	r3, #0
}
 80081c4:	4618      	mov	r0, r3
 80081c6:	3708      	adds	r7, #8
 80081c8:	46bd      	mov	sp, r7
 80081ca:	bd80      	pop	{r7, pc}

080081cc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80081cc:	b580      	push	{r7, lr}
 80081ce:	b086      	sub	sp, #24
 80081d0:	af00      	add	r7, sp, #0
 80081d2:	6078      	str	r0, [r7, #4]
 80081d4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80081dc:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80081de:	2300      	movs	r3, #0
 80081e0:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80081e2:	2300      	movs	r3, #0
 80081e4:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 80081e6:	2300      	movs	r3, #0
 80081e8:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 80081ea:	693b      	ldr	r3, [r7, #16]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d101      	bne.n	80081f4 <USBD_CDC_Setup+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e0af      	b.n	8008354 <USBD_CDC_Setup+0x188>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80081f4:	683b      	ldr	r3, [r7, #0]
 80081f6:	781b      	ldrb	r3, [r3, #0]
 80081f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d03f      	beq.n	8008280 <USBD_CDC_Setup+0xb4>
 8008200:	2b20      	cmp	r3, #32
 8008202:	f040 809f 	bne.w	8008344 <USBD_CDC_Setup+0x178>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8008206:	683b      	ldr	r3, [r7, #0]
 8008208:	88db      	ldrh	r3, [r3, #6]
 800820a:	2b00      	cmp	r3, #0
 800820c:	d02e      	beq.n	800826c <USBD_CDC_Setup+0xa0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800820e:	683b      	ldr	r3, [r7, #0]
 8008210:	781b      	ldrb	r3, [r3, #0]
 8008212:	b25b      	sxtb	r3, r3
 8008214:	2b00      	cmp	r3, #0
 8008216:	da16      	bge.n	8008246 <USBD_CDC_Setup+0x7a>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800821e:	689b      	ldr	r3, [r3, #8]
 8008220:	683a      	ldr	r2, [r7, #0]
 8008222:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)hcdc->data,
 8008224:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8008226:	683a      	ldr	r2, [r7, #0]
 8008228:	88d2      	ldrh	r2, [r2, #6]
 800822a:	4798      	blx	r3
                                                            req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	88db      	ldrh	r3, [r3, #6]
 8008230:	2b07      	cmp	r3, #7
 8008232:	bf28      	it	cs
 8008234:	2307      	movcs	r3, #7
 8008236:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8008238:	693b      	ldr	r3, [r7, #16]
 800823a:	89fa      	ldrh	r2, [r7, #14]
 800823c:	4619      	mov	r1, r3
 800823e:	6878      	ldr	r0, [r7, #4]
 8008240:	f001 facf 	bl	80097e2 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)req, 0U);
      }
      break;
 8008244:	e085      	b.n	8008352 <USBD_CDC_Setup+0x186>
          hcdc->CmdOpCode = req->bRequest;
 8008246:	683b      	ldr	r3, [r7, #0]
 8008248:	785a      	ldrb	r2, [r3, #1]
 800824a:	693b      	ldr	r3, [r7, #16]
 800824c:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)req->wLength;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	88db      	ldrh	r3, [r3, #6]
 8008254:	b2da      	uxtb	r2, r3
 8008256:	693b      	ldr	r3, [r7, #16]
 8008258:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, req->wLength);
 800825c:	6939      	ldr	r1, [r7, #16]
 800825e:	683b      	ldr	r3, [r7, #0]
 8008260:	88db      	ldrh	r3, [r3, #6]
 8008262:	461a      	mov	r2, r3
 8008264:	6878      	ldr	r0, [r7, #4]
 8008266:	f001 fae8 	bl	800983a <USBD_CtlPrepareRx>
      break;
 800826a:	e072      	b.n	8008352 <USBD_CDC_Setup+0x186>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008272:	689b      	ldr	r3, [r3, #8]
 8008274:	683a      	ldr	r2, [r7, #0]
 8008276:	7850      	ldrb	r0, [r2, #1]
 8008278:	2200      	movs	r2, #0
 800827a:	6839      	ldr	r1, [r7, #0]
 800827c:	4798      	blx	r3
      break;
 800827e:	e068      	b.n	8008352 <USBD_CDC_Setup+0x186>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008280:	683b      	ldr	r3, [r7, #0]
 8008282:	785b      	ldrb	r3, [r3, #1]
 8008284:	2b0b      	cmp	r3, #11
 8008286:	d852      	bhi.n	800832e <USBD_CDC_Setup+0x162>
 8008288:	a201      	add	r2, pc, #4	; (adr r2, 8008290 <USBD_CDC_Setup+0xc4>)
 800828a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800828e:	bf00      	nop
 8008290:	080082c1 	.word	0x080082c1
 8008294:	0800833d 	.word	0x0800833d
 8008298:	0800832f 	.word	0x0800832f
 800829c:	0800832f 	.word	0x0800832f
 80082a0:	0800832f 	.word	0x0800832f
 80082a4:	0800832f 	.word	0x0800832f
 80082a8:	0800832f 	.word	0x0800832f
 80082ac:	0800832f 	.word	0x0800832f
 80082b0:	0800832f 	.word	0x0800832f
 80082b4:	0800832f 	.word	0x0800832f
 80082b8:	080082eb 	.word	0x080082eb
 80082bc:	08008315 	.word	0x08008315
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082c6:	b2db      	uxtb	r3, r3
 80082c8:	2b03      	cmp	r3, #3
 80082ca:	d107      	bne.n	80082dc <USBD_CDC_Setup+0x110>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 80082cc:	f107 030a 	add.w	r3, r7, #10
 80082d0:	2202      	movs	r2, #2
 80082d2:	4619      	mov	r1, r3
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f001 fa84 	bl	80097e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80082da:	e032      	b.n	8008342 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 80082dc:	6839      	ldr	r1, [r7, #0]
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f001 fa0e 	bl	8009700 <USBD_CtlError>
            ret = USBD_FAIL;
 80082e4:	2303      	movs	r3, #3
 80082e6:	75fb      	strb	r3, [r7, #23]
          break;
 80082e8:	e02b      	b.n	8008342 <USBD_CDC_Setup+0x176>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80082f0:	b2db      	uxtb	r3, r3
 80082f2:	2b03      	cmp	r3, #3
 80082f4:	d107      	bne.n	8008306 <USBD_CDC_Setup+0x13a>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 80082f6:	f107 030d 	add.w	r3, r7, #13
 80082fa:	2201      	movs	r2, #1
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f001 fa6f 	bl	80097e2 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8008304:	e01d      	b.n	8008342 <USBD_CDC_Setup+0x176>
            USBD_CtlError(pdev, req);
 8008306:	6839      	ldr	r1, [r7, #0]
 8008308:	6878      	ldr	r0, [r7, #4]
 800830a:	f001 f9f9 	bl	8009700 <USBD_CtlError>
            ret = USBD_FAIL;
 800830e:	2303      	movs	r3, #3
 8008310:	75fb      	strb	r3, [r7, #23]
          break;
 8008312:	e016      	b.n	8008342 <USBD_CDC_Setup+0x176>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800831a:	b2db      	uxtb	r3, r3
 800831c:	2b03      	cmp	r3, #3
 800831e:	d00f      	beq.n	8008340 <USBD_CDC_Setup+0x174>
          {
            USBD_CtlError(pdev, req);
 8008320:	6839      	ldr	r1, [r7, #0]
 8008322:	6878      	ldr	r0, [r7, #4]
 8008324:	f001 f9ec 	bl	8009700 <USBD_CtlError>
            ret = USBD_FAIL;
 8008328:	2303      	movs	r3, #3
 800832a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800832c:	e008      	b.n	8008340 <USBD_CDC_Setup+0x174>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f001 f9e5 	bl	8009700 <USBD_CtlError>
          ret = USBD_FAIL;
 8008336:	2303      	movs	r3, #3
 8008338:	75fb      	strb	r3, [r7, #23]
          break;
 800833a:	e002      	b.n	8008342 <USBD_CDC_Setup+0x176>
          break;
 800833c:	bf00      	nop
 800833e:	e008      	b.n	8008352 <USBD_CDC_Setup+0x186>
          break;
 8008340:	bf00      	nop
      }
      break;
 8008342:	e006      	b.n	8008352 <USBD_CDC_Setup+0x186>

    default:
      USBD_CtlError(pdev, req);
 8008344:	6839      	ldr	r1, [r7, #0]
 8008346:	6878      	ldr	r0, [r7, #4]
 8008348:	f001 f9da 	bl	8009700 <USBD_CtlError>
      ret = USBD_FAIL;
 800834c:	2303      	movs	r3, #3
 800834e:	75fb      	strb	r3, [r7, #23]
      break;
 8008350:	bf00      	nop
  }

  return (uint8_t)ret;
 8008352:	7dfb      	ldrb	r3, [r7, #23]
}
 8008354:	4618      	mov	r0, r3
 8008356:	3718      	adds	r7, #24
 8008358:	46bd      	mov	sp, r7
 800835a:	bd80      	pop	{r7, pc}

0800835c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b084      	sub	sp, #16
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
 8008364:	460b      	mov	r3, r1
 8008366:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800836e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008376:	2b00      	cmp	r3, #0
 8008378:	d101      	bne.n	800837e <USBD_CDC_DataIn+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800837a:	2303      	movs	r3, #3
 800837c:	e04f      	b.n	800841e <USBD_CDC_DataIn+0xc2>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008384:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum].total_length > 0U) &&
 8008386:	78fa      	ldrb	r2, [r7, #3]
 8008388:	6879      	ldr	r1, [r7, #4]
 800838a:	4613      	mov	r3, r2
 800838c:	009b      	lsls	r3, r3, #2
 800838e:	4413      	add	r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	440b      	add	r3, r1
 8008394:	3318      	adds	r3, #24
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d029      	beq.n	80083f0 <USBD_CDC_DataIn+0x94>
      ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800839c:	78fa      	ldrb	r2, [r7, #3]
 800839e:	6879      	ldr	r1, [r7, #4]
 80083a0:	4613      	mov	r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4413      	add	r3, r2
 80083a6:	009b      	lsls	r3, r3, #2
 80083a8:	440b      	add	r3, r1
 80083aa:	3318      	adds	r3, #24
 80083ac:	681a      	ldr	r2, [r3, #0]
 80083ae:	78f9      	ldrb	r1, [r7, #3]
 80083b0:	68f8      	ldr	r0, [r7, #12]
 80083b2:	460b      	mov	r3, r1
 80083b4:	009b      	lsls	r3, r3, #2
 80083b6:	440b      	add	r3, r1
 80083b8:	00db      	lsls	r3, r3, #3
 80083ba:	4403      	add	r3, r0
 80083bc:	3338      	adds	r3, #56	; 0x38
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	fbb2 f1f3 	udiv	r1, r2, r3
 80083c4:	fb01 f303 	mul.w	r3, r1, r3
 80083c8:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum].total_length > 0U) &&
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d110      	bne.n	80083f0 <USBD_CDC_DataIn+0x94>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum].total_length = 0U;
 80083ce:	78fa      	ldrb	r2, [r7, #3]
 80083d0:	6879      	ldr	r1, [r7, #4]
 80083d2:	4613      	mov	r3, r2
 80083d4:	009b      	lsls	r3, r3, #2
 80083d6:	4413      	add	r3, r2
 80083d8:	009b      	lsls	r3, r3, #2
 80083da:	440b      	add	r3, r1
 80083dc:	3318      	adds	r3, #24
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80083e2:	78f9      	ldrb	r1, [r7, #3]
 80083e4:	2300      	movs	r3, #0
 80083e6:	2200      	movs	r2, #0
 80083e8:	6878      	ldr	r0, [r7, #4]
 80083ea:	f001 feb5 	bl	800a158 <USBD_LL_Transmit>
 80083ee:	e015      	b.n	800841c <USBD_CDC_DataIn+0xc0>
  }
  else
  {
    hcdc->TxState = 0U;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2200      	movs	r2, #0
 80083f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt != NULL)
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80083fe:	691b      	ldr	r3, [r3, #16]
 8008400:	2b00      	cmp	r3, #0
 8008402:	d00b      	beq.n	800841c <USBD_CDC_DataIn+0xc0>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800840a:	691b      	ldr	r3, [r3, #16]
 800840c:	68ba      	ldr	r2, [r7, #8]
 800840e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8008412:	68ba      	ldr	r2, [r7, #8]
 8008414:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8008418:	78fa      	ldrb	r2, [r7, #3]
 800841a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800841c:	2300      	movs	r3, #0
}
 800841e:	4618      	mov	r0, r3
 8008420:	3710      	adds	r7, #16
 8008422:	46bd      	mov	sp, r7
 8008424:	bd80      	pop	{r7, pc}

08008426 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b084      	sub	sp, #16
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
 800842e:	460b      	mov	r3, r1
 8008430:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008438:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008440:	2b00      	cmp	r3, #0
 8008442:	d101      	bne.n	8008448 <USBD_CDC_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8008444:	2303      	movs	r3, #3
 8008446:	e015      	b.n	8008474 <USBD_CDC_DataOut+0x4e>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8008448:	78fb      	ldrb	r3, [r7, #3]
 800844a:	4619      	mov	r1, r3
 800844c:	6878      	ldr	r0, [r7, #4]
 800844e:	f001 fec5 	bl	800a1dc <USBD_LL_GetRxDataSize>
 8008452:	4602      	mov	r2, r0
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 8008460:	68db      	ldr	r3, [r3, #12]
 8008462:	68fa      	ldr	r2, [r7, #12]
 8008464:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8008468:	68fa      	ldr	r2, [r7, #12]
 800846a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800846e:	4611      	mov	r1, r2
 8008470:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8008472:	2300      	movs	r3, #0
}
 8008474:	4618      	mov	r0, r3
 8008476:	3710      	adds	r7, #16
 8008478:	46bd      	mov	sp, r7
 800847a:	bd80      	pop	{r7, pc}

0800847c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800848a:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2b00      	cmp	r3, #0
 8008490:	d101      	bne.n	8008496 <USBD_CDC_EP0_RxReady+0x1a>
  {
    return (uint8_t)USBD_FAIL;
 8008492:	2303      	movs	r3, #3
 8008494:	e01b      	b.n	80084ce <USBD_CDC_EP0_RxReady+0x52>
  }

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 800849c:	2b00      	cmp	r3, #0
 800849e:	d015      	beq.n	80084cc <USBD_CDC_EP0_RxReady+0x50>
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80084a6:	2bff      	cmp	r3, #255	; 0xff
 80084a8:	d010      	beq.n	80084cc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	f8d3 32c0 	ldr.w	r3, [r3, #704]	; 0x2c0
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	68fa      	ldr	r2, [r7, #12]
 80084b4:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)hcdc->data,
 80084b8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 80084ba:	68fa      	ldr	r2, [r7, #12]
 80084bc:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80084c0:	b292      	uxth	r2, r2
 80084c2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	22ff      	movs	r2, #255	; 0xff
 80084c8:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3710      	adds	r7, #16
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgFSDesc);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	2243      	movs	r2, #67	; 0x43
 80084e4:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgFSDesc;
 80084e6:	4b03      	ldr	r3, [pc, #12]	; (80084f4 <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	370c      	adds	r7, #12
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	200000dc 	.word	0x200000dc

080084f8 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_CfgHSDesc);
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	2243      	movs	r2, #67	; 0x43
 8008504:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_CfgHSDesc;
 8008506:	4b03      	ldr	r3, [pc, #12]	; (8008514 <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 8008508:	4618      	mov	r0, r3
 800850a:	370c      	adds	r7, #12
 800850c:	46bd      	mov	sp, r7
 800850e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008512:	4770      	bx	lr
 8008514:	20000098 	.word	0x20000098

08008518 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8008518:	b480      	push	{r7}
 800851a:	b083      	sub	sp, #12
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2243      	movs	r2, #67	; 0x43
 8008524:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_OtherSpeedCfgDesc;
 8008526:	4b03      	ldr	r3, [pc, #12]	; (8008534 <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 8008528:	4618      	mov	r0, r3
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr
 8008534:	20000120 	.word	0x20000120

08008538 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8008538:	b480      	push	{r7}
 800853a:	b083      	sub	sp, #12
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	220a      	movs	r2, #10
 8008544:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8008546:	4b03      	ldr	r3, [pc, #12]	; (8008554 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8008548:	4618      	mov	r0, r3
 800854a:	370c      	adds	r7, #12
 800854c:	46bd      	mov	sp, r7
 800854e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008552:	4770      	bx	lr
 8008554:	20000054 	.word	0x20000054

08008558 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
 8008560:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	2b00      	cmp	r3, #0
 8008566:	d101      	bne.n	800856c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8008568:	2303      	movs	r3, #3
 800856a:	e004      	b.n	8008576 <USBD_CDC_RegisterInterface+0x1e>
  }

  pdev->pUserData = fops;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	683a      	ldr	r2, [r7, #0]
 8008570:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0

  return (uint8_t)USBD_OK;
 8008574:	2300      	movs	r3, #0
}
 8008576:	4618      	mov	r0, r3
 8008578:	370c      	adds	r7, #12
 800857a:	46bd      	mov	sp, r7
 800857c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008580:	4770      	bx	lr

08008582 <USBD_CDC_SetTxBuffer>:
  * @param  pbuff: Tx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8008582:	b480      	push	{r7}
 8008584:	b087      	sub	sp, #28
 8008586:	af00      	add	r7, sp, #0
 8008588:	60f8      	str	r0, [r7, #12]
 800858a:	60b9      	str	r1, [r7, #8]
 800858c:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008594:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d101      	bne.n	80085a0 <USBD_CDC_SetTxBuffer+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800859c:	2303      	movs	r3, #3
 800859e:	e008      	b.n	80085b2 <USBD_CDC_SetTxBuffer+0x30>
  }

  hcdc->TxBuffer = pbuff;
 80085a0:	697b      	ldr	r3, [r7, #20]
 80085a2:	68ba      	ldr	r2, [r7, #8]
 80085a4:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	687a      	ldr	r2, [r7, #4]
 80085ac:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	371c      	adds	r7, #28
 80085b6:	46bd      	mov	sp, r7
 80085b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085bc:	4770      	bx	lr

080085be <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80085be:	b480      	push	{r7}
 80085c0:	b085      	sub	sp, #20
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
 80085c6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085ce:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <USBD_CDC_SetRxBuffer+0x1c>
  {
    return (uint8_t)USBD_FAIL;
 80085d6:	2303      	movs	r3, #3
 80085d8:	e004      	b.n	80085e4 <USBD_CDC_SetRxBuffer+0x26>
  }

  hcdc->RxBuffer = pbuff;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	683a      	ldr	r2, [r7, #0]
 80085de:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80085e2:	2300      	movs	r3, #0
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr

080085f0 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80085fe:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8008600:	2301      	movs	r3, #1
 8008602:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClassData == NULL)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800860a:	2b00      	cmp	r3, #0
 800860c:	d101      	bne.n	8008612 <USBD_CDC_TransmitPacket+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800860e:	2303      	movs	r3, #3
 8008610:	e01a      	b.n	8008648 <USBD_CDC_TransmitPacket+0x58>
  }

  if (hcdc->TxState == 0U)
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8008618:	2b00      	cmp	r3, #0
 800861a:	d114      	bne.n	8008646 <USBD_CDC_TransmitPacket+0x56>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800861c:	68bb      	ldr	r3, [r7, #8]
 800861e:	2201      	movs	r2, #1
 8008620:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8008624:	68bb      	ldr	r3, [r7, #8]
 8008626:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer, hcdc->TxLength);
 800862e:	68bb      	ldr	r3, [r7, #8]
 8008630:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800863a:	2181      	movs	r1, #129	; 0x81
 800863c:	6878      	ldr	r0, [r7, #4]
 800863e:	f001 fd8b 	bl	800a158 <USBD_LL_Transmit>

    ret = USBD_OK;
 8008642:	2300      	movs	r3, #0
 8008644:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8008646:	7bfb      	ldrb	r3, [r7, #15]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3710      	adds	r7, #16
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8008650:	b580      	push	{r7, lr}
 8008652:	b084      	sub	sp, #16
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 800865e:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData == NULL)
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008666:	2b00      	cmp	r3, #0
 8008668:	d101      	bne.n	800866e <USBD_CDC_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 800866a:	2303      	movs	r3, #3
 800866c:	e016      	b.n	800869c <USBD_CDC_ReceivePacket+0x4c>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	7c1b      	ldrb	r3, [r3, #16]
 8008672:	2b00      	cmp	r3, #0
 8008674:	d109      	bne.n	800868a <USBD_CDC_ReceivePacket+0x3a>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800867c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008680:	2101      	movs	r1, #1
 8008682:	6878      	ldr	r0, [r7, #4]
 8008684:	f001 fd89 	bl	800a19a <USBD_LL_PrepareReceive>
 8008688:	e007      	b.n	800869a <USBD_CDC_ReceivePacket+0x4a>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800868a:	68fb      	ldr	r3, [r7, #12]
 800868c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8008690:	2340      	movs	r3, #64	; 0x40
 8008692:	2101      	movs	r1, #1
 8008694:	6878      	ldr	r0, [r7, #4]
 8008696:	f001 fd80 	bl	800a19a <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800869a:	2300      	movs	r3, #0
}
 800869c:	4618      	mov	r0, r3
 800869e:	3710      	adds	r7, #16
 80086a0:	46bd      	mov	sp, r7
 80086a2:	bd80      	pop	{r7, pc}

080086a4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b086      	sub	sp, #24
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	60f8      	str	r0, [r7, #12]
 80086ac:	60b9      	str	r1, [r7, #8]
 80086ae:	4613      	mov	r3, r2
 80086b0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d101      	bne.n	80086bc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80086b8:	2303      	movs	r3, #3
 80086ba:	e01f      	b.n	80086fc <USBD_Init+0x58>
  }

  /* Unlink previous class resources */
  pdev->pClass = NULL;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2200      	movs	r2, #0
 80086c0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData = NULL;
 80086c4:	68fb      	ldr	r3, [r7, #12]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f8c3 22c0 	str.w	r2, [r3, #704]	; 0x2c0
  pdev->pConfDesc = NULL;
 80086cc:	68fb      	ldr	r3, [r7, #12]
 80086ce:	2200      	movs	r2, #0
 80086d0:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d003      	beq.n	80086e2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	68ba      	ldr	r2, [r7, #8]
 80086de:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80086e2:	68fb      	ldr	r3, [r7, #12]
 80086e4:	2201      	movs	r2, #1
 80086e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	79fa      	ldrb	r2, [r7, #7]
 80086ee:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80086f0:	68f8      	ldr	r0, [r7, #12]
 80086f2:	f001 fbe7 	bl	8009ec4 <USBD_LL_Init>
 80086f6:	4603      	mov	r3, r0
 80086f8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80086fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80086fc:	4618      	mov	r0, r3
 80086fe:	3718      	adds	r7, #24
 8008700:	46bd      	mov	sp, r7
 8008702:	bd80      	pop	{r7, pc}

08008704 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b084      	sub	sp, #16
 8008708:	af00      	add	r7, sp, #0
 800870a:	6078      	str	r0, [r7, #4]
 800870c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800870e:	2300      	movs	r3, #0
 8008710:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d101      	bne.n	800871c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    return USBD_FAIL;
 8008718:	2303      	movs	r3, #3
 800871a:	e016      	b.n	800874a <USBD_RegisterClass+0x46>
  }

  /* link the class to the USB Device handle */
  pdev->pClass = pclass;
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass->GetFSConfigDescriptor != NULL)
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	2b00      	cmp	r3, #0
 800872e:	d00b      	beq.n	8008748 <USBD_RegisterClass+0x44>
  {
    pdev->pConfDesc = (void *)pdev->pClass->GetFSConfigDescriptor(&len);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008736:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008738:	f107 020e 	add.w	r2, r7, #14
 800873c:	4610      	mov	r0, r2
 800873e:	4798      	blx	r3
 8008740:	4602      	mov	r2, r0
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	f8c3 22cc 	str.w	r2, [r3, #716]	; 0x2cc
  }
#endif /* USE_USB_FS */

  return USBD_OK;
 8008748:	2300      	movs	r3, #0
}
 800874a:	4618      	mov	r0, r3
 800874c:	3710      	adds	r7, #16
 800874e:	46bd      	mov	sp, r7
 8008750:	bd80      	pop	{r7, pc}

08008752 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8008752:	b580      	push	{r7, lr}
 8008754:	b082      	sub	sp, #8
 8008756:	af00      	add	r7, sp, #0
 8008758:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f001 fc12 	bl	8009f84 <USBD_LL_Start>
 8008760:	4603      	mov	r3, r0
}
 8008762:	4618      	mov	r0, r3
 8008764:	3708      	adds	r7, #8
 8008766:	46bd      	mov	sp, r7
 8008768:	bd80      	pop	{r7, pc}

0800876a <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 800876a:	b480      	push	{r7}
 800876c:	b083      	sub	sp, #12
 800876e:	af00      	add	r7, sp, #0
 8008770:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8008772:	2300      	movs	r3, #0
}
 8008774:	4618      	mov	r0, r3
 8008776:	370c      	adds	r7, #12
 8008778:	46bd      	mov	sp, r7
 800877a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800877e:	4770      	bx	lr

08008780 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8008780:	b580      	push	{r7, lr}
 8008782:	b084      	sub	sp, #16
 8008784:	af00      	add	r7, sp, #0
 8008786:	6078      	str	r0, [r7, #4]
 8008788:	460b      	mov	r3, r1
 800878a:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_FAIL;
 800878c:	2303      	movs	r3, #3
 800878e:	73fb      	strb	r3, [r7, #15]

  if (pdev->pClass != NULL)
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008796:	2b00      	cmp	r3, #0
 8008798:	d009      	beq.n	80087ae <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass->Init(pdev, cfgidx);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	78fa      	ldrb	r2, [r7, #3]
 80087a4:	4611      	mov	r1, r2
 80087a6:	6878      	ldr	r0, [r7, #4]
 80087a8:	4798      	blx	r3
 80087aa:	4603      	mov	r3, r0
 80087ac:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 80087ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80087b0:	4618      	mov	r0, r3
 80087b2:	3710      	adds	r7, #16
 80087b4:	46bd      	mov	sp, r7
 80087b6:	bd80      	pop	{r7, pc}

080087b8 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80087b8:	b580      	push	{r7, lr}
 80087ba:	b082      	sub	sp, #8
 80087bc:	af00      	add	r7, sp, #0
 80087be:	6078      	str	r0, [r7, #4]
 80087c0:	460b      	mov	r3, r1
 80087c2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration and De-initialize the Class process */
  if (pdev->pClass != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	d007      	beq.n	80087de <USBD_ClrClassConfig+0x26>
  {
    pdev->pClass->DeInit(pdev, cfgidx);
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087d4:	685b      	ldr	r3, [r3, #4]
 80087d6:	78fa      	ldrb	r2, [r7, #3]
 80087d8:	4611      	mov	r1, r2
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	4798      	blx	r3
  }

  return USBD_OK;
 80087de:	2300      	movs	r3, #0
}
 80087e0:	4618      	mov	r0, r3
 80087e2:	3708      	adds	r7, #8
 80087e4:	46bd      	mov	sp, r7
 80087e6:	bd80      	pop	{r7, pc}

080087e8 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b084      	sub	sp, #16
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80087f8:	6839      	ldr	r1, [r7, #0]
 80087fa:	4618      	mov	r0, r3
 80087fc:	f000 ff46 	bl	800968c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	2201      	movs	r2, #1
 8008804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800880e:	461a      	mov	r2, r3
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800881c:	f003 031f 	and.w	r3, r3, #31
 8008820:	2b02      	cmp	r3, #2
 8008822:	d01a      	beq.n	800885a <USBD_LL_SetupStage+0x72>
 8008824:	2b02      	cmp	r3, #2
 8008826:	d822      	bhi.n	800886e <USBD_LL_SetupStage+0x86>
 8008828:	2b00      	cmp	r3, #0
 800882a:	d002      	beq.n	8008832 <USBD_LL_SetupStage+0x4a>
 800882c:	2b01      	cmp	r3, #1
 800882e:	d00a      	beq.n	8008846 <USBD_LL_SetupStage+0x5e>
 8008830:	e01d      	b.n	800886e <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008838:	4619      	mov	r1, r3
 800883a:	6878      	ldr	r0, [r7, #4]
 800883c:	f000 f9ee 	bl	8008c1c <USBD_StdDevReq>
 8008840:	4603      	mov	r3, r0
 8008842:	73fb      	strb	r3, [r7, #15]
      break;
 8008844:	e020      	b.n	8008888 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800884c:	4619      	mov	r1, r3
 800884e:	6878      	ldr	r0, [r7, #4]
 8008850:	f000 fa52 	bl	8008cf8 <USBD_StdItfReq>
 8008854:	4603      	mov	r3, r0
 8008856:	73fb      	strb	r3, [r7, #15]
      break;
 8008858:	e016      	b.n	8008888 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8008860:	4619      	mov	r1, r3
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fa91 	bl	8008d8a <USBD_StdEPReq>
 8008868:	4603      	mov	r3, r0
 800886a:	73fb      	strb	r3, [r7, #15]
      break;
 800886c:	e00c      	b.n	8008888 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8008874:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8008878:	b2db      	uxtb	r3, r3
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 fbe1 	bl	800a044 <USBD_LL_StallEP>
 8008882:	4603      	mov	r3, r0
 8008884:	73fb      	strb	r3, [r7, #15]
      break;
 8008886:	bf00      	nop
  }

  return ret;
 8008888:	7bfb      	ldrb	r3, [r7, #15]
}
 800888a:	4618      	mov	r0, r3
 800888c:	3710      	adds	r7, #16
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b086      	sub	sp, #24
 8008896:	af00      	add	r7, sp, #0
 8008898:	60f8      	str	r0, [r7, #12]
 800889a:	460b      	mov	r3, r1
 800889c:	607a      	str	r2, [r7, #4]
 800889e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 80088a0:	7afb      	ldrb	r3, [r7, #11]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d138      	bne.n	8008918 <USBD_LL_DataOutStage+0x86>
  {
    pep = &pdev->ep_out[0];
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80088ac:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80088b4:	2b03      	cmp	r3, #3
 80088b6:	d14a      	bne.n	800894e <USBD_LL_DataOutStage+0xbc>
    {
      if (pep->rem_length > pep->maxpacket)
 80088b8:	693b      	ldr	r3, [r7, #16]
 80088ba:	689a      	ldr	r2, [r3, #8]
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	429a      	cmp	r2, r3
 80088c2:	d913      	bls.n	80088ec <USBD_LL_DataOutStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	689a      	ldr	r2, [r3, #8]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	68db      	ldr	r3, [r3, #12]
 80088cc:	1ad2      	subs	r2, r2, r3
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80088d2:	693b      	ldr	r3, [r7, #16]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	693b      	ldr	r3, [r7, #16]
 80088d8:	689b      	ldr	r3, [r3, #8]
 80088da:	4293      	cmp	r3, r2
 80088dc:	bf28      	it	cs
 80088de:	4613      	movcs	r3, r2
 80088e0:	461a      	mov	r2, r3
 80088e2:	6879      	ldr	r1, [r7, #4]
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 ffc5 	bl	8009874 <USBD_CtlContinueRx>
 80088ea:	e030      	b.n	800894e <USBD_LL_DataOutStage+0xbc>
      }
      else
      {
        if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80088f2:	b2db      	uxtb	r3, r3
 80088f4:	2b03      	cmp	r3, #3
 80088f6:	d10b      	bne.n	8008910 <USBD_LL_DataOutStage+0x7e>
        {
          if (pdev->pClass->EP0_RxReady != NULL)
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80088fe:	691b      	ldr	r3, [r3, #16]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <USBD_LL_DataOutStage+0x7e>
          {
            pdev->pClass->EP0_RxReady(pdev);
 8008904:	68fb      	ldr	r3, [r7, #12]
 8008906:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800890a:	691b      	ldr	r3, [r3, #16]
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	4798      	blx	r3
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f000 ffc0 	bl	8009896 <USBD_CtlSendStatus>
 8008916:	e01a      	b.n	800894e <USBD_LL_DataOutStage+0xbc>
#endif
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008918:	68fb      	ldr	r3, [r7, #12]
 800891a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800891e:	b2db      	uxtb	r3, r3
 8008920:	2b03      	cmp	r3, #3
 8008922:	d114      	bne.n	800894e <USBD_LL_DataOutStage+0xbc>
    {
      if (pdev->pClass->DataOut != NULL)
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800892a:	699b      	ldr	r3, [r3, #24]
 800892c:	2b00      	cmp	r3, #0
 800892e:	d00e      	beq.n	800894e <USBD_LL_DataOutStage+0xbc>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataOut(pdev, epnum);
 8008930:	68fb      	ldr	r3, [r7, #12]
 8008932:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008936:	699b      	ldr	r3, [r3, #24]
 8008938:	7afa      	ldrb	r2, [r7, #11]
 800893a:	4611      	mov	r1, r2
 800893c:	68f8      	ldr	r0, [r7, #12]
 800893e:	4798      	blx	r3
 8008940:	4603      	mov	r3, r0
 8008942:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008944:	7dfb      	ldrb	r3, [r7, #23]
 8008946:	2b00      	cmp	r3, #0
 8008948:	d001      	beq.n	800894e <USBD_LL_DataOutStage+0xbc>
        {
          return ret;
 800894a:	7dfb      	ldrb	r3, [r7, #23]
 800894c:	e000      	b.n	8008950 <USBD_LL_DataOutStage+0xbe>
        }
      }
    }
  }

  return USBD_OK;
 800894e:	2300      	movs	r3, #0
}
 8008950:	4618      	mov	r0, r3
 8008952:	3718      	adds	r7, #24
 8008954:	46bd      	mov	sp, r7
 8008956:	bd80      	pop	{r7, pc}

08008958 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	60f8      	str	r0, [r7, #12]
 8008960:	460b      	mov	r3, r1
 8008962:	607a      	str	r2, [r7, #4]
 8008964:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;

  if (epnum == 0U)
 8008966:	7afb      	ldrb	r3, [r7, #11]
 8008968:	2b00      	cmp	r3, #0
 800896a:	d16b      	bne.n	8008a44 <USBD_LL_DataInStage+0xec>
  {
    pep = &pdev->ep_in[0];
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	3314      	adds	r3, #20
 8008970:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8008978:	2b02      	cmp	r3, #2
 800897a:	d156      	bne.n	8008a2a <USBD_LL_DataInStage+0xd2>
    {
      if (pep->rem_length > pep->maxpacket)
 800897c:	693b      	ldr	r3, [r7, #16]
 800897e:	689a      	ldr	r2, [r3, #8]
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	68db      	ldr	r3, [r3, #12]
 8008984:	429a      	cmp	r2, r3
 8008986:	d914      	bls.n	80089b2 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	689a      	ldr	r2, [r3, #8]
 800898c:	693b      	ldr	r3, [r7, #16]
 800898e:	68db      	ldr	r3, [r3, #12]
 8008990:	1ad2      	subs	r2, r2, r3
 8008992:	693b      	ldr	r3, [r7, #16]
 8008994:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	689b      	ldr	r3, [r3, #8]
 800899a:	461a      	mov	r2, r3
 800899c:	6879      	ldr	r1, [r7, #4]
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f000 ff3a 	bl	8009818 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089a4:	2300      	movs	r3, #0
 80089a6:	2200      	movs	r2, #0
 80089a8:	2100      	movs	r1, #0
 80089aa:	68f8      	ldr	r0, [r7, #12]
 80089ac:	f001 fbf5 	bl	800a19a <USBD_LL_PrepareReceive>
 80089b0:	e03b      	b.n	8008a2a <USBD_LL_DataInStage+0xd2>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80089b2:	693b      	ldr	r3, [r7, #16]
 80089b4:	68da      	ldr	r2, [r3, #12]
 80089b6:	693b      	ldr	r3, [r7, #16]
 80089b8:	689b      	ldr	r3, [r3, #8]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d11c      	bne.n	80089f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	685a      	ldr	r2, [r3, #4]
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d316      	bcc.n	80089f8 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80089ca:	693b      	ldr	r3, [r7, #16]
 80089cc:	685a      	ldr	r2, [r3, #4]
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d20f      	bcs.n	80089f8 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80089d8:	2200      	movs	r2, #0
 80089da:	2100      	movs	r1, #0
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f000 ff1b 	bl	8009818 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	2200      	movs	r2, #0
 80089e6:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80089ea:	2300      	movs	r3, #0
 80089ec:	2200      	movs	r2, #0
 80089ee:	2100      	movs	r1, #0
 80089f0:	68f8      	ldr	r0, [r7, #12]
 80089f2:	f001 fbd2 	bl	800a19a <USBD_LL_PrepareReceive>
 80089f6:	e018      	b.n	8008a2a <USBD_LL_DataInStage+0xd2>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80089fe:	b2db      	uxtb	r3, r3
 8008a00:	2b03      	cmp	r3, #3
 8008a02:	d10b      	bne.n	8008a1c <USBD_LL_DataInStage+0xc4>
          {
            if (pdev->pClass->EP0_TxSent != NULL)
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a0a:	68db      	ldr	r3, [r3, #12]
 8008a0c:	2b00      	cmp	r3, #0
 8008a0e:	d005      	beq.n	8008a1c <USBD_LL_DataInStage+0xc4>
            {
              pdev->pClass->EP0_TxSent(pdev);
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a16:	68db      	ldr	r3, [r3, #12]
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8008a1c:	2180      	movs	r1, #128	; 0x80
 8008a1e:	68f8      	ldr	r0, [r7, #12]
 8008a20:	f001 fb10 	bl	800a044 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8008a24:	68f8      	ldr	r0, [r7, #12]
 8008a26:	f000 ff49 	bl	80098bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode == 1U)
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8008a30:	2b01      	cmp	r3, #1
 8008a32:	d122      	bne.n	8008a7a <USBD_LL_DataInStage+0x122>
    {
      (void)USBD_RunTestMode(pdev);
 8008a34:	68f8      	ldr	r0, [r7, #12]
 8008a36:	f7ff fe98 	bl	800876a <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8008a3a:	68fb      	ldr	r3, [r7, #12]
 8008a3c:	2200      	movs	r2, #0
 8008a3e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8008a42:	e01a      	b.n	8008a7a <USBD_LL_DataInStage+0x122>
    }
  }
  else
  {
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a4a:	b2db      	uxtb	r3, r3
 8008a4c:	2b03      	cmp	r3, #3
 8008a4e:	d114      	bne.n	8008a7a <USBD_LL_DataInStage+0x122>
    {
      if (pdev->pClass->DataIn != NULL)
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a56:	695b      	ldr	r3, [r3, #20]
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d00e      	beq.n	8008a7a <USBD_LL_DataInStage+0x122>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->DataIn(pdev, epnum);
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008a62:	695b      	ldr	r3, [r3, #20]
 8008a64:	7afa      	ldrb	r2, [r7, #11]
 8008a66:	4611      	mov	r1, r2
 8008a68:	68f8      	ldr	r0, [r7, #12]
 8008a6a:	4798      	blx	r3
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	75fb      	strb	r3, [r7, #23]

        if (ret != USBD_OK)
 8008a70:	7dfb      	ldrb	r3, [r7, #23]
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d001      	beq.n	8008a7a <USBD_LL_DataInStage+0x122>
        {
          return ret;
 8008a76:	7dfb      	ldrb	r3, [r7, #23]
 8008a78:	e000      	b.n	8008a7c <USBD_LL_DataInStage+0x124>
        }
      }
    }
  }

  return USBD_OK;
 8008a7a:	2300      	movs	r3, #0
}
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	3718      	adds	r7, #24
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}

08008a84 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8008a84:	b580      	push	{r7, lr}
 8008a86:	b082      	sub	sp, #8
 8008a88:	af00      	add	r7, sp, #0
 8008a8a:	6078      	str	r0, [r7, #4]
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2201      	movs	r2, #1
 8008a90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	2200      	movs	r2, #0
 8008a98:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2200      	movs	r2, #0
 8008aa0:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8008aa2:	687b      	ldr	r3, [r7, #4]
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4

  if (pdev->pClass == NULL)
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d101      	bne.n	8008ab8 <USBD_LL_Reset+0x34>
  {
    return USBD_FAIL;
 8008ab4:	2303      	movs	r3, #3
 8008ab6:	e02f      	b.n	8008b18 <USBD_LL_Reset+0x94>
  }

  if (pdev->pClassData != NULL)
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d00f      	beq.n	8008ae2 <USBD_LL_Reset+0x5e>
  {
    if (pdev->pClass->DeInit != NULL)
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d009      	beq.n	8008ae2 <USBD_LL_Reset+0x5e>
    {
      (void)pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ad4:	685b      	ldr	r3, [r3, #4]
 8008ad6:	687a      	ldr	r2, [r7, #4]
 8008ad8:	6852      	ldr	r2, [r2, #4]
 8008ada:	b2d2      	uxtb	r2, r2
 8008adc:	4611      	mov	r1, r2
 8008ade:	6878      	ldr	r0, [r7, #4]
 8008ae0:	4798      	blx	r3
    }
  }

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008ae2:	2340      	movs	r3, #64	; 0x40
 8008ae4:	2200      	movs	r2, #0
 8008ae6:	2100      	movs	r1, #0
 8008ae8:	6878      	ldr	r0, [r7, #4]
 8008aea:	f001 fa66 	bl	8009fba <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2201      	movs	r2, #1
 8008af2:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	2240      	movs	r2, #64	; 0x40
 8008afa:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8008afe:	2340      	movs	r3, #64	; 0x40
 8008b00:	2200      	movs	r2, #0
 8008b02:	2180      	movs	r1, #128	; 0x80
 8008b04:	6878      	ldr	r0, [r7, #4]
 8008b06:	f001 fa58 	bl	8009fba <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	2201      	movs	r2, #1
 8008b0e:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	2240      	movs	r2, #64	; 0x40
 8008b14:	621a      	str	r2, [r3, #32]

  return USBD_OK;
 8008b16:	2300      	movs	r3, #0
}
 8008b18:	4618      	mov	r0, r3
 8008b1a:	3708      	adds	r7, #8
 8008b1c:	46bd      	mov	sp, r7
 8008b1e:	bd80      	pop	{r7, pc}

08008b20 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8008b20:	b480      	push	{r7}
 8008b22:	b083      	sub	sp, #12
 8008b24:	af00      	add	r7, sp, #0
 8008b26:	6078      	str	r0, [r7, #4]
 8008b28:	460b      	mov	r3, r1
 8008b2a:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	78fa      	ldrb	r2, [r7, #3]
 8008b30:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	370c      	adds	r7, #12
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b3e:	4770      	bx	lr

08008b40 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8008b40:	b480      	push	{r7}
 8008b42:	b083      	sub	sp, #12
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b4e:	b2da      	uxtb	r2, r3
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	2204      	movs	r2, #4
 8008b5a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8008b5e:	2300      	movs	r3, #0
}
 8008b60:	4618      	mov	r0, r3
 8008b62:	370c      	adds	r7, #12
 8008b64:	46bd      	mov	sp, r7
 8008b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b6a:	4770      	bx	lr

08008b6c <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	b083      	sub	sp, #12
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b7a:	b2db      	uxtb	r3, r3
 8008b7c:	2b04      	cmp	r3, #4
 8008b7e:	d106      	bne.n	8008b8e <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8008b86:	b2da      	uxtb	r2, r3
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8008b8e:	2300      	movs	r3, #0
}
 8008b90:	4618      	mov	r0, r3
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b082      	sub	sp, #8
 8008ba0:	af00      	add	r7, sp, #0
 8008ba2:	6078      	str	r0, [r7, #4]
  if (pdev->pClass == NULL)
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d101      	bne.n	8008bb2 <USBD_LL_SOF+0x16>
  {
    return USBD_FAIL;
 8008bae:	2303      	movs	r3, #3
 8008bb0:	e012      	b.n	8008bd8 <USBD_LL_SOF+0x3c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b03      	cmp	r3, #3
 8008bbc:	d10b      	bne.n	8008bd6 <USBD_LL_SOF+0x3a>
  {
    if (pdev->pClass->SOF != NULL)
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bc4:	69db      	ldr	r3, [r3, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d005      	beq.n	8008bd6 <USBD_LL_SOF+0x3a>
    {
      (void)pdev->pClass->SOF(pdev);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008bd0:	69db      	ldr	r3, [r3, #28]
 8008bd2:	6878      	ldr	r0, [r7, #4]
 8008bd4:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008bd6:	2300      	movs	r3, #0
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3708      	adds	r7, #8
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	bd80      	pop	{r7, pc}

08008be0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008be0:	b480      	push	{r7}
 8008be2:	b087      	sub	sp, #28
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008bec:	697b      	ldr	r3, [r7, #20]
 8008bee:	781b      	ldrb	r3, [r3, #0]
 8008bf0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008bf2:	697b      	ldr	r3, [r7, #20]
 8008bf4:	3301      	adds	r3, #1
 8008bf6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8008bf8:	697b      	ldr	r3, [r7, #20]
 8008bfa:	781b      	ldrb	r3, [r3, #0]
 8008bfc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008bfe:	8a3b      	ldrh	r3, [r7, #16]
 8008c00:	021b      	lsls	r3, r3, #8
 8008c02:	b21a      	sxth	r2, r3
 8008c04:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008c08:	4313      	orrs	r3, r2
 8008c0a:	b21b      	sxth	r3, r3
 8008c0c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008c0e:	89fb      	ldrh	r3, [r7, #14]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	371c      	adds	r7, #28
 8008c14:	46bd      	mov	sp, r7
 8008c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1a:	4770      	bx	lr

08008c1c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c1c:	b580      	push	{r7, lr}
 8008c1e:	b084      	sub	sp, #16
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
 8008c24:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008c26:	2300      	movs	r3, #0
 8008c28:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	781b      	ldrb	r3, [r3, #0]
 8008c2e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008c32:	2b40      	cmp	r3, #64	; 0x40
 8008c34:	d005      	beq.n	8008c42 <USBD_StdDevReq+0x26>
 8008c36:	2b40      	cmp	r3, #64	; 0x40
 8008c38:	d853      	bhi.n	8008ce2 <USBD_StdDevReq+0xc6>
 8008c3a:	2b00      	cmp	r3, #0
 8008c3c:	d00b      	beq.n	8008c56 <USBD_StdDevReq+0x3a>
 8008c3e:	2b20      	cmp	r3, #32
 8008c40:	d14f      	bne.n	8008ce2 <USBD_StdDevReq+0xc6>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	4798      	blx	r3
 8008c50:	4603      	mov	r3, r0
 8008c52:	73fb      	strb	r3, [r7, #15]
      break;
 8008c54:	e04a      	b.n	8008cec <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	785b      	ldrb	r3, [r3, #1]
 8008c5a:	2b09      	cmp	r3, #9
 8008c5c:	d83b      	bhi.n	8008cd6 <USBD_StdDevReq+0xba>
 8008c5e:	a201      	add	r2, pc, #4	; (adr r2, 8008c64 <USBD_StdDevReq+0x48>)
 8008c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c64:	08008cb9 	.word	0x08008cb9
 8008c68:	08008ccd 	.word	0x08008ccd
 8008c6c:	08008cd7 	.word	0x08008cd7
 8008c70:	08008cc3 	.word	0x08008cc3
 8008c74:	08008cd7 	.word	0x08008cd7
 8008c78:	08008c97 	.word	0x08008c97
 8008c7c:	08008c8d 	.word	0x08008c8d
 8008c80:	08008cd7 	.word	0x08008cd7
 8008c84:	08008caf 	.word	0x08008caf
 8008c88:	08008ca1 	.word	0x08008ca1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8008c8c:	6839      	ldr	r1, [r7, #0]
 8008c8e:	6878      	ldr	r0, [r7, #4]
 8008c90:	f000 f9de 	bl	8009050 <USBD_GetDescriptor>
          break;
 8008c94:	e024      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008c96:	6839      	ldr	r1, [r7, #0]
 8008c98:	6878      	ldr	r0, [r7, #4]
 8008c9a:	f000 fb6d 	bl	8009378 <USBD_SetAddress>
          break;
 8008c9e:	e01f      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8008ca0:	6839      	ldr	r1, [r7, #0]
 8008ca2:	6878      	ldr	r0, [r7, #4]
 8008ca4:	f000 fbac 	bl	8009400 <USBD_SetConfig>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	73fb      	strb	r3, [r7, #15]
          break;
 8008cac:	e018      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8008cae:	6839      	ldr	r1, [r7, #0]
 8008cb0:	6878      	ldr	r0, [r7, #4]
 8008cb2:	f000 fc4b 	bl	800954c <USBD_GetConfig>
          break;
 8008cb6:	e013      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008cb8:	6839      	ldr	r1, [r7, #0]
 8008cba:	6878      	ldr	r0, [r7, #4]
 8008cbc:	f000 fc7c 	bl	80095b8 <USBD_GetStatus>
          break;
 8008cc0:	e00e      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8008cc2:	6839      	ldr	r1, [r7, #0]
 8008cc4:	6878      	ldr	r0, [r7, #4]
 8008cc6:	f000 fcab 	bl	8009620 <USBD_SetFeature>
          break;
 8008cca:	e009      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008ccc:	6839      	ldr	r1, [r7, #0]
 8008cce:	6878      	ldr	r0, [r7, #4]
 8008cd0:	f000 fcba 	bl	8009648 <USBD_ClrFeature>
          break;
 8008cd4:	e004      	b.n	8008ce0 <USBD_StdDevReq+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8008cd6:	6839      	ldr	r1, [r7, #0]
 8008cd8:	6878      	ldr	r0, [r7, #4]
 8008cda:	f000 fd11 	bl	8009700 <USBD_CtlError>
          break;
 8008cde:	bf00      	nop
      }
      break;
 8008ce0:	e004      	b.n	8008cec <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 8008ce2:	6839      	ldr	r1, [r7, #0]
 8008ce4:	6878      	ldr	r0, [r7, #4]
 8008ce6:	f000 fd0b 	bl	8009700 <USBD_CtlError>
      break;
 8008cea:	bf00      	nop
  }

  return ret;
 8008cec:	7bfb      	ldrb	r3, [r7, #15]
}
 8008cee:	4618      	mov	r0, r3
 8008cf0:	3710      	adds	r7, #16
 8008cf2:	46bd      	mov	sp, r7
 8008cf4:	bd80      	pop	{r7, pc}
 8008cf6:	bf00      	nop

08008cf8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	781b      	ldrb	r3, [r3, #0]
 8008d0a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008d0e:	2b40      	cmp	r3, #64	; 0x40
 8008d10:	d005      	beq.n	8008d1e <USBD_StdItfReq+0x26>
 8008d12:	2b40      	cmp	r3, #64	; 0x40
 8008d14:	d82f      	bhi.n	8008d76 <USBD_StdItfReq+0x7e>
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d001      	beq.n	8008d1e <USBD_StdItfReq+0x26>
 8008d1a:	2b20      	cmp	r3, #32
 8008d1c:	d12b      	bne.n	8008d76 <USBD_StdItfReq+0x7e>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d24:	b2db      	uxtb	r3, r3
 8008d26:	3b01      	subs	r3, #1
 8008d28:	2b02      	cmp	r3, #2
 8008d2a:	d81d      	bhi.n	8008d68 <USBD_StdItfReq+0x70>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008d2c:	683b      	ldr	r3, [r7, #0]
 8008d2e:	889b      	ldrh	r3, [r3, #4]
 8008d30:	b2db      	uxtb	r3, r3
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d813      	bhi.n	8008d5e <USBD_StdItfReq+0x66>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008d3c:	689b      	ldr	r3, [r3, #8]
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	4798      	blx	r3
 8008d44:	4603      	mov	r3, r0
 8008d46:	73fb      	strb	r3, [r7, #15]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	88db      	ldrh	r3, [r3, #6]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d110      	bne.n	8008d72 <USBD_StdItfReq+0x7a>
 8008d50:	7bfb      	ldrb	r3, [r7, #15]
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d10d      	bne.n	8008d72 <USBD_StdItfReq+0x7a>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008d56:	6878      	ldr	r0, [r7, #4]
 8008d58:	f000 fd9d 	bl	8009896 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8008d5c:	e009      	b.n	8008d72 <USBD_StdItfReq+0x7a>
            USBD_CtlError(pdev, req);
 8008d5e:	6839      	ldr	r1, [r7, #0]
 8008d60:	6878      	ldr	r0, [r7, #4]
 8008d62:	f000 fccd 	bl	8009700 <USBD_CtlError>
          break;
 8008d66:	e004      	b.n	8008d72 <USBD_StdItfReq+0x7a>

        default:
          USBD_CtlError(pdev, req);
 8008d68:	6839      	ldr	r1, [r7, #0]
 8008d6a:	6878      	ldr	r0, [r7, #4]
 8008d6c:	f000 fcc8 	bl	8009700 <USBD_CtlError>
          break;
 8008d70:	e000      	b.n	8008d74 <USBD_StdItfReq+0x7c>
          break;
 8008d72:	bf00      	nop
      }
      break;
 8008d74:	e004      	b.n	8008d80 <USBD_StdItfReq+0x88>

    default:
      USBD_CtlError(pdev, req);
 8008d76:	6839      	ldr	r1, [r7, #0]
 8008d78:	6878      	ldr	r0, [r7, #4]
 8008d7a:	f000 fcc1 	bl	8009700 <USBD_CtlError>
      break;
 8008d7e:	bf00      	nop
  }

  return ret;
 8008d80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d82:	4618      	mov	r0, r3
 8008d84:	3710      	adds	r7, #16
 8008d86:	46bd      	mov	sp, r7
 8008d88:	bd80      	pop	{r7, pc}

08008d8a <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d8a:	b580      	push	{r7, lr}
 8008d8c:	b084      	sub	sp, #16
 8008d8e:	af00      	add	r7, sp, #0
 8008d90:	6078      	str	r0, [r7, #4]
 8008d92:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8008d94:	2300      	movs	r3, #0
 8008d96:	73fb      	strb	r3, [r7, #15]
  ep_addr = LOBYTE(req->wIndex);
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	889b      	ldrh	r3, [r3, #4]
 8008d9c:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008d9e:	683b      	ldr	r3, [r7, #0]
 8008da0:	781b      	ldrb	r3, [r3, #0]
 8008da2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008da6:	2b40      	cmp	r3, #64	; 0x40
 8008da8:	d007      	beq.n	8008dba <USBD_StdEPReq+0x30>
 8008daa:	2b40      	cmp	r3, #64	; 0x40
 8008dac:	f200 8145 	bhi.w	800903a <USBD_StdEPReq+0x2b0>
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d00c      	beq.n	8008dce <USBD_StdEPReq+0x44>
 8008db4:	2b20      	cmp	r3, #32
 8008db6:	f040 8140 	bne.w	800903a <USBD_StdEPReq+0x2b0>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008dc0:	689b      	ldr	r3, [r3, #8]
 8008dc2:	6839      	ldr	r1, [r7, #0]
 8008dc4:	6878      	ldr	r0, [r7, #4]
 8008dc6:	4798      	blx	r3
 8008dc8:	4603      	mov	r3, r0
 8008dca:	73fb      	strb	r3, [r7, #15]
      break;
 8008dcc:	e13a      	b.n	8009044 <USBD_StdEPReq+0x2ba>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8008dce:	683b      	ldr	r3, [r7, #0]
 8008dd0:	785b      	ldrb	r3, [r3, #1]
 8008dd2:	2b03      	cmp	r3, #3
 8008dd4:	d007      	beq.n	8008de6 <USBD_StdEPReq+0x5c>
 8008dd6:	2b03      	cmp	r3, #3
 8008dd8:	f300 8129 	bgt.w	800902e <USBD_StdEPReq+0x2a4>
 8008ddc:	2b00      	cmp	r3, #0
 8008dde:	d07f      	beq.n	8008ee0 <USBD_StdEPReq+0x156>
 8008de0:	2b01      	cmp	r3, #1
 8008de2:	d03c      	beq.n	8008e5e <USBD_StdEPReq+0xd4>
 8008de4:	e123      	b.n	800902e <USBD_StdEPReq+0x2a4>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008dec:	b2db      	uxtb	r3, r3
 8008dee:	2b02      	cmp	r3, #2
 8008df0:	d002      	beq.n	8008df8 <USBD_StdEPReq+0x6e>
 8008df2:	2b03      	cmp	r3, #3
 8008df4:	d016      	beq.n	8008e24 <USBD_StdEPReq+0x9a>
 8008df6:	e02c      	b.n	8008e52 <USBD_StdEPReq+0xc8>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008df8:	7bbb      	ldrb	r3, [r7, #14]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d00d      	beq.n	8008e1a <USBD_StdEPReq+0x90>
 8008dfe:	7bbb      	ldrb	r3, [r7, #14]
 8008e00:	2b80      	cmp	r3, #128	; 0x80
 8008e02:	d00a      	beq.n	8008e1a <USBD_StdEPReq+0x90>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e04:	7bbb      	ldrb	r3, [r7, #14]
 8008e06:	4619      	mov	r1, r3
 8008e08:	6878      	ldr	r0, [r7, #4]
 8008e0a:	f001 f91b 	bl	800a044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e0e:	2180      	movs	r1, #128	; 0x80
 8008e10:	6878      	ldr	r0, [r7, #4]
 8008e12:	f001 f917 	bl	800a044 <USBD_LL_StallEP>
 8008e16:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e18:	e020      	b.n	8008e5c <USBD_StdEPReq+0xd2>
                USBD_CtlError(pdev, req);
 8008e1a:	6839      	ldr	r1, [r7, #0]
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 fc6f 	bl	8009700 <USBD_CtlError>
              break;
 8008e22:	e01b      	b.n	8008e5c <USBD_StdEPReq+0xd2>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e24:	683b      	ldr	r3, [r7, #0]
 8008e26:	885b      	ldrh	r3, [r3, #2]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d10e      	bne.n	8008e4a <USBD_StdEPReq+0xc0>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8008e2c:	7bbb      	ldrb	r3, [r7, #14]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00b      	beq.n	8008e4a <USBD_StdEPReq+0xc0>
 8008e32:	7bbb      	ldrb	r3, [r7, #14]
 8008e34:	2b80      	cmp	r3, #128	; 0x80
 8008e36:	d008      	beq.n	8008e4a <USBD_StdEPReq+0xc0>
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	88db      	ldrh	r3, [r3, #6]
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d104      	bne.n	8008e4a <USBD_StdEPReq+0xc0>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e40:	7bbb      	ldrb	r3, [r7, #14]
 8008e42:	4619      	mov	r1, r3
 8008e44:	6878      	ldr	r0, [r7, #4]
 8008e46:	f001 f8fd 	bl	800a044 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 fd23 	bl	8009896 <USBD_CtlSendStatus>

              break;
 8008e50:	e004      	b.n	8008e5c <USBD_StdEPReq+0xd2>

            default:
              USBD_CtlError(pdev, req);
 8008e52:	6839      	ldr	r1, [r7, #0]
 8008e54:	6878      	ldr	r0, [r7, #4]
 8008e56:	f000 fc53 	bl	8009700 <USBD_CtlError>
              break;
 8008e5a:	bf00      	nop
          }
          break;
 8008e5c:	e0ec      	b.n	8009038 <USBD_StdEPReq+0x2ae>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008e64:	b2db      	uxtb	r3, r3
 8008e66:	2b02      	cmp	r3, #2
 8008e68:	d002      	beq.n	8008e70 <USBD_StdEPReq+0xe6>
 8008e6a:	2b03      	cmp	r3, #3
 8008e6c:	d016      	beq.n	8008e9c <USBD_StdEPReq+0x112>
 8008e6e:	e030      	b.n	8008ed2 <USBD_StdEPReq+0x148>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008e70:	7bbb      	ldrb	r3, [r7, #14]
 8008e72:	2b00      	cmp	r3, #0
 8008e74:	d00d      	beq.n	8008e92 <USBD_StdEPReq+0x108>
 8008e76:	7bbb      	ldrb	r3, [r7, #14]
 8008e78:	2b80      	cmp	r3, #128	; 0x80
 8008e7a:	d00a      	beq.n	8008e92 <USBD_StdEPReq+0x108>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8008e7c:	7bbb      	ldrb	r3, [r7, #14]
 8008e7e:	4619      	mov	r1, r3
 8008e80:	6878      	ldr	r0, [r7, #4]
 8008e82:	f001 f8df 	bl	800a044 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e86:	2180      	movs	r1, #128	; 0x80
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	f001 f8db 	bl	800a044 <USBD_LL_StallEP>
 8008e8e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008e90:	e025      	b.n	8008ede <USBD_StdEPReq+0x154>
                USBD_CtlError(pdev, req);
 8008e92:	6839      	ldr	r1, [r7, #0]
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f000 fc33 	bl	8009700 <USBD_CtlError>
              break;
 8008e9a:	e020      	b.n	8008ede <USBD_StdEPReq+0x154>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008e9c:	683b      	ldr	r3, [r7, #0]
 8008e9e:	885b      	ldrh	r3, [r3, #2]
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	d11b      	bne.n	8008edc <USBD_StdEPReq+0x152>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008ea4:	7bbb      	ldrb	r3, [r7, #14]
 8008ea6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d004      	beq.n	8008eb8 <USBD_StdEPReq+0x12e>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8008eae:	7bbb      	ldrb	r3, [r7, #14]
 8008eb0:	4619      	mov	r1, r3
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f001 f8e5 	bl	800a082 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8008eb8:	6878      	ldr	r0, [r7, #4]
 8008eba:	f000 fcec 	bl	8009896 <USBD_CtlSendStatus>
                ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008ec4:	689b      	ldr	r3, [r3, #8]
 8008ec6:	6839      	ldr	r1, [r7, #0]
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	4798      	blx	r3
 8008ecc:	4603      	mov	r3, r0
 8008ece:	73fb      	strb	r3, [r7, #15]
              }
              break;
 8008ed0:	e004      	b.n	8008edc <USBD_StdEPReq+0x152>

            default:
              USBD_CtlError(pdev, req);
 8008ed2:	6839      	ldr	r1, [r7, #0]
 8008ed4:	6878      	ldr	r0, [r7, #4]
 8008ed6:	f000 fc13 	bl	8009700 <USBD_CtlError>
              break;
 8008eda:	e000      	b.n	8008ede <USBD_StdEPReq+0x154>
              break;
 8008edc:	bf00      	nop
          }
          break;
 8008ede:	e0ab      	b.n	8009038 <USBD_StdEPReq+0x2ae>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008ee0:	687b      	ldr	r3, [r7, #4]
 8008ee2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ee6:	b2db      	uxtb	r3, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d002      	beq.n	8008ef2 <USBD_StdEPReq+0x168>
 8008eec:	2b03      	cmp	r3, #3
 8008eee:	d032      	beq.n	8008f56 <USBD_StdEPReq+0x1cc>
 8008ef0:	e097      	b.n	8009022 <USBD_StdEPReq+0x298>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008ef2:	7bbb      	ldrb	r3, [r7, #14]
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d007      	beq.n	8008f08 <USBD_StdEPReq+0x17e>
 8008ef8:	7bbb      	ldrb	r3, [r7, #14]
 8008efa:	2b80      	cmp	r3, #128	; 0x80
 8008efc:	d004      	beq.n	8008f08 <USBD_StdEPReq+0x17e>
              {
                USBD_CtlError(pdev, req);
 8008efe:	6839      	ldr	r1, [r7, #0]
 8008f00:	6878      	ldr	r0, [r7, #4]
 8008f02:	f000 fbfd 	bl	8009700 <USBD_CtlError>
                break;
 8008f06:	e091      	b.n	800902c <USBD_StdEPReq+0x2a2>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f08:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	da0b      	bge.n	8008f28 <USBD_StdEPReq+0x19e>
 8008f10:	7bbb      	ldrb	r3, [r7, #14]
 8008f12:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008f16:	4613      	mov	r3, r2
 8008f18:	009b      	lsls	r3, r3, #2
 8008f1a:	4413      	add	r3, r2
 8008f1c:	009b      	lsls	r3, r3, #2
 8008f1e:	3310      	adds	r3, #16
 8008f20:	687a      	ldr	r2, [r7, #4]
 8008f22:	4413      	add	r3, r2
 8008f24:	3304      	adds	r3, #4
 8008f26:	e00b      	b.n	8008f40 <USBD_StdEPReq+0x1b6>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008f28:	7bbb      	ldrb	r3, [r7, #14]
 8008f2a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008f2e:	4613      	mov	r3, r2
 8008f30:	009b      	lsls	r3, r3, #2
 8008f32:	4413      	add	r3, r2
 8008f34:	009b      	lsls	r3, r3, #2
 8008f36:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008f3a:	687a      	ldr	r2, [r7, #4]
 8008f3c:	4413      	add	r3, r2
 8008f3e:	3304      	adds	r3, #4
 8008f40:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008f42:	68bb      	ldr	r3, [r7, #8]
 8008f44:	2200      	movs	r2, #0
 8008f46:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8008f48:	68bb      	ldr	r3, [r7, #8]
 8008f4a:	2202      	movs	r2, #2
 8008f4c:	4619      	mov	r1, r3
 8008f4e:	6878      	ldr	r0, [r7, #4]
 8008f50:	f000 fc47 	bl	80097e2 <USBD_CtlSendData>
              break;
 8008f54:	e06a      	b.n	800902c <USBD_StdEPReq+0x2a2>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8008f56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	da11      	bge.n	8008f82 <USBD_StdEPReq+0x1f8>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008f5e:	7bbb      	ldrb	r3, [r7, #14]
 8008f60:	f003 020f 	and.w	r2, r3, #15
 8008f64:	6879      	ldr	r1, [r7, #4]
 8008f66:	4613      	mov	r3, r2
 8008f68:	009b      	lsls	r3, r3, #2
 8008f6a:	4413      	add	r3, r2
 8008f6c:	009b      	lsls	r3, r3, #2
 8008f6e:	440b      	add	r3, r1
 8008f70:	3324      	adds	r3, #36	; 0x24
 8008f72:	881b      	ldrh	r3, [r3, #0]
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d117      	bne.n	8008fa8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008f78:	6839      	ldr	r1, [r7, #0]
 8008f7a:	6878      	ldr	r0, [r7, #4]
 8008f7c:	f000 fbc0 	bl	8009700 <USBD_CtlError>
                  break;
 8008f80:	e054      	b.n	800902c <USBD_StdEPReq+0x2a2>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8008f82:	7bbb      	ldrb	r3, [r7, #14]
 8008f84:	f003 020f 	and.w	r2, r3, #15
 8008f88:	6879      	ldr	r1, [r7, #4]
 8008f8a:	4613      	mov	r3, r2
 8008f8c:	009b      	lsls	r3, r3, #2
 8008f8e:	4413      	add	r3, r2
 8008f90:	009b      	lsls	r3, r3, #2
 8008f92:	440b      	add	r3, r1
 8008f94:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8008f98:	881b      	ldrh	r3, [r3, #0]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d104      	bne.n	8008fa8 <USBD_StdEPReq+0x21e>
                {
                  USBD_CtlError(pdev, req);
 8008f9e:	6839      	ldr	r1, [r7, #0]
 8008fa0:	6878      	ldr	r0, [r7, #4]
 8008fa2:	f000 fbad 	bl	8009700 <USBD_CtlError>
                  break;
 8008fa6:	e041      	b.n	800902c <USBD_StdEPReq+0x2a2>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fa8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	da0b      	bge.n	8008fc8 <USBD_StdEPReq+0x23e>
 8008fb0:	7bbb      	ldrb	r3, [r7, #14]
 8008fb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8008fb6:	4613      	mov	r3, r2
 8008fb8:	009b      	lsls	r3, r3, #2
 8008fba:	4413      	add	r3, r2
 8008fbc:	009b      	lsls	r3, r3, #2
 8008fbe:	3310      	adds	r3, #16
 8008fc0:	687a      	ldr	r2, [r7, #4]
 8008fc2:	4413      	add	r3, r2
 8008fc4:	3304      	adds	r3, #4
 8008fc6:	e00b      	b.n	8008fe0 <USBD_StdEPReq+0x256>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8008fc8:	7bbb      	ldrb	r3, [r7, #14]
 8008fca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008fce:	4613      	mov	r3, r2
 8008fd0:	009b      	lsls	r3, r3, #2
 8008fd2:	4413      	add	r3, r2
 8008fd4:	009b      	lsls	r3, r3, #2
 8008fd6:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008fda:	687a      	ldr	r2, [r7, #4]
 8008fdc:	4413      	add	r3, r2
 8008fde:	3304      	adds	r3, #4
 8008fe0:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008fe2:	7bbb      	ldrb	r3, [r7, #14]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <USBD_StdEPReq+0x264>
 8008fe8:	7bbb      	ldrb	r3, [r7, #14]
 8008fea:	2b80      	cmp	r3, #128	; 0x80
 8008fec:	d103      	bne.n	8008ff6 <USBD_StdEPReq+0x26c>
              {
                pep->status = 0x0000U;
 8008fee:	68bb      	ldr	r3, [r7, #8]
 8008ff0:	2200      	movs	r2, #0
 8008ff2:	601a      	str	r2, [r3, #0]
 8008ff4:	e00e      	b.n	8009014 <USBD_StdEPReq+0x28a>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8008ff6:	7bbb      	ldrb	r3, [r7, #14]
 8008ff8:	4619      	mov	r1, r3
 8008ffa:	6878      	ldr	r0, [r7, #4]
 8008ffc:	f001 f860 	bl	800a0c0 <USBD_LL_IsStallEP>
 8009000:	4603      	mov	r3, r0
 8009002:	2b00      	cmp	r3, #0
 8009004:	d003      	beq.n	800900e <USBD_StdEPReq+0x284>
              {
                pep->status = 0x0001U;
 8009006:	68bb      	ldr	r3, [r7, #8]
 8009008:	2201      	movs	r2, #1
 800900a:	601a      	str	r2, [r3, #0]
 800900c:	e002      	b.n	8009014 <USBD_StdEPReq+0x28a>
              }
              else
              {
                pep->status = 0x0000U;
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2200      	movs	r2, #0
 8009012:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8009014:	68bb      	ldr	r3, [r7, #8]
 8009016:	2202      	movs	r2, #2
 8009018:	4619      	mov	r1, r3
 800901a:	6878      	ldr	r0, [r7, #4]
 800901c:	f000 fbe1 	bl	80097e2 <USBD_CtlSendData>
              break;
 8009020:	e004      	b.n	800902c <USBD_StdEPReq+0x2a2>

            default:
              USBD_CtlError(pdev, req);
 8009022:	6839      	ldr	r1, [r7, #0]
 8009024:	6878      	ldr	r0, [r7, #4]
 8009026:	f000 fb6b 	bl	8009700 <USBD_CtlError>
              break;
 800902a:	bf00      	nop
          }
          break;
 800902c:	e004      	b.n	8009038 <USBD_StdEPReq+0x2ae>

        default:
          USBD_CtlError(pdev, req);
 800902e:	6839      	ldr	r1, [r7, #0]
 8009030:	6878      	ldr	r0, [r7, #4]
 8009032:	f000 fb65 	bl	8009700 <USBD_CtlError>
          break;
 8009036:	bf00      	nop
      }
      break;
 8009038:	e004      	b.n	8009044 <USBD_StdEPReq+0x2ba>

    default:
      USBD_CtlError(pdev, req);
 800903a:	6839      	ldr	r1, [r7, #0]
 800903c:	6878      	ldr	r0, [r7, #4]
 800903e:	f000 fb5f 	bl	8009700 <USBD_CtlError>
      break;
 8009042:	bf00      	nop
  }

  return ret;
 8009044:	7bfb      	ldrb	r3, [r7, #15]
}
 8009046:	4618      	mov	r0, r3
 8009048:	3710      	adds	r7, #16
 800904a:	46bd      	mov	sp, r7
 800904c:	bd80      	pop	{r7, pc}
	...

08009050 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009050:	b580      	push	{r7, lr}
 8009052:	b084      	sub	sp, #16
 8009054:	af00      	add	r7, sp, #0
 8009056:	6078      	str	r0, [r7, #4]
 8009058:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800905a:	2300      	movs	r3, #0
 800905c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800905e:	2300      	movs	r3, #0
 8009060:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8009062:	2300      	movs	r3, #0
 8009064:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	885b      	ldrh	r3, [r3, #2]
 800906a:	0a1b      	lsrs	r3, r3, #8
 800906c:	b29b      	uxth	r3, r3
 800906e:	3b01      	subs	r3, #1
 8009070:	2b0e      	cmp	r3, #14
 8009072:	f200 8152 	bhi.w	800931a <USBD_GetDescriptor+0x2ca>
 8009076:	a201      	add	r2, pc, #4	; (adr r2, 800907c <USBD_GetDescriptor+0x2c>)
 8009078:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800907c:	080090ed 	.word	0x080090ed
 8009080:	08009105 	.word	0x08009105
 8009084:	08009145 	.word	0x08009145
 8009088:	0800931b 	.word	0x0800931b
 800908c:	0800931b 	.word	0x0800931b
 8009090:	080092bb 	.word	0x080092bb
 8009094:	080092e7 	.word	0x080092e7
 8009098:	0800931b 	.word	0x0800931b
 800909c:	0800931b 	.word	0x0800931b
 80090a0:	0800931b 	.word	0x0800931b
 80090a4:	0800931b 	.word	0x0800931b
 80090a8:	0800931b 	.word	0x0800931b
 80090ac:	0800931b 	.word	0x0800931b
 80090b0:	0800931b 	.word	0x0800931b
 80090b4:	080090b9 	.word	0x080090b9
  {
#if ((USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U))
    case USB_DESC_TYPE_BOS:
      if (pdev->pDesc->GetBOSDescriptor != NULL)
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090be:	69db      	ldr	r3, [r3, #28]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d00b      	beq.n	80090dc <USBD_GetDescriptor+0x8c>
      {
        pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090ca:	69db      	ldr	r3, [r3, #28]
 80090cc:	687a      	ldr	r2, [r7, #4]
 80090ce:	7c12      	ldrb	r2, [r2, #16]
 80090d0:	f107 0108 	add.w	r1, r7, #8
 80090d4:	4610      	mov	r0, r2
 80090d6:	4798      	blx	r3
 80090d8:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80090da:	e126      	b.n	800932a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80090dc:	6839      	ldr	r1, [r7, #0]
 80090de:	6878      	ldr	r0, [r7, #4]
 80090e0:	f000 fb0e 	bl	8009700 <USBD_CtlError>
        err++;
 80090e4:	7afb      	ldrb	r3, [r7, #11]
 80090e6:	3301      	adds	r3, #1
 80090e8:	72fb      	strb	r3, [r7, #11]
      break;
 80090ea:	e11e      	b.n	800932a <USBD_GetDescriptor+0x2da>
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	687a      	ldr	r2, [r7, #4]
 80090f6:	7c12      	ldrb	r2, [r2, #16]
 80090f8:	f107 0108 	add.w	r1, r7, #8
 80090fc:	4610      	mov	r0, r2
 80090fe:	4798      	blx	r3
 8009100:	60f8      	str	r0, [r7, #12]
      break;
 8009102:	e112      	b.n	800932a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	7c1b      	ldrb	r3, [r3, #16]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d10d      	bne.n	8009128 <USBD_GetDescriptor+0xd8>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8009112:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009114:	f107 0208 	add.w	r2, r7, #8
 8009118:	4610      	mov	r0, r2
 800911a:	4798      	blx	r3
 800911c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3301      	adds	r3, #1
 8009122:	2202      	movs	r2, #2
 8009124:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8009126:	e100      	b.n	800932a <USBD_GetDescriptor+0x2da>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800912e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009130:	f107 0208 	add.w	r2, r7, #8
 8009134:	4610      	mov	r0, r2
 8009136:	4798      	blx	r3
 8009138:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	3301      	adds	r3, #1
 800913e:	2202      	movs	r2, #2
 8009140:	701a      	strb	r2, [r3, #0]
      break;
 8009142:	e0f2      	b.n	800932a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	885b      	ldrh	r3, [r3, #2]
 8009148:	b2db      	uxtb	r3, r3
 800914a:	2b05      	cmp	r3, #5
 800914c:	f200 80ac 	bhi.w	80092a8 <USBD_GetDescriptor+0x258>
 8009150:	a201      	add	r2, pc, #4	; (adr r2, 8009158 <USBD_GetDescriptor+0x108>)
 8009152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009156:	bf00      	nop
 8009158:	08009171 	.word	0x08009171
 800915c:	080091a5 	.word	0x080091a5
 8009160:	080091d9 	.word	0x080091d9
 8009164:	0800920d 	.word	0x0800920d
 8009168:	08009241 	.word	0x08009241
 800916c:	08009275 	.word	0x08009275
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009176:	685b      	ldr	r3, [r3, #4]
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00b      	beq.n	8009194 <USBD_GetDescriptor+0x144>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009182:	685b      	ldr	r3, [r3, #4]
 8009184:	687a      	ldr	r2, [r7, #4]
 8009186:	7c12      	ldrb	r2, [r2, #16]
 8009188:	f107 0108 	add.w	r1, r7, #8
 800918c:	4610      	mov	r0, r2
 800918e:	4798      	blx	r3
 8009190:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009192:	e091      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009194:	6839      	ldr	r1, [r7, #0]
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 fab2 	bl	8009700 <USBD_CtlError>
            err++;
 800919c:	7afb      	ldrb	r3, [r7, #11]
 800919e:	3301      	adds	r3, #1
 80091a0:	72fb      	strb	r3, [r7, #11]
          break;
 80091a2:	e089      	b.n	80092b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d00b      	beq.n	80091c8 <USBD_GetDescriptor+0x178>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091b6:	689b      	ldr	r3, [r3, #8]
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	7c12      	ldrb	r2, [r2, #16]
 80091bc:	f107 0108 	add.w	r1, r7, #8
 80091c0:	4610      	mov	r0, r2
 80091c2:	4798      	blx	r3
 80091c4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091c6:	e077      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091c8:	6839      	ldr	r1, [r7, #0]
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 fa98 	bl	8009700 <USBD_CtlError>
            err++;
 80091d0:	7afb      	ldrb	r3, [r7, #11]
 80091d2:	3301      	adds	r3, #1
 80091d4:	72fb      	strb	r3, [r7, #11]
          break;
 80091d6:	e06f      	b.n	80092b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091de:	68db      	ldr	r3, [r3, #12]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00b      	beq.n	80091fc <USBD_GetDescriptor+0x1ac>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	687a      	ldr	r2, [r7, #4]
 80091ee:	7c12      	ldrb	r2, [r2, #16]
 80091f0:	f107 0108 	add.w	r1, r7, #8
 80091f4:	4610      	mov	r0, r2
 80091f6:	4798      	blx	r3
 80091f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80091fa:	e05d      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 80091fc:	6839      	ldr	r1, [r7, #0]
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f000 fa7e 	bl	8009700 <USBD_CtlError>
            err++;
 8009204:	7afb      	ldrb	r3, [r7, #11]
 8009206:	3301      	adds	r3, #1
 8009208:	72fb      	strb	r3, [r7, #11]
          break;
 800920a:	e055      	b.n	80092b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009212:	691b      	ldr	r3, [r3, #16]
 8009214:	2b00      	cmp	r3, #0
 8009216:	d00b      	beq.n	8009230 <USBD_GetDescriptor+0x1e0>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800921e:	691b      	ldr	r3, [r3, #16]
 8009220:	687a      	ldr	r2, [r7, #4]
 8009222:	7c12      	ldrb	r2, [r2, #16]
 8009224:	f107 0108 	add.w	r1, r7, #8
 8009228:	4610      	mov	r0, r2
 800922a:	4798      	blx	r3
 800922c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800922e:	e043      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009230:	6839      	ldr	r1, [r7, #0]
 8009232:	6878      	ldr	r0, [r7, #4]
 8009234:	f000 fa64 	bl	8009700 <USBD_CtlError>
            err++;
 8009238:	7afb      	ldrb	r3, [r7, #11]
 800923a:	3301      	adds	r3, #1
 800923c:	72fb      	strb	r3, [r7, #11]
          break;
 800923e:	e03b      	b.n	80092b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009246:	695b      	ldr	r3, [r3, #20]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d00b      	beq.n	8009264 <USBD_GetDescriptor+0x214>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009252:	695b      	ldr	r3, [r3, #20]
 8009254:	687a      	ldr	r2, [r7, #4]
 8009256:	7c12      	ldrb	r2, [r2, #16]
 8009258:	f107 0108 	add.w	r1, r7, #8
 800925c:	4610      	mov	r0, r2
 800925e:	4798      	blx	r3
 8009260:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009262:	e029      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009264:	6839      	ldr	r1, [r7, #0]
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f000 fa4a 	bl	8009700 <USBD_CtlError>
            err++;
 800926c:	7afb      	ldrb	r3, [r7, #11]
 800926e:	3301      	adds	r3, #1
 8009270:	72fb      	strb	r3, [r7, #11]
          break;
 8009272:	e021      	b.n	80092b8 <USBD_GetDescriptor+0x268>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800927a:	699b      	ldr	r3, [r3, #24]
 800927c:	2b00      	cmp	r3, #0
 800927e:	d00b      	beq.n	8009298 <USBD_GetDescriptor+0x248>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8009286:	699b      	ldr	r3, [r3, #24]
 8009288:	687a      	ldr	r2, [r7, #4]
 800928a:	7c12      	ldrb	r2, [r2, #16]
 800928c:	f107 0108 	add.w	r1, r7, #8
 8009290:	4610      	mov	r0, r2
 8009292:	4798      	blx	r3
 8009294:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8009296:	e00f      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            USBD_CtlError(pdev, req);
 8009298:	6839      	ldr	r1, [r7, #0]
 800929a:	6878      	ldr	r0, [r7, #4]
 800929c:	f000 fa30 	bl	8009700 <USBD_CtlError>
            err++;
 80092a0:	7afb      	ldrb	r3, [r7, #11]
 80092a2:	3301      	adds	r3, #1
 80092a4:	72fb      	strb	r3, [r7, #11]
          break;
 80092a6:	e007      	b.n	80092b8 <USBD_GetDescriptor+0x268>
            err++;
          }
#endif

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f000 fa28 	bl	8009700 <USBD_CtlError>
          err++;
 80092b0:	7afb      	ldrb	r3, [r7, #11]
 80092b2:	3301      	adds	r3, #1
 80092b4:	72fb      	strb	r3, [r7, #11]
#endif
          break;
 80092b6:	bf00      	nop
      }
      break;
 80092b8:	e037      	b.n	800932a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	7c1b      	ldrb	r3, [r3, #16]
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d109      	bne.n	80092d6 <USBD_GetDescriptor+0x286>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80092ca:	f107 0208 	add.w	r2, r7, #8
 80092ce:	4610      	mov	r0, r2
 80092d0:	4798      	blx	r3
 80092d2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80092d4:	e029      	b.n	800932a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 80092d6:	6839      	ldr	r1, [r7, #0]
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f000 fa11 	bl	8009700 <USBD_CtlError>
        err++;
 80092de:	7afb      	ldrb	r3, [r7, #11]
 80092e0:	3301      	adds	r3, #1
 80092e2:	72fb      	strb	r3, [r7, #11]
      break;
 80092e4:	e021      	b.n	800932a <USBD_GetDescriptor+0x2da>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	7c1b      	ldrb	r3, [r3, #16]
 80092ea:	2b00      	cmp	r3, #0
 80092ec:	d10d      	bne.n	800930a <USBD_GetDescriptor+0x2ba>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80092f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80092f6:	f107 0208 	add.w	r2, r7, #8
 80092fa:	4610      	mov	r0, r2
 80092fc:	4798      	blx	r3
 80092fe:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	3301      	adds	r3, #1
 8009304:	2207      	movs	r2, #7
 8009306:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8009308:	e00f      	b.n	800932a <USBD_GetDescriptor+0x2da>
        USBD_CtlError(pdev, req);
 800930a:	6839      	ldr	r1, [r7, #0]
 800930c:	6878      	ldr	r0, [r7, #4]
 800930e:	f000 f9f7 	bl	8009700 <USBD_CtlError>
        err++;
 8009312:	7afb      	ldrb	r3, [r7, #11]
 8009314:	3301      	adds	r3, #1
 8009316:	72fb      	strb	r3, [r7, #11]
      break;
 8009318:	e007      	b.n	800932a <USBD_GetDescriptor+0x2da>

    default:
      USBD_CtlError(pdev, req);
 800931a:	6839      	ldr	r1, [r7, #0]
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 f9ef 	bl	8009700 <USBD_CtlError>
      err++;
 8009322:	7afb      	ldrb	r3, [r7, #11]
 8009324:	3301      	adds	r3, #1
 8009326:	72fb      	strb	r3, [r7, #11]
      break;
 8009328:	bf00      	nop
  }

  if (err != 0U)
 800932a:	7afb      	ldrb	r3, [r7, #11]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d11e      	bne.n	800936e <USBD_GetDescriptor+0x31e>
  {
    return;
  }

  if (req->wLength != 0U)
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	88db      	ldrh	r3, [r3, #6]
 8009334:	2b00      	cmp	r3, #0
 8009336:	d016      	beq.n	8009366 <USBD_GetDescriptor+0x316>
  {
    if (len != 0U)
 8009338:	893b      	ldrh	r3, [r7, #8]
 800933a:	2b00      	cmp	r3, #0
 800933c:	d00e      	beq.n	800935c <USBD_GetDescriptor+0x30c>
    {
      len = MIN(len, req->wLength);
 800933e:	683b      	ldr	r3, [r7, #0]
 8009340:	88da      	ldrh	r2, [r3, #6]
 8009342:	893b      	ldrh	r3, [r7, #8]
 8009344:	4293      	cmp	r3, r2
 8009346:	bf28      	it	cs
 8009348:	4613      	movcs	r3, r2
 800934a:	b29b      	uxth	r3, r3
 800934c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800934e:	893b      	ldrh	r3, [r7, #8]
 8009350:	461a      	mov	r2, r3
 8009352:	68f9      	ldr	r1, [r7, #12]
 8009354:	6878      	ldr	r0, [r7, #4]
 8009356:	f000 fa44 	bl	80097e2 <USBD_CtlSendData>
 800935a:	e009      	b.n	8009370 <USBD_GetDescriptor+0x320>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f000 f9ce 	bl	8009700 <USBD_CtlError>
 8009364:	e004      	b.n	8009370 <USBD_GetDescriptor+0x320>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8009366:	6878      	ldr	r0, [r7, #4]
 8009368:	f000 fa95 	bl	8009896 <USBD_CtlSendStatus>
 800936c:	e000      	b.n	8009370 <USBD_GetDescriptor+0x320>
    return;
 800936e:	bf00      	nop
  }
}
 8009370:	3710      	adds	r7, #16
 8009372:	46bd      	mov	sp, r7
 8009374:	bd80      	pop	{r7, pc}
 8009376:	bf00      	nop

08009378 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8009382:	683b      	ldr	r3, [r7, #0]
 8009384:	889b      	ldrh	r3, [r3, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d131      	bne.n	80093ee <USBD_SetAddress+0x76>
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	88db      	ldrh	r3, [r3, #6]
 800938e:	2b00      	cmp	r3, #0
 8009390:	d12d      	bne.n	80093ee <USBD_SetAddress+0x76>
 8009392:	683b      	ldr	r3, [r7, #0]
 8009394:	885b      	ldrh	r3, [r3, #2]
 8009396:	2b7f      	cmp	r3, #127	; 0x7f
 8009398:	d829      	bhi.n	80093ee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800939a:	683b      	ldr	r3, [r7, #0]
 800939c:	885b      	ldrh	r3, [r3, #2]
 800939e:	b2db      	uxtb	r3, r3
 80093a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80093a4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80093ac:	b2db      	uxtb	r3, r3
 80093ae:	2b03      	cmp	r3, #3
 80093b0:	d104      	bne.n	80093bc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80093b2:	6839      	ldr	r1, [r7, #0]
 80093b4:	6878      	ldr	r0, [r7, #4]
 80093b6:	f000 f9a3 	bl	8009700 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ba:	e01d      	b.n	80093f8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	7bfa      	ldrb	r2, [r7, #15]
 80093c0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80093c4:	7bfb      	ldrb	r3, [r7, #15]
 80093c6:	4619      	mov	r1, r3
 80093c8:	6878      	ldr	r0, [r7, #4]
 80093ca:	f000 fea6 	bl	800a11a <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80093ce:	6878      	ldr	r0, [r7, #4]
 80093d0:	f000 fa61 	bl	8009896 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80093d4:	7bfb      	ldrb	r3, [r7, #15]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d004      	beq.n	80093e4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	2202      	movs	r2, #2
 80093de:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093e2:	e009      	b.n	80093f8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80093ec:	e004      	b.n	80093f8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80093ee:	6839      	ldr	r1, [r7, #0]
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f000 f985 	bl	8009700 <USBD_CtlError>
  }
}
 80093f6:	bf00      	nop
 80093f8:	bf00      	nop
 80093fa:	3710      	adds	r7, #16
 80093fc:	46bd      	mov	sp, r7
 80093fe:	bd80      	pop	{r7, pc}

08009400 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009400:	b580      	push	{r7, lr}
 8009402:	b084      	sub	sp, #16
 8009404:	af00      	add	r7, sp, #0
 8009406:	6078      	str	r0, [r7, #4]
 8009408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800940a:	2300      	movs	r3, #0
 800940c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	885b      	ldrh	r3, [r3, #2]
 8009412:	b2da      	uxtb	r2, r3
 8009414:	4b4c      	ldr	r3, [pc, #304]	; (8009548 <USBD_SetConfig+0x148>)
 8009416:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8009418:	4b4b      	ldr	r3, [pc, #300]	; (8009548 <USBD_SetConfig+0x148>)
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	2b01      	cmp	r3, #1
 800941e:	d905      	bls.n	800942c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8009420:	6839      	ldr	r1, [r7, #0]
 8009422:	6878      	ldr	r0, [r7, #4]
 8009424:	f000 f96c 	bl	8009700 <USBD_CtlError>
    return USBD_FAIL;
 8009428:	2303      	movs	r3, #3
 800942a:	e088      	b.n	800953e <USBD_SetConfig+0x13e>
  }

  switch (pdev->dev_state)
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009432:	b2db      	uxtb	r3, r3
 8009434:	2b02      	cmp	r3, #2
 8009436:	d002      	beq.n	800943e <USBD_SetConfig+0x3e>
 8009438:	2b03      	cmp	r3, #3
 800943a:	d025      	beq.n	8009488 <USBD_SetConfig+0x88>
 800943c:	e071      	b.n	8009522 <USBD_SetConfig+0x122>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800943e:	4b42      	ldr	r3, [pc, #264]	; (8009548 <USBD_SetConfig+0x148>)
 8009440:	781b      	ldrb	r3, [r3, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d01c      	beq.n	8009480 <USBD_SetConfig+0x80>
      {
        pdev->dev_config = cfgidx;
 8009446:	4b40      	ldr	r3, [pc, #256]	; (8009548 <USBD_SetConfig+0x148>)
 8009448:	781b      	ldrb	r3, [r3, #0]
 800944a:	461a      	mov	r2, r3
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8009450:	4b3d      	ldr	r3, [pc, #244]	; (8009548 <USBD_SetConfig+0x148>)
 8009452:	781b      	ldrb	r3, [r3, #0]
 8009454:	4619      	mov	r1, r3
 8009456:	6878      	ldr	r0, [r7, #4]
 8009458:	f7ff f992 	bl	8008780 <USBD_SetClassConfig>
 800945c:	4603      	mov	r3, r0
 800945e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8009460:	7bfb      	ldrb	r3, [r7, #15]
 8009462:	2b00      	cmp	r3, #0
 8009464:	d004      	beq.n	8009470 <USBD_SetConfig+0x70>
        {
          USBD_CtlError(pdev, req);
 8009466:	6839      	ldr	r1, [r7, #0]
 8009468:	6878      	ldr	r0, [r7, #4]
 800946a:	f000 f949 	bl	8009700 <USBD_CtlError>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800946e:	e065      	b.n	800953c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009470:	6878      	ldr	r0, [r7, #4]
 8009472:	f000 fa10 	bl	8009896 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8009476:	687b      	ldr	r3, [r7, #4]
 8009478:	2203      	movs	r2, #3
 800947a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800947e:	e05d      	b.n	800953c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f000 fa08 	bl	8009896 <USBD_CtlSendStatus>
      break;
 8009486:	e059      	b.n	800953c <USBD_SetConfig+0x13c>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8009488:	4b2f      	ldr	r3, [pc, #188]	; (8009548 <USBD_SetConfig+0x148>)
 800948a:	781b      	ldrb	r3, [r3, #0]
 800948c:	2b00      	cmp	r3, #0
 800948e:	d112      	bne.n	80094b6 <USBD_SetConfig+0xb6>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2202      	movs	r2, #2
 8009494:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8009498:	4b2b      	ldr	r3, [pc, #172]	; (8009548 <USBD_SetConfig+0x148>)
 800949a:	781b      	ldrb	r3, [r3, #0]
 800949c:	461a      	mov	r2, r3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80094a2:	4b29      	ldr	r3, [pc, #164]	; (8009548 <USBD_SetConfig+0x148>)
 80094a4:	781b      	ldrb	r3, [r3, #0]
 80094a6:	4619      	mov	r1, r3
 80094a8:	6878      	ldr	r0, [r7, #4]
 80094aa:	f7ff f985 	bl	80087b8 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80094ae:	6878      	ldr	r0, [r7, #4]
 80094b0:	f000 f9f1 	bl	8009896 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80094b4:	e042      	b.n	800953c <USBD_SetConfig+0x13c>
      else if (cfgidx != pdev->dev_config)
 80094b6:	4b24      	ldr	r3, [pc, #144]	; (8009548 <USBD_SetConfig+0x148>)
 80094b8:	781b      	ldrb	r3, [r3, #0]
 80094ba:	461a      	mov	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	685b      	ldr	r3, [r3, #4]
 80094c0:	429a      	cmp	r2, r3
 80094c2:	d02a      	beq.n	800951a <USBD_SetConfig+0x11a>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	685b      	ldr	r3, [r3, #4]
 80094c8:	b2db      	uxtb	r3, r3
 80094ca:	4619      	mov	r1, r3
 80094cc:	6878      	ldr	r0, [r7, #4]
 80094ce:	f7ff f973 	bl	80087b8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80094d2:	4b1d      	ldr	r3, [pc, #116]	; (8009548 <USBD_SetConfig+0x148>)
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	461a      	mov	r2, r3
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80094dc:	4b1a      	ldr	r3, [pc, #104]	; (8009548 <USBD_SetConfig+0x148>)
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	4619      	mov	r1, r3
 80094e2:	6878      	ldr	r0, [r7, #4]
 80094e4:	f7ff f94c 	bl	8008780 <USBD_SetClassConfig>
 80094e8:	4603      	mov	r3, r0
 80094ea:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80094ec:	7bfb      	ldrb	r3, [r7, #15]
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d00f      	beq.n	8009512 <USBD_SetConfig+0x112>
          USBD_CtlError(pdev, req);
 80094f2:	6839      	ldr	r1, [r7, #0]
 80094f4:	6878      	ldr	r0, [r7, #4]
 80094f6:	f000 f903 	bl	8009700 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	685b      	ldr	r3, [r3, #4]
 80094fe:	b2db      	uxtb	r3, r3
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f7ff f958 	bl	80087b8 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2202      	movs	r2, #2
 800950c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8009510:	e014      	b.n	800953c <USBD_SetConfig+0x13c>
          (void)USBD_CtlSendStatus(pdev);
 8009512:	6878      	ldr	r0, [r7, #4]
 8009514:	f000 f9bf 	bl	8009896 <USBD_CtlSendStatus>
      break;
 8009518:	e010      	b.n	800953c <USBD_SetConfig+0x13c>
        (void)USBD_CtlSendStatus(pdev);
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f000 f9bb 	bl	8009896 <USBD_CtlSendStatus>
      break;
 8009520:	e00c      	b.n	800953c <USBD_SetConfig+0x13c>

    default:
      USBD_CtlError(pdev, req);
 8009522:	6839      	ldr	r1, [r7, #0]
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f000 f8eb 	bl	8009700 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800952a:	4b07      	ldr	r3, [pc, #28]	; (8009548 <USBD_SetConfig+0x148>)
 800952c:	781b      	ldrb	r3, [r3, #0]
 800952e:	4619      	mov	r1, r3
 8009530:	6878      	ldr	r0, [r7, #4]
 8009532:	f7ff f941 	bl	80087b8 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8009536:	2303      	movs	r3, #3
 8009538:	73fb      	strb	r3, [r7, #15]
      break;
 800953a:	bf00      	nop
  }

  return ret;
 800953c:	7bfb      	ldrb	r3, [r7, #15]
}
 800953e:	4618      	mov	r0, r3
 8009540:	3710      	adds	r7, #16
 8009542:	46bd      	mov	sp, r7
 8009544:	bd80      	pop	{r7, pc}
 8009546:	bf00      	nop
 8009548:	20000404 	.word	0x20000404

0800954c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8009556:	683b      	ldr	r3, [r7, #0]
 8009558:	88db      	ldrh	r3, [r3, #6]
 800955a:	2b01      	cmp	r3, #1
 800955c:	d004      	beq.n	8009568 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800955e:	6839      	ldr	r1, [r7, #0]
 8009560:	6878      	ldr	r0, [r7, #4]
 8009562:	f000 f8cd 	bl	8009700 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8009566:	e023      	b.n	80095b0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800956e:	b2db      	uxtb	r3, r3
 8009570:	2b02      	cmp	r3, #2
 8009572:	dc02      	bgt.n	800957a <USBD_GetConfig+0x2e>
 8009574:	2b00      	cmp	r3, #0
 8009576:	dc03      	bgt.n	8009580 <USBD_GetConfig+0x34>
 8009578:	e015      	b.n	80095a6 <USBD_GetConfig+0x5a>
 800957a:	2b03      	cmp	r3, #3
 800957c:	d00b      	beq.n	8009596 <USBD_GetConfig+0x4a>
 800957e:	e012      	b.n	80095a6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2200      	movs	r2, #0
 8009584:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	3308      	adds	r3, #8
 800958a:	2201      	movs	r2, #1
 800958c:	4619      	mov	r1, r3
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f000 f927 	bl	80097e2 <USBD_CtlSendData>
        break;
 8009594:	e00c      	b.n	80095b0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	3304      	adds	r3, #4
 800959a:	2201      	movs	r2, #1
 800959c:	4619      	mov	r1, r3
 800959e:	6878      	ldr	r0, [r7, #4]
 80095a0:	f000 f91f 	bl	80097e2 <USBD_CtlSendData>
        break;
 80095a4:	e004      	b.n	80095b0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80095a6:	6839      	ldr	r1, [r7, #0]
 80095a8:	6878      	ldr	r0, [r7, #4]
 80095aa:	f000 f8a9 	bl	8009700 <USBD_CtlError>
        break;
 80095ae:	bf00      	nop
}
 80095b0:	bf00      	nop
 80095b2:	3708      	adds	r7, #8
 80095b4:	46bd      	mov	sp, r7
 80095b6:	bd80      	pop	{r7, pc}

080095b8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80095b8:	b580      	push	{r7, lr}
 80095ba:	b082      	sub	sp, #8
 80095bc:	af00      	add	r7, sp, #0
 80095be:	6078      	str	r0, [r7, #4]
 80095c0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80095c8:	b2db      	uxtb	r3, r3
 80095ca:	3b01      	subs	r3, #1
 80095cc:	2b02      	cmp	r3, #2
 80095ce:	d81e      	bhi.n	800960e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80095d0:	683b      	ldr	r3, [r7, #0]
 80095d2:	88db      	ldrh	r3, [r3, #6]
 80095d4:	2b02      	cmp	r3, #2
 80095d6:	d004      	beq.n	80095e2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80095d8:	6839      	ldr	r1, [r7, #0]
 80095da:	6878      	ldr	r0, [r7, #4]
 80095dc:	f000 f890 	bl	8009700 <USBD_CtlError>
        break;
 80095e0:	e01a      	b.n	8009618 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	2201      	movs	r2, #1
 80095e6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup != 0U)
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80095ee:	2b00      	cmp	r3, #0
 80095f0:	d005      	beq.n	80095fe <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	f043 0202 	orr.w	r2, r3, #2
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	330c      	adds	r3, #12
 8009602:	2202      	movs	r2, #2
 8009604:	4619      	mov	r1, r3
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 f8eb 	bl	80097e2 <USBD_CtlSendData>
      break;
 800960c:	e004      	b.n	8009618 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800960e:	6839      	ldr	r1, [r7, #0]
 8009610:	6878      	ldr	r0, [r7, #4]
 8009612:	f000 f875 	bl	8009700 <USBD_CtlError>
      break;
 8009616:	bf00      	nop
  }
}
 8009618:	bf00      	nop
 800961a:	3708      	adds	r7, #8
 800961c:	46bd      	mov	sp, r7
 800961e:	bd80      	pop	{r7, pc}

08009620 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009620:	b580      	push	{r7, lr}
 8009622:	b082      	sub	sp, #8
 8009624:	af00      	add	r7, sp, #0
 8009626:	6078      	str	r0, [r7, #4]
 8009628:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800962a:	683b      	ldr	r3, [r7, #0]
 800962c:	885b      	ldrh	r3, [r3, #2]
 800962e:	2b01      	cmp	r3, #1
 8009630:	d106      	bne.n	8009640 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	2201      	movs	r2, #1
 8009636:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800963a:	6878      	ldr	r0, [r7, #4]
 800963c:	f000 f92b 	bl	8009896 <USBD_CtlSendStatus>
  }
}
 8009640:	bf00      	nop
 8009642:	3708      	adds	r7, #8
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b082      	sub	sp, #8
 800964c:	af00      	add	r7, sp, #0
 800964e:	6078      	str	r0, [r7, #4]
 8009650:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8009658:	b2db      	uxtb	r3, r3
 800965a:	3b01      	subs	r3, #1
 800965c:	2b02      	cmp	r3, #2
 800965e:	d80b      	bhi.n	8009678 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	885b      	ldrh	r3, [r3, #2]
 8009664:	2b01      	cmp	r3, #1
 8009666:	d10c      	bne.n	8009682 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	2200      	movs	r2, #0
 800966c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f000 f910 	bl	8009896 <USBD_CtlSendStatus>
      }
      break;
 8009676:	e004      	b.n	8009682 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8009678:	6839      	ldr	r1, [r7, #0]
 800967a:	6878      	ldr	r0, [r7, #4]
 800967c:	f000 f840 	bl	8009700 <USBD_CtlError>
      break;
 8009680:	e000      	b.n	8009684 <USBD_ClrFeature+0x3c>
      break;
 8009682:	bf00      	nop
  }
}
 8009684:	bf00      	nop
 8009686:	3708      	adds	r7, #8
 8009688:	46bd      	mov	sp, r7
 800968a:	bd80      	pop	{r7, pc}

0800968c <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800968c:	b580      	push	{r7, lr}
 800968e:	b084      	sub	sp, #16
 8009690:	af00      	add	r7, sp, #0
 8009692:	6078      	str	r0, [r7, #4]
 8009694:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8009696:	683b      	ldr	r3, [r7, #0]
 8009698:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	781a      	ldrb	r2, [r3, #0]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	3301      	adds	r3, #1
 80096a6:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	781a      	ldrb	r2, [r3, #0]
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80096b0:	68fb      	ldr	r3, [r7, #12]
 80096b2:	3301      	adds	r3, #1
 80096b4:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f7ff fa92 	bl	8008be0 <SWAPBYTE>
 80096bc:	4603      	mov	r3, r0
 80096be:	461a      	mov	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	3301      	adds	r3, #1
 80096c8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096ca:	68fb      	ldr	r3, [r7, #12]
 80096cc:	3301      	adds	r3, #1
 80096ce:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80096d0:	68f8      	ldr	r0, [r7, #12]
 80096d2:	f7ff fa85 	bl	8008be0 <SWAPBYTE>
 80096d6:	4603      	mov	r3, r0
 80096d8:	461a      	mov	r2, r3
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	3301      	adds	r3, #1
 80096e2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	3301      	adds	r3, #1
 80096e8:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f7ff fa78 	bl	8008be0 <SWAPBYTE>
 80096f0:	4603      	mov	r3, r0
 80096f2:	461a      	mov	r2, r3
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	80da      	strh	r2, [r3, #6]
}
 80096f8:	bf00      	nop
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b082      	sub	sp, #8
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
 8009708:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800970a:	2180      	movs	r1, #128	; 0x80
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f000 fc99 	bl	800a044 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8009712:	2100      	movs	r1, #0
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f000 fc95 	bl	800a044 <USBD_LL_StallEP>
}
 800971a:	bf00      	nop
 800971c:	3708      	adds	r7, #8
 800971e:	46bd      	mov	sp, r7
 8009720:	bd80      	pop	{r7, pc}

08009722 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8009722:	b580      	push	{r7, lr}
 8009724:	b086      	sub	sp, #24
 8009726:	af00      	add	r7, sp, #0
 8009728:	60f8      	str	r0, [r7, #12]
 800972a:	60b9      	str	r1, [r7, #8]
 800972c:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800972e:	2300      	movs	r3, #0
 8009730:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	2b00      	cmp	r3, #0
 8009736:	d036      	beq.n	80097a6 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800973c:	6938      	ldr	r0, [r7, #16]
 800973e:	f000 f836 	bl	80097ae <USBD_GetLen>
 8009742:	4603      	mov	r3, r0
 8009744:	3301      	adds	r3, #1
 8009746:	b29b      	uxth	r3, r3
 8009748:	005b      	lsls	r3, r3, #1
 800974a:	b29a      	uxth	r2, r3
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8009750:	7dfb      	ldrb	r3, [r7, #23]
 8009752:	68ba      	ldr	r2, [r7, #8]
 8009754:	4413      	add	r3, r2
 8009756:	687a      	ldr	r2, [r7, #4]
 8009758:	7812      	ldrb	r2, [r2, #0]
 800975a:	701a      	strb	r2, [r3, #0]
  idx++;
 800975c:	7dfb      	ldrb	r3, [r7, #23]
 800975e:	3301      	adds	r3, #1
 8009760:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8009762:	7dfb      	ldrb	r3, [r7, #23]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	4413      	add	r3, r2
 8009768:	2203      	movs	r2, #3
 800976a:	701a      	strb	r2, [r3, #0]
  idx++;
 800976c:	7dfb      	ldrb	r3, [r7, #23]
 800976e:	3301      	adds	r3, #1
 8009770:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8009772:	e013      	b.n	800979c <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8009774:	7dfb      	ldrb	r3, [r7, #23]
 8009776:	68ba      	ldr	r2, [r7, #8]
 8009778:	4413      	add	r3, r2
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	7812      	ldrb	r2, [r2, #0]
 800977e:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	3301      	adds	r3, #1
 8009784:	613b      	str	r3, [r7, #16]
    idx++;
 8009786:	7dfb      	ldrb	r3, [r7, #23]
 8009788:	3301      	adds	r3, #1
 800978a:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800978c:	7dfb      	ldrb	r3, [r7, #23]
 800978e:	68ba      	ldr	r2, [r7, #8]
 8009790:	4413      	add	r3, r2
 8009792:	2200      	movs	r2, #0
 8009794:	701a      	strb	r2, [r3, #0]
    idx++;
 8009796:	7dfb      	ldrb	r3, [r7, #23]
 8009798:	3301      	adds	r3, #1
 800979a:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	781b      	ldrb	r3, [r3, #0]
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d1e7      	bne.n	8009774 <USBD_GetString+0x52>
 80097a4:	e000      	b.n	80097a8 <USBD_GetString+0x86>
    return;
 80097a6:	bf00      	nop
  }
}
 80097a8:	3718      	adds	r7, #24
 80097aa:	46bd      	mov	sp, r7
 80097ac:	bd80      	pop	{r7, pc}

080097ae <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80097ae:	b480      	push	{r7}
 80097b0:	b085      	sub	sp, #20
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80097b6:	2300      	movs	r3, #0
 80097b8:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80097be:	e005      	b.n	80097cc <USBD_GetLen+0x1e>
  {
    len++;
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	3301      	adds	r3, #1
 80097c4:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	3301      	adds	r3, #1
 80097ca:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80097cc:	68bb      	ldr	r3, [r7, #8]
 80097ce:	781b      	ldrb	r3, [r3, #0]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d1f5      	bne.n	80097c0 <USBD_GetLen+0x12>
  }

  return len;
 80097d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80097d6:	4618      	mov	r0, r3
 80097d8:	3714      	adds	r7, #20
 80097da:	46bd      	mov	sp, r7
 80097dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e0:	4770      	bx	lr

080097e2 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80097e2:	b580      	push	{r7, lr}
 80097e4:	b084      	sub	sp, #16
 80097e6:	af00      	add	r7, sp, #0
 80097e8:	60f8      	str	r0, [r7, #12]
 80097ea:	60b9      	str	r1, [r7, #8]
 80097ec:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	2202      	movs	r2, #2
 80097f2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80097fc:	68fb      	ldr	r3, [r7, #12]
 80097fe:	687a      	ldr	r2, [r7, #4]
 8009800:	61da      	str	r2, [r3, #28]
#endif

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	68ba      	ldr	r2, [r7, #8]
 8009806:	2100      	movs	r1, #0
 8009808:	68f8      	ldr	r0, [r7, #12]
 800980a:	f000 fca5 	bl	800a158 <USBD_LL_Transmit>

  return USBD_OK;
 800980e:	2300      	movs	r3, #0
}
 8009810:	4618      	mov	r0, r3
 8009812:	3710      	adds	r7, #16
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}

08009818 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8009818:	b580      	push	{r7, lr}
 800981a:	b084      	sub	sp, #16
 800981c:	af00      	add	r7, sp, #0
 800981e:	60f8      	str	r0, [r7, #12]
 8009820:	60b9      	str	r1, [r7, #8]
 8009822:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	68ba      	ldr	r2, [r7, #8]
 8009828:	2100      	movs	r1, #0
 800982a:	68f8      	ldr	r0, [r7, #12]
 800982c:	f000 fc94 	bl	800a158 <USBD_LL_Transmit>

  return USBD_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}

0800983a <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800983a:	b580      	push	{r7, lr}
 800983c:	b084      	sub	sp, #16
 800983e:	af00      	add	r7, sp, #0
 8009840:	60f8      	str	r0, [r7, #12]
 8009842:	60b9      	str	r1, [r7, #8]
 8009844:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8009846:	68fb      	ldr	r3, [r7, #12]
 8009848:	2203      	movs	r2, #3
 800984a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	68ba      	ldr	r2, [r7, #8]
 8009862:	2100      	movs	r1, #0
 8009864:	68f8      	ldr	r0, [r7, #12]
 8009866:	f000 fc98 	bl	800a19a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800986a:	2300      	movs	r3, #0
}
 800986c:	4618      	mov	r0, r3
 800986e:	3710      	adds	r7, #16
 8009870:	46bd      	mov	sp, r7
 8009872:	bd80      	pop	{r7, pc}

08009874 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b084      	sub	sp, #16
 8009878:	af00      	add	r7, sp, #0
 800987a:	60f8      	str	r0, [r7, #12]
 800987c:	60b9      	str	r1, [r7, #8]
 800987e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	68ba      	ldr	r2, [r7, #8]
 8009884:	2100      	movs	r1, #0
 8009886:	68f8      	ldr	r0, [r7, #12]
 8009888:	f000 fc87 	bl	800a19a <USBD_LL_PrepareReceive>

  return USBD_OK;
 800988c:	2300      	movs	r3, #0
}
 800988e:	4618      	mov	r0, r3
 8009890:	3710      	adds	r7, #16
 8009892:	46bd      	mov	sp, r7
 8009894:	bd80      	pop	{r7, pc}

08009896 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b082      	sub	sp, #8
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2204      	movs	r2, #4
 80098a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80098a6:	2300      	movs	r3, #0
 80098a8:	2200      	movs	r2, #0
 80098aa:	2100      	movs	r1, #0
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 fc53 	bl	800a158 <USBD_LL_Transmit>

  return USBD_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3708      	adds	r7, #8
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}

080098bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80098bc:	b580      	push	{r7, lr}
 80098be:	b082      	sub	sp, #8
 80098c0:	af00      	add	r7, sp, #0
 80098c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	2205      	movs	r2, #5
 80098c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80098cc:	2300      	movs	r3, #0
 80098ce:	2200      	movs	r2, #0
 80098d0:	2100      	movs	r1, #0
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 fc61 	bl	800a19a <USBD_LL_PrepareReceive>

  return USBD_OK;
 80098d8:	2300      	movs	r3, #0
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3708      	adds	r7, #8
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}
	...

080098e4 <MX_USB_Device_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_Device_Init(void)
{
 80098e4:	b580      	push	{r7, lr}
 80098e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_Device_Init_PreTreatment */

  /* USER CODE END USB_Device_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &CDC_Desc, DEVICE_FS) != USBD_OK) {
 80098e8:	2200      	movs	r2, #0
 80098ea:	4912      	ldr	r1, [pc, #72]	; (8009934 <MX_USB_Device_Init+0x50>)
 80098ec:	4812      	ldr	r0, [pc, #72]	; (8009938 <MX_USB_Device_Init+0x54>)
 80098ee:	f7fe fed9 	bl	80086a4 <USBD_Init>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d001      	beq.n	80098fc <MX_USB_Device_Init+0x18>
    Error_Handler();
 80098f8:	f7f7 f9ec 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK) {
 80098fc:	490f      	ldr	r1, [pc, #60]	; (800993c <MX_USB_Device_Init+0x58>)
 80098fe:	480e      	ldr	r0, [pc, #56]	; (8009938 <MX_USB_Device_Init+0x54>)
 8009900:	f7fe ff00 	bl	8008704 <USBD_RegisterClass>
 8009904:	4603      	mov	r3, r0
 8009906:	2b00      	cmp	r3, #0
 8009908:	d001      	beq.n	800990e <MX_USB_Device_Init+0x2a>
    Error_Handler();
 800990a:	f7f7 f9e3 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK) {
 800990e:	490c      	ldr	r1, [pc, #48]	; (8009940 <MX_USB_Device_Init+0x5c>)
 8009910:	4809      	ldr	r0, [pc, #36]	; (8009938 <MX_USB_Device_Init+0x54>)
 8009912:	f7fe fe21 	bl	8008558 <USBD_CDC_RegisterInterface>
 8009916:	4603      	mov	r3, r0
 8009918:	2b00      	cmp	r3, #0
 800991a:	d001      	beq.n	8009920 <MX_USB_Device_Init+0x3c>
    Error_Handler();
 800991c:	f7f7 f9da 	bl	8000cd4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK) {
 8009920:	4805      	ldr	r0, [pc, #20]	; (8009938 <MX_USB_Device_Init+0x54>)
 8009922:	f7fe ff16 	bl	8008752 <USBD_Start>
 8009926:	4603      	mov	r3, r0
 8009928:	2b00      	cmp	r3, #0
 800992a:	d001      	beq.n	8009930 <MX_USB_Device_Init+0x4c>
    Error_Handler();
 800992c:	f7f7 f9d2 	bl	8000cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Device_Init_PostTreatment */

  /* USER CODE END USB_Device_Init_PostTreatment */
}
 8009930:	bf00      	nop
 8009932:	bd80      	pop	{r7, pc}
 8009934:	20000178 	.word	0x20000178
 8009938:	20000408 	.word	0x20000408
 800993c:	20000060 	.word	0x20000060
 8009940:	20000164 	.word	0x20000164

08009944 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009944:	b580      	push	{r7, lr}
 8009946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8009948:	2200      	movs	r2, #0
 800994a:	4905      	ldr	r1, [pc, #20]	; (8009960 <CDC_Init_FS+0x1c>)
 800994c:	4805      	ldr	r0, [pc, #20]	; (8009964 <CDC_Init_FS+0x20>)
 800994e:	f7fe fe18 	bl	8008582 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009952:	4905      	ldr	r1, [pc, #20]	; (8009968 <CDC_Init_FS+0x24>)
 8009954:	4803      	ldr	r0, [pc, #12]	; (8009964 <CDC_Init_FS+0x20>)
 8009956:	f7fe fe32 	bl	80085be <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800995a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800995c:	4618      	mov	r0, r3
 800995e:	bd80      	pop	{r7, pc}
 8009960:	20000ac0 	.word	0x20000ac0
 8009964:	20000408 	.word	0x20000408
 8009968:	200006d8 	.word	0x200006d8

0800996c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800996c:	b480      	push	{r7}
 800996e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009970:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009972:	4618      	mov	r0, r3
 8009974:	46bd      	mov	sp, r7
 8009976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997a:	4770      	bx	lr

0800997c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800997c:	b480      	push	{r7}
 800997e:	b083      	sub	sp, #12
 8009980:	af00      	add	r7, sp, #0
 8009982:	4603      	mov	r3, r0
 8009984:	6039      	str	r1, [r7, #0]
 8009986:	71fb      	strb	r3, [r7, #7]
 8009988:	4613      	mov	r3, r2
 800998a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800998c:	79fb      	ldrb	r3, [r7, #7]
 800998e:	2b23      	cmp	r3, #35	; 0x23
 8009990:	d84a      	bhi.n	8009a28 <CDC_Control_FS+0xac>
 8009992:	a201      	add	r2, pc, #4	; (adr r2, 8009998 <CDC_Control_FS+0x1c>)
 8009994:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009998:	08009a29 	.word	0x08009a29
 800999c:	08009a29 	.word	0x08009a29
 80099a0:	08009a29 	.word	0x08009a29
 80099a4:	08009a29 	.word	0x08009a29
 80099a8:	08009a29 	.word	0x08009a29
 80099ac:	08009a29 	.word	0x08009a29
 80099b0:	08009a29 	.word	0x08009a29
 80099b4:	08009a29 	.word	0x08009a29
 80099b8:	08009a29 	.word	0x08009a29
 80099bc:	08009a29 	.word	0x08009a29
 80099c0:	08009a29 	.word	0x08009a29
 80099c4:	08009a29 	.word	0x08009a29
 80099c8:	08009a29 	.word	0x08009a29
 80099cc:	08009a29 	.word	0x08009a29
 80099d0:	08009a29 	.word	0x08009a29
 80099d4:	08009a29 	.word	0x08009a29
 80099d8:	08009a29 	.word	0x08009a29
 80099dc:	08009a29 	.word	0x08009a29
 80099e0:	08009a29 	.word	0x08009a29
 80099e4:	08009a29 	.word	0x08009a29
 80099e8:	08009a29 	.word	0x08009a29
 80099ec:	08009a29 	.word	0x08009a29
 80099f0:	08009a29 	.word	0x08009a29
 80099f4:	08009a29 	.word	0x08009a29
 80099f8:	08009a29 	.word	0x08009a29
 80099fc:	08009a29 	.word	0x08009a29
 8009a00:	08009a29 	.word	0x08009a29
 8009a04:	08009a29 	.word	0x08009a29
 8009a08:	08009a29 	.word	0x08009a29
 8009a0c:	08009a29 	.word	0x08009a29
 8009a10:	08009a29 	.word	0x08009a29
 8009a14:	08009a29 	.word	0x08009a29
 8009a18:	08009a29 	.word	0x08009a29
 8009a1c:	08009a29 	.word	0x08009a29
 8009a20:	08009a29 	.word	0x08009a29
 8009a24:	08009a29 	.word	0x08009a29
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009a28:	bf00      	nop
  }

  return (USBD_OK);
 8009a2a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr

08009a38 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009a38:	b580      	push	{r7, lr}
 8009a3a:	b082      	sub	sp, #8
 8009a3c:	af00      	add	r7, sp, #0
 8009a3e:	6078      	str	r0, [r7, #4]
 8009a40:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
	CDC_On_Receive(Buf, Len); // (1)
 8009a42:	6839      	ldr	r1, [r7, #0]
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f7f6 fc53 	bl	80002f0 <CDC_On_Receive>
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009a4a:	6879      	ldr	r1, [r7, #4]
 8009a4c:	4805      	ldr	r0, [pc, #20]	; (8009a64 <CDC_Receive_FS+0x2c>)
 8009a4e:	f7fe fdb6 	bl	80085be <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8009a52:	4804      	ldr	r0, [pc, #16]	; (8009a64 <CDC_Receive_FS+0x2c>)
 8009a54:	f7fe fdfc 	bl	8008650 <USBD_CDC_ReceivePacket>
	return (USBD_OK);
 8009a58:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	3708      	adds	r7, #8
 8009a5e:	46bd      	mov	sp, r7
 8009a60:	bd80      	pop	{r7, pc}
 8009a62:	bf00      	nop
 8009a64:	20000408 	.word	0x20000408

08009a68 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	b084      	sub	sp, #16
 8009a6c:	af00      	add	r7, sp, #0
 8009a6e:	6078      	str	r0, [r7, #4]
 8009a70:	460b      	mov	r3, r1
 8009a72:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8009a74:	2300      	movs	r3, #0
 8009a76:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8009a78:	4b0d      	ldr	r3, [pc, #52]	; (8009ab0 <CDC_Transmit_FS+0x48>)
 8009a7a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8009a7e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8009a80:	68bb      	ldr	r3, [r7, #8]
 8009a82:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d001      	beq.n	8009a8e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8009a8a:	2301      	movs	r3, #1
 8009a8c:	e00b      	b.n	8009aa6 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8009a8e:	887b      	ldrh	r3, [r7, #2]
 8009a90:	461a      	mov	r2, r3
 8009a92:	6879      	ldr	r1, [r7, #4]
 8009a94:	4806      	ldr	r0, [pc, #24]	; (8009ab0 <CDC_Transmit_FS+0x48>)
 8009a96:	f7fe fd74 	bl	8008582 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8009a9a:	4805      	ldr	r0, [pc, #20]	; (8009ab0 <CDC_Transmit_FS+0x48>)
 8009a9c:	f7fe fda8 	bl	80085f0 <USBD_CDC_TransmitPacket>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8009aa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8009aa6:	4618      	mov	r0, r3
 8009aa8:	3710      	adds	r7, #16
 8009aaa:	46bd      	mov	sp, r7
 8009aac:	bd80      	pop	{r7, pc}
 8009aae:	bf00      	nop
 8009ab0:	20000408 	.word	0x20000408

08009ab4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8009ab4:	b480      	push	{r7}
 8009ab6:	b087      	sub	sp, #28
 8009ab8:	af00      	add	r7, sp, #0
 8009aba:	60f8      	str	r0, [r7, #12]
 8009abc:	60b9      	str	r1, [r7, #8]
 8009abe:	4613      	mov	r3, r2
 8009ac0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8009ac6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009aca:	4618      	mov	r0, r3
 8009acc:	371c      	adds	r7, #28
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad4:	4770      	bx	lr
	...

08009ad8 <USBD_CDC_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b083      	sub	sp, #12
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	4603      	mov	r3, r0
 8009ae0:	6039      	str	r1, [r7, #0]
 8009ae2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_CDC_DeviceDesc);
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	2212      	movs	r2, #18
 8009ae8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceDesc;
 8009aea:	4b03      	ldr	r3, [pc, #12]	; (8009af8 <USBD_CDC_DeviceDescriptor+0x20>)
}
 8009aec:	4618      	mov	r0, r3
 8009aee:	370c      	adds	r7, #12
 8009af0:	46bd      	mov	sp, r7
 8009af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af6:	4770      	bx	lr
 8009af8:	20000198 	.word	0x20000198

08009afc <USBD_CDC_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009afc:	b480      	push	{r7}
 8009afe:	b083      	sub	sp, #12
 8009b00:	af00      	add	r7, sp, #0
 8009b02:	4603      	mov	r3, r0
 8009b04:	6039      	str	r1, [r7, #0]
 8009b06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	2204      	movs	r2, #4
 8009b0c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009b0e:	4b03      	ldr	r3, [pc, #12]	; (8009b1c <USBD_CDC_LangIDStrDescriptor+0x20>)
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr
 8009b1c:	200001ac 	.word	0x200001ac

08009b20 <USBD_CDC_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b20:	b580      	push	{r7, lr}
 8009b22:	b082      	sub	sp, #8
 8009b24:	af00      	add	r7, sp, #0
 8009b26:	4603      	mov	r3, r0
 8009b28:	6039      	str	r1, [r7, #0]
 8009b2a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009b2c:	79fb      	ldrb	r3, [r7, #7]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d105      	bne.n	8009b3e <USBD_CDC_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009b32:	683a      	ldr	r2, [r7, #0]
 8009b34:	4907      	ldr	r1, [pc, #28]	; (8009b54 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009b36:	4808      	ldr	r0, [pc, #32]	; (8009b58 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009b38:	f7ff fdf3 	bl	8009722 <USBD_GetString>
 8009b3c:	e004      	b.n	8009b48 <USBD_CDC_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING, USBD_StrDesc, length);
 8009b3e:	683a      	ldr	r2, [r7, #0]
 8009b40:	4904      	ldr	r1, [pc, #16]	; (8009b54 <USBD_CDC_ProductStrDescriptor+0x34>)
 8009b42:	4805      	ldr	r0, [pc, #20]	; (8009b58 <USBD_CDC_ProductStrDescriptor+0x38>)
 8009b44:	f7ff fded 	bl	8009722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009b48:	4b02      	ldr	r3, [pc, #8]	; (8009b54 <USBD_CDC_ProductStrDescriptor+0x34>)
}
 8009b4a:	4618      	mov	r0, r3
 8009b4c:	3708      	adds	r7, #8
 8009b4e:	46bd      	mov	sp, r7
 8009b50:	bd80      	pop	{r7, pc}
 8009b52:	bf00      	nop
 8009b54:	20000ea8 	.word	0x20000ea8
 8009b58:	0800a390 	.word	0x0800a390

08009b5c <USBD_CDC_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b5c:	b580      	push	{r7, lr}
 8009b5e:	b082      	sub	sp, #8
 8009b60:	af00      	add	r7, sp, #0
 8009b62:	4603      	mov	r3, r0
 8009b64:	6039      	str	r1, [r7, #0]
 8009b66:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8009b68:	683a      	ldr	r2, [r7, #0]
 8009b6a:	4904      	ldr	r1, [pc, #16]	; (8009b7c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
 8009b6c:	4804      	ldr	r0, [pc, #16]	; (8009b80 <USBD_CDC_ManufacturerStrDescriptor+0x24>)
 8009b6e:	f7ff fdd8 	bl	8009722 <USBD_GetString>
  return USBD_StrDesc;
 8009b72:	4b02      	ldr	r3, [pc, #8]	; (8009b7c <USBD_CDC_ManufacturerStrDescriptor+0x20>)
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	3708      	adds	r7, #8
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	20000ea8 	.word	0x20000ea8
 8009b80:	0800a3a8 	.word	0x0800a3a8

08009b84 <USBD_CDC_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b082      	sub	sp, #8
 8009b88:	af00      	add	r7, sp, #0
 8009b8a:	4603      	mov	r3, r0
 8009b8c:	6039      	str	r1, [r7, #0]
 8009b8e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	221a      	movs	r2, #26
 8009b94:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8009b96:	f000 f843 	bl	8009c20 <Get_SerialNum>

  /* USER CODE BEGIN USBD_CDC_SerialStrDescriptor */

  /* USER CODE END USBD_CDC_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8009b9a:	4b02      	ldr	r3, [pc, #8]	; (8009ba4 <USBD_CDC_SerialStrDescriptor+0x20>)
}
 8009b9c:	4618      	mov	r0, r3
 8009b9e:	3708      	adds	r7, #8
 8009ba0:	46bd      	mov	sp, r7
 8009ba2:	bd80      	pop	{r7, pc}
 8009ba4:	200001b0 	.word	0x200001b0

08009ba8 <USBD_CDC_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009ba8:	b580      	push	{r7, lr}
 8009baa:	b082      	sub	sp, #8
 8009bac:	af00      	add	r7, sp, #0
 8009bae:	4603      	mov	r3, r0
 8009bb0:	6039      	str	r1, [r7, #0]
 8009bb2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8009bb4:	79fb      	ldrb	r3, [r7, #7]
 8009bb6:	2b00      	cmp	r3, #0
 8009bb8:	d105      	bne.n	8009bc6 <USBD_CDC_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009bba:	683a      	ldr	r2, [r7, #0]
 8009bbc:	4907      	ldr	r1, [pc, #28]	; (8009bdc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009bbe:	4808      	ldr	r0, [pc, #32]	; (8009be0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009bc0:	f7ff fdaf 	bl	8009722 <USBD_GetString>
 8009bc4:	e004      	b.n	8009bd0 <USBD_CDC_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING, USBD_StrDesc, length);
 8009bc6:	683a      	ldr	r2, [r7, #0]
 8009bc8:	4904      	ldr	r1, [pc, #16]	; (8009bdc <USBD_CDC_ConfigStrDescriptor+0x34>)
 8009bca:	4805      	ldr	r0, [pc, #20]	; (8009be0 <USBD_CDC_ConfigStrDescriptor+0x38>)
 8009bcc:	f7ff fda9 	bl	8009722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009bd0:	4b02      	ldr	r3, [pc, #8]	; (8009bdc <USBD_CDC_ConfigStrDescriptor+0x34>)
}
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	3708      	adds	r7, #8
 8009bd6:	46bd      	mov	sp, r7
 8009bd8:	bd80      	pop	{r7, pc}
 8009bda:	bf00      	nop
 8009bdc:	20000ea8 	.word	0x20000ea8
 8009be0:	0800a3bc 	.word	0x0800a3bc

08009be4 <USBD_CDC_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_CDC_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b082      	sub	sp, #8
 8009be8:	af00      	add	r7, sp, #0
 8009bea:	4603      	mov	r3, r0
 8009bec:	6039      	str	r1, [r7, #0]
 8009bee:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009bf0:	79fb      	ldrb	r3, [r7, #7]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d105      	bne.n	8009c02 <USBD_CDC_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009bf6:	683a      	ldr	r2, [r7, #0]
 8009bf8:	4907      	ldr	r1, [pc, #28]	; (8009c18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009bfa:	4808      	ldr	r0, [pc, #32]	; (8009c1c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009bfc:	f7ff fd91 	bl	8009722 <USBD_GetString>
 8009c00:	e004      	b.n	8009c0c <USBD_CDC_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING, USBD_StrDesc, length);
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	4904      	ldr	r1, [pc, #16]	; (8009c18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
 8009c06:	4805      	ldr	r0, [pc, #20]	; (8009c1c <USBD_CDC_InterfaceStrDescriptor+0x38>)
 8009c08:	f7ff fd8b 	bl	8009722 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009c0c:	4b02      	ldr	r3, [pc, #8]	; (8009c18 <USBD_CDC_InterfaceStrDescriptor+0x34>)
}
 8009c0e:	4618      	mov	r0, r3
 8009c10:	3708      	adds	r7, #8
 8009c12:	46bd      	mov	sp, r7
 8009c14:	bd80      	pop	{r7, pc}
 8009c16:	bf00      	nop
 8009c18:	20000ea8 	.word	0x20000ea8
 8009c1c:	0800a3c8 	.word	0x0800a3c8

08009c20 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009c20:	b580      	push	{r7, lr}
 8009c22:	b084      	sub	sp, #16
 8009c24:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8009c26:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <Get_SerialNum+0x44>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009c2c:	4b0e      	ldr	r3, [pc, #56]	; (8009c68 <Get_SerialNum+0x48>)
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8009c32:	4b0e      	ldr	r3, [pc, #56]	; (8009c6c <Get_SerialNum+0x4c>)
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009c38:	68fa      	ldr	r2, [r7, #12]
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	4413      	add	r3, r2
 8009c3e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d009      	beq.n	8009c5a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8009c46:	2208      	movs	r2, #8
 8009c48:	4909      	ldr	r1, [pc, #36]	; (8009c70 <Get_SerialNum+0x50>)
 8009c4a:	68f8      	ldr	r0, [r7, #12]
 8009c4c:	f000 f814 	bl	8009c78 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009c50:	2204      	movs	r2, #4
 8009c52:	4908      	ldr	r1, [pc, #32]	; (8009c74 <Get_SerialNum+0x54>)
 8009c54:	68b8      	ldr	r0, [r7, #8]
 8009c56:	f000 f80f 	bl	8009c78 <IntToUnicode>
  }
}
 8009c5a:	bf00      	nop
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}
 8009c62:	bf00      	nop
 8009c64:	1fff7590 	.word	0x1fff7590
 8009c68:	1fff7594 	.word	0x1fff7594
 8009c6c:	1fff7598 	.word	0x1fff7598
 8009c70:	200001b2 	.word	0x200001b2
 8009c74:	200001c2 	.word	0x200001c2

08009c78 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8009c78:	b480      	push	{r7}
 8009c7a:	b087      	sub	sp, #28
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	60f8      	str	r0, [r7, #12]
 8009c80:	60b9      	str	r1, [r7, #8]
 8009c82:	4613      	mov	r3, r2
 8009c84:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8009c86:	2300      	movs	r3, #0
 8009c88:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	75fb      	strb	r3, [r7, #23]
 8009c8e:	e027      	b.n	8009ce0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	0f1b      	lsrs	r3, r3, #28
 8009c94:	2b09      	cmp	r3, #9
 8009c96:	d80b      	bhi.n	8009cb0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	0f1b      	lsrs	r3, r3, #28
 8009c9c:	b2da      	uxtb	r2, r3
 8009c9e:	7dfb      	ldrb	r3, [r7, #23]
 8009ca0:	005b      	lsls	r3, r3, #1
 8009ca2:	4619      	mov	r1, r3
 8009ca4:	68bb      	ldr	r3, [r7, #8]
 8009ca6:	440b      	add	r3, r1
 8009ca8:	3230      	adds	r2, #48	; 0x30
 8009caa:	b2d2      	uxtb	r2, r2
 8009cac:	701a      	strb	r2, [r3, #0]
 8009cae:	e00a      	b.n	8009cc6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8009cb0:	68fb      	ldr	r3, [r7, #12]
 8009cb2:	0f1b      	lsrs	r3, r3, #28
 8009cb4:	b2da      	uxtb	r2, r3
 8009cb6:	7dfb      	ldrb	r3, [r7, #23]
 8009cb8:	005b      	lsls	r3, r3, #1
 8009cba:	4619      	mov	r1, r3
 8009cbc:	68bb      	ldr	r3, [r7, #8]
 8009cbe:	440b      	add	r3, r1
 8009cc0:	3237      	adds	r2, #55	; 0x37
 8009cc2:	b2d2      	uxtb	r2, r2
 8009cc4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	011b      	lsls	r3, r3, #4
 8009cca:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009ccc:	7dfb      	ldrb	r3, [r7, #23]
 8009cce:	005b      	lsls	r3, r3, #1
 8009cd0:	3301      	adds	r3, #1
 8009cd2:	68ba      	ldr	r2, [r7, #8]
 8009cd4:	4413      	add	r3, r2
 8009cd6:	2200      	movs	r2, #0
 8009cd8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009cda:	7dfb      	ldrb	r3, [r7, #23]
 8009cdc:	3301      	adds	r3, #1
 8009cde:	75fb      	strb	r3, [r7, #23]
 8009ce0:	7dfa      	ldrb	r2, [r7, #23]
 8009ce2:	79fb      	ldrb	r3, [r7, #7]
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d3d3      	bcc.n	8009c90 <IntToUnicode+0x18>
  }
}
 8009ce8:	bf00      	nop
 8009cea:	bf00      	nop
 8009cec:	371c      	adds	r7, #28
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf4:	4770      	bx	lr
	...

08009cf8 <HAL_PCD_MspInit>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#else
void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b094      	sub	sp, #80	; 0x50
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8009d00:	f107 030c 	add.w	r3, r7, #12
 8009d04:	2244      	movs	r2, #68	; 0x44
 8009d06:	2100      	movs	r1, #0
 8009d08:	4618      	mov	r0, r3
 8009d0a:	f000 fb2d 	bl	800a368 <memset>
  if(pcdHandle->Instance==USB)
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	4a15      	ldr	r2, [pc, #84]	; (8009d68 <HAL_PCD_MspInit+0x70>)
 8009d14:	4293      	cmp	r3, r2
 8009d16:	d122      	bne.n	8009d5e <HAL_PCD_MspInit+0x66>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8009d18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8009d1c:	60fb      	str	r3, [r7, #12]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8009d1e:	2300      	movs	r3, #0
 8009d20:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8009d22:	f107 030c 	add.w	r3, r7, #12
 8009d26:	4618      	mov	r0, r3
 8009d28:	f7fa f820 	bl	8003d6c <HAL_RCCEx_PeriphCLKConfig>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <HAL_PCD_MspInit+0x3e>
    {
      Error_Handler();
 8009d32:	f7f6 ffcf 	bl	8000cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8009d36:	4b0d      	ldr	r3, [pc, #52]	; (8009d6c <HAL_PCD_MspInit+0x74>)
 8009d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d3a:	4a0c      	ldr	r2, [pc, #48]	; (8009d6c <HAL_PCD_MspInit+0x74>)
 8009d3c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8009d40:	6593      	str	r3, [r2, #88]	; 0x58
 8009d42:	4b0a      	ldr	r3, [pc, #40]	; (8009d6c <HAL_PCD_MspInit+0x74>)
 8009d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009d4a:	60bb      	str	r3, [r7, #8]
 8009d4c:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2100      	movs	r1, #0
 8009d52:	2014      	movs	r0, #20
 8009d54:	f7f7 fb4d 	bl	80013f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 8009d58:	2014      	movs	r0, #20
 8009d5a:	f7f7 fb64 	bl	8001426 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8009d5e:	bf00      	nop
 8009d60:	3750      	adds	r7, #80	; 0x50
 8009d62:	46bd      	mov	sp, r7
 8009d64:	bd80      	pop	{r7, pc}
 8009d66:	bf00      	nop
 8009d68:	40005c00 	.word	0x40005c00
 8009d6c:	40021000 	.word	0x40021000

08009d70 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d70:	b580      	push	{r7, lr}
 8009d72:	b082      	sub	sp, #8
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PreTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PreTreatment */
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f8d3 22f0 	ldr.w	r2, [r3, #752]	; 0x2f0
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8009d84:	4619      	mov	r1, r3
 8009d86:	4610      	mov	r0, r2
 8009d88:	f7fe fd2e 	bl	80087e8 <USBD_LL_SetupStage>
  /* USER CODE BEGIN HAL_PCD_SetupStageCallback_PostTreatment */

  /* USER CODE END  HAL_PCD_SetupStageCallback_PostTreatment */
}
 8009d8c:	bf00      	nop
 8009d8e:	3708      	adds	r7, #8
 8009d90:	46bd      	mov	sp, r7
 8009d92:	bd80      	pop	{r7, pc}

08009d94 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009d94:	b580      	push	{r7, lr}
 8009d96:	b082      	sub	sp, #8
 8009d98:	af00      	add	r7, sp, #0
 8009d9a:	6078      	str	r0, [r7, #4]
 8009d9c:	460b      	mov	r3, r1
 8009d9e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PreTreatment */
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009da0:	687b      	ldr	r3, [r7, #4]
 8009da2:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009da6:	78fa      	ldrb	r2, [r7, #3]
 8009da8:	6879      	ldr	r1, [r7, #4]
 8009daa:	4613      	mov	r3, r2
 8009dac:	009b      	lsls	r3, r3, #2
 8009dae:	4413      	add	r3, r2
 8009db0:	00db      	lsls	r3, r3, #3
 8009db2:	440b      	add	r3, r1
 8009db4:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8009db8:	681a      	ldr	r2, [r3, #0]
 8009dba:	78fb      	ldrb	r3, [r7, #3]
 8009dbc:	4619      	mov	r1, r3
 8009dbe:	f7fe fd68 	bl	8008892 <USBD_LL_DataOutStage>
  /* USER CODE BEGIN HAL_PCD_DataOutStageCallback_PostTreatment */

  /* USER CODE END HAL_PCD_DataOutStageCallback_PostTreatment */
}
 8009dc2:	bf00      	nop
 8009dc4:	3708      	adds	r7, #8
 8009dc6:	46bd      	mov	sp, r7
 8009dc8:	bd80      	pop	{r7, pc}

08009dca <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dca:	b580      	push	{r7, lr}
 8009dcc:	b082      	sub	sp, #8
 8009dce:	af00      	add	r7, sp, #0
 8009dd0:	6078      	str	r0, [r7, #4]
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PreTreatment */

  /* USER CODE END HAL_PCD_DataInStageCallback_PreTreatment */
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	f8d3 02f0 	ldr.w	r0, [r3, #752]	; 0x2f0
 8009ddc:	78fa      	ldrb	r2, [r7, #3]
 8009dde:	6879      	ldr	r1, [r7, #4]
 8009de0:	4613      	mov	r3, r2
 8009de2:	009b      	lsls	r3, r3, #2
 8009de4:	4413      	add	r3, r2
 8009de6:	00db      	lsls	r3, r3, #3
 8009de8:	440b      	add	r3, r1
 8009dea:	333c      	adds	r3, #60	; 0x3c
 8009dec:	681a      	ldr	r2, [r3, #0]
 8009dee:	78fb      	ldrb	r3, [r7, #3]
 8009df0:	4619      	mov	r1, r3
 8009df2:	f7fe fdb1 	bl	8008958 <USBD_LL_DataInStage>
  /* USER CODE BEGIN HAL_PCD_DataInStageCallback_PostTreatment  */

  /* USER CODE END HAL_PCD_DataInStageCallback_PostTreatment */
}
 8009df6:	bf00      	nop
 8009df8:	3708      	adds	r7, #8
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}

08009dfe <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009dfe:	b580      	push	{r7, lr}
 8009e00:	b082      	sub	sp, #8
 8009e02:	af00      	add	r7, sp, #0
 8009e04:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PreTreatment */
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	f7fe fec5 	bl	8008b9c <USBD_LL_SOF>
  /* USER CODE BEGIN HAL_PCD_SOFCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SOFCallback_PostTreatment */
}
 8009e12:	bf00      	nop
 8009e14:	3708      	adds	r7, #8
 8009e16:	46bd      	mov	sp, r7
 8009e18:	bd80      	pop	{r7, pc}

08009e1a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e1a:	b580      	push	{r7, lr}
 8009e1c:	b084      	sub	sp, #16
 8009e1e:	af00      	add	r7, sp, #0
 8009e20:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PreTreatment */
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8009e22:	2301      	movs	r3, #1
 8009e24:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	689b      	ldr	r3, [r3, #8]
 8009e2a:	2b02      	cmp	r3, #2
 8009e2c:	d001      	beq.n	8009e32 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8009e2e:	f7f6 ff51 	bl	8000cd4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e38:	7bfa      	ldrb	r2, [r7, #15]
 8009e3a:	4611      	mov	r1, r2
 8009e3c:	4618      	mov	r0, r3
 8009e3e:	f7fe fe6f 	bl	8008b20 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e48:	4618      	mov	r0, r3
 8009e4a:	f7fe fe1b 	bl	8008a84 <USBD_LL_Reset>
  /* USER CODE BEGIN HAL_PCD_ResetCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResetCallback_PostTreatment */
}
 8009e4e:	bf00      	nop
 8009e50:	3710      	adds	r7, #16
 8009e52:	46bd      	mov	sp, r7
 8009e54:	bd80      	pop	{r7, pc}
	...

08009e58 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e58:	b580      	push	{r7, lr}
 8009e5a:	b082      	sub	sp, #8
 8009e5c:	af00      	add	r7, sp, #0
 8009e5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PreTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PreTreatment */
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009e66:	4618      	mov	r0, r3
 8009e68:	f7fe fe6a 	bl	8008b40 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	699b      	ldr	r3, [r3, #24]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d005      	beq.n	8009e80 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e74:	4b04      	ldr	r3, [pc, #16]	; (8009e88 <HAL_PCD_SuspendCallback+0x30>)
 8009e76:	691b      	ldr	r3, [r3, #16]
 8009e78:	4a03      	ldr	r2, [pc, #12]	; (8009e88 <HAL_PCD_SuspendCallback+0x30>)
 8009e7a:	f043 0306 	orr.w	r3, r3, #6
 8009e7e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
  /* USER CODE BEGIN HAL_PCD_SuspendCallback_PostTreatment */

  /* USER CODE END HAL_PCD_SuspendCallback_PostTreatment */
}
 8009e80:	bf00      	nop
 8009e82:	3708      	adds	r7, #8
 8009e84:	46bd      	mov	sp, r7
 8009e86:	bd80      	pop	{r7, pc}
 8009e88:	e000ed00 	.word	0xe000ed00

08009e8c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PreTreatment */

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	699b      	ldr	r3, [r3, #24]
 8009e98:	2b00      	cmp	r3, #0
 8009e9a:	d007      	beq.n	8009eac <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009e9c:	4b08      	ldr	r3, [pc, #32]	; (8009ec0 <HAL_PCD_ResumeCallback+0x34>)
 8009e9e:	691b      	ldr	r3, [r3, #16]
 8009ea0:	4a07      	ldr	r2, [pc, #28]	; (8009ec0 <HAL_PCD_ResumeCallback+0x34>)
 8009ea2:	f023 0306 	bic.w	r3, r3, #6
 8009ea6:	6113      	str	r3, [r2, #16]
    SystemClockConfig_Resume();
 8009ea8:	f000 f9fa 	bl	800a2a0 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */

  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 8009eb2:	4618      	mov	r0, r3
 8009eb4:	f7fe fe5a 	bl	8008b6c <USBD_LL_Resume>
  /* USER CODE BEGIN HAL_PCD_ResumeCallback_PostTreatment */

  /* USER CODE END HAL_PCD_ResumeCallback_PostTreatment */
}
 8009eb8:	bf00      	nop
 8009eba:	3708      	adds	r7, #8
 8009ebc:	46bd      	mov	sp, r7
 8009ebe:	bd80      	pop	{r7, pc}
 8009ec0:	e000ed00 	.word	0xe000ed00

08009ec4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8009ec4:	b580      	push	{r7, lr}
 8009ec6:	b082      	sub	sp, #8
 8009ec8:	af00      	add	r7, sp, #0
 8009eca:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  hpcd_USB_FS.pData = pdev;
 8009ecc:	4a2b      	ldr	r2, [pc, #172]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	f8c2 32f0 	str.w	r3, [r2, #752]	; 0x2f0
  /* Link the driver to the stack. */
  pdev->pData = &hpcd_USB_FS;
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	4a29      	ldr	r2, [pc, #164]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ed8:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4

  hpcd_USB_FS.Instance = USB;
 8009edc:	4b27      	ldr	r3, [pc, #156]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ede:	4a28      	ldr	r2, [pc, #160]	; (8009f80 <USBD_LL_Init+0xbc>)
 8009ee0:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8009ee2:	4b26      	ldr	r3, [pc, #152]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ee4:	2208      	movs	r2, #8
 8009ee6:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8009ee8:	4b24      	ldr	r3, [pc, #144]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009eea:	2202      	movs	r2, #2
 8009eec:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009eee:	4b23      	ldr	r3, [pc, #140]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ef0:	2202      	movs	r2, #2
 8009ef2:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8009ef4:	4b21      	ldr	r3, [pc, #132]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009ef6:	2200      	movs	r2, #0
 8009ef8:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8009efa:	4b20      	ldr	r3, [pc, #128]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009efc:	2200      	movs	r2, #0
 8009efe:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8009f00:	4b1e      	ldr	r3, [pc, #120]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009f02:	2200      	movs	r2, #0
 8009f04:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8009f06:	4b1d      	ldr	r3, [pc, #116]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009f08:	2200      	movs	r2, #0
 8009f0a:	621a      	str	r2, [r3, #32]
  /* register Msp Callbacks (before the Init) */
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPINIT_CB_ID, PCD_MspInit);
  HAL_PCD_RegisterCallback(&hpcd_USB_FS, HAL_PCD_MSPDEINIT_CB_ID, PCD_MspDeInit);
  #endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8009f0c:	481b      	ldr	r0, [pc, #108]	; (8009f7c <USBD_LL_Init+0xb8>)
 8009f0e:	f7f7 fc59 	bl	80017c4 <HAL_PCD_Init>
 8009f12:	4603      	mov	r3, r0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d001      	beq.n	8009f1c <USBD_LL_Init+0x58>
  {
    Error_Handler( );
 8009f18:	f7f6 fedc 	bl	8000cd4 <Error_Handler>
  /* USER CODE BEGIN RegisterCallBackSecondPart */

  /* USER CODE END RegisterCallBackSecondPart */
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f22:	2318      	movs	r3, #24
 8009f24:	2200      	movs	r2, #0
 8009f26:	2100      	movs	r1, #0
 8009f28:	f7f9 f912 	bl	8003150 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f32:	2358      	movs	r3, #88	; 0x58
 8009f34:	2200      	movs	r2, #0
 8009f36:	2180      	movs	r1, #128	; 0x80
 8009f38:	f7f9 f90a 	bl	8003150 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f42:	23c0      	movs	r3, #192	; 0xc0
 8009f44:	2200      	movs	r2, #0
 8009f46:	2181      	movs	r1, #129	; 0x81
 8009f48:	f7f9 f902 	bl	8003150 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f52:	f44f 7388 	mov.w	r3, #272	; 0x110
 8009f56:	2200      	movs	r2, #0
 8009f58:	2101      	movs	r1, #1
 8009f5a:	f7f9 f8f9 	bl	8003150 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009f64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8009f68:	2200      	movs	r2, #0
 8009f6a:	2182      	movs	r1, #130	; 0x82
 8009f6c:	f7f9 f8f0 	bl	8003150 <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 8009f70:	2300      	movs	r3, #0
}
 8009f72:	4618      	mov	r0, r3
 8009f74:	3708      	adds	r7, #8
 8009f76:	46bd      	mov	sp, r7
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	200010a8 	.word	0x200010a8
 8009f80:	40005c00 	.word	0x40005c00

08009f84 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009f90:	2300      	movs	r3, #0
 8009f92:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f7 fcf7 	bl	800198e <HAL_PCD_Start>
 8009fa0:	4603      	mov	r3, r0
 8009fa2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009fa4:	7bfb      	ldrb	r3, [r7, #15]
 8009fa6:	4618      	mov	r0, r3
 8009fa8:	f000 f980 	bl	800a2ac <USBD_Get_USB_Status>
 8009fac:	4603      	mov	r3, r0
 8009fae:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8009fb2:	4618      	mov	r0, r3
 8009fb4:	3710      	adds	r7, #16
 8009fb6:	46bd      	mov	sp, r7
 8009fb8:	bd80      	pop	{r7, pc}

08009fba <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8009fba:	b580      	push	{r7, lr}
 8009fbc:	b084      	sub	sp, #16
 8009fbe:	af00      	add	r7, sp, #0
 8009fc0:	6078      	str	r0, [r7, #4]
 8009fc2:	4608      	mov	r0, r1
 8009fc4:	4611      	mov	r1, r2
 8009fc6:	461a      	mov	r2, r3
 8009fc8:	4603      	mov	r3, r0
 8009fca:	70fb      	strb	r3, [r7, #3]
 8009fcc:	460b      	mov	r3, r1
 8009fce:	70bb      	strb	r3, [r7, #2]
 8009fd0:	4613      	mov	r3, r2
 8009fd2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009fd8:	2300      	movs	r3, #0
 8009fda:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 8009fe2:	78bb      	ldrb	r3, [r7, #2]
 8009fe4:	883a      	ldrh	r2, [r7, #0]
 8009fe6:	78f9      	ldrb	r1, [r7, #3]
 8009fe8:	f7f7 fe3f 	bl	8001c6a <HAL_PCD_EP_Open>
 8009fec:	4603      	mov	r3, r0
 8009fee:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009ff0:	7bfb      	ldrb	r3, [r7, #15]
 8009ff2:	4618      	mov	r0, r3
 8009ff4:	f000 f95a 	bl	800a2ac <USBD_Get_USB_Status>
 8009ff8:	4603      	mov	r3, r0
 8009ffa:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009ffc:	7bbb      	ldrb	r3, [r7, #14]
}
 8009ffe:	4618      	mov	r0, r3
 800a000:	3710      	adds	r7, #16
 800a002:	46bd      	mov	sp, r7
 800a004:	bd80      	pop	{r7, pc}

0800a006 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a006:	b580      	push	{r7, lr}
 800a008:	b084      	sub	sp, #16
 800a00a:	af00      	add	r7, sp, #0
 800a00c:	6078      	str	r0, [r7, #4]
 800a00e:	460b      	mov	r3, r1
 800a010:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a012:	2300      	movs	r3, #0
 800a014:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a016:	2300      	movs	r3, #0
 800a018:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a020:	78fa      	ldrb	r2, [r7, #3]
 800a022:	4611      	mov	r1, r2
 800a024:	4618      	mov	r0, r3
 800a026:	f7f7 fe86 	bl	8001d36 <HAL_PCD_EP_Close>
 800a02a:	4603      	mov	r3, r0
 800a02c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a02e:	7bfb      	ldrb	r3, [r7, #15]
 800a030:	4618      	mov	r0, r3
 800a032:	f000 f93b 	bl	800a2ac <USBD_Get_USB_Status>
 800a036:	4603      	mov	r3, r0
 800a038:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a03a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a03c:	4618      	mov	r0, r3
 800a03e:	3710      	adds	r7, #16
 800a040:	46bd      	mov	sp, r7
 800a042:	bd80      	pop	{r7, pc}

0800a044 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a044:	b580      	push	{r7, lr}
 800a046:	b084      	sub	sp, #16
 800a048:	af00      	add	r7, sp, #0
 800a04a:	6078      	str	r0, [r7, #4]
 800a04c:	460b      	mov	r3, r1
 800a04e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a054:	2300      	movs	r3, #0
 800a056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a05e:	78fa      	ldrb	r2, [r7, #3]
 800a060:	4611      	mov	r1, r2
 800a062:	4618      	mov	r0, r3
 800a064:	f7f7 ff47 	bl	8001ef6 <HAL_PCD_EP_SetStall>
 800a068:	4603      	mov	r3, r0
 800a06a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a06c:	7bfb      	ldrb	r3, [r7, #15]
 800a06e:	4618      	mov	r0, r3
 800a070:	f000 f91c 	bl	800a2ac <USBD_Get_USB_Status>
 800a074:	4603      	mov	r3, r0
 800a076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a078:	7bbb      	ldrb	r3, [r7, #14]
}
 800a07a:	4618      	mov	r0, r3
 800a07c:	3710      	adds	r7, #16
 800a07e:	46bd      	mov	sp, r7
 800a080:	bd80      	pop	{r7, pc}

0800a082 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a082:	b580      	push	{r7, lr}
 800a084:	b084      	sub	sp, #16
 800a086:	af00      	add	r7, sp, #0
 800a088:	6078      	str	r0, [r7, #4]
 800a08a:	460b      	mov	r3, r1
 800a08c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a08e:	2300      	movs	r3, #0
 800a090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a092:	2300      	movs	r3, #0
 800a094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a09c:	78fa      	ldrb	r2, [r7, #3]
 800a09e:	4611      	mov	r1, r2
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	f7f7 ff7a 	bl	8001f9a <HAL_PCD_EP_ClrStall>
 800a0a6:	4603      	mov	r3, r0
 800a0a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a0aa:	7bfb      	ldrb	r3, [r7, #15]
 800a0ac:	4618      	mov	r0, r3
 800a0ae:	f000 f8fd 	bl	800a2ac <USBD_Get_USB_Status>
 800a0b2:	4603      	mov	r3, r0
 800a0b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a0b6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a0b8:	4618      	mov	r0, r3
 800a0ba:	3710      	adds	r7, #16
 800a0bc:	46bd      	mov	sp, r7
 800a0be:	bd80      	pop	{r7, pc}

0800a0c0 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a0c0:	b480      	push	{r7}
 800a0c2:	b085      	sub	sp, #20
 800a0c4:	af00      	add	r7, sp, #0
 800a0c6:	6078      	str	r0, [r7, #4]
 800a0c8:	460b      	mov	r3, r1
 800a0ca:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a0d2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800a0d4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	da0c      	bge.n	800a0f6 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800a0dc:	78fb      	ldrb	r3, [r7, #3]
 800a0de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a0e2:	68f9      	ldr	r1, [r7, #12]
 800a0e4:	1c5a      	adds	r2, r3, #1
 800a0e6:	4613      	mov	r3, r2
 800a0e8:	009b      	lsls	r3, r3, #2
 800a0ea:	4413      	add	r3, r2
 800a0ec:	00db      	lsls	r3, r3, #3
 800a0ee:	440b      	add	r3, r1
 800a0f0:	3302      	adds	r3, #2
 800a0f2:	781b      	ldrb	r3, [r3, #0]
 800a0f4:	e00b      	b.n	800a10e <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800a0f6:	78fb      	ldrb	r3, [r7, #3]
 800a0f8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a0fc:	68f9      	ldr	r1, [r7, #12]
 800a0fe:	4613      	mov	r3, r2
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	4413      	add	r3, r2
 800a104:	00db      	lsls	r3, r3, #3
 800a106:	440b      	add	r3, r1
 800a108:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 800a10c:	781b      	ldrb	r3, [r3, #0]
  }
}
 800a10e:	4618      	mov	r0, r3
 800a110:	3714      	adds	r7, #20
 800a112:	46bd      	mov	sp, r7
 800a114:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a118:	4770      	bx	lr

0800a11a <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800a11a:	b580      	push	{r7, lr}
 800a11c:	b084      	sub	sp, #16
 800a11e:	af00      	add	r7, sp, #0
 800a120:	6078      	str	r0, [r7, #4]
 800a122:	460b      	mov	r3, r1
 800a124:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a126:	2300      	movs	r3, #0
 800a128:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a12a:	2300      	movs	r3, #0
 800a12c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a134:	78fa      	ldrb	r2, [r7, #3]
 800a136:	4611      	mov	r1, r2
 800a138:	4618      	mov	r0, r3
 800a13a:	f7f7 fd71 	bl	8001c20 <HAL_PCD_SetAddress>
 800a13e:	4603      	mov	r3, r0
 800a140:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a142:	7bfb      	ldrb	r3, [r7, #15]
 800a144:	4618      	mov	r0, r3
 800a146:	f000 f8b1 	bl	800a2ac <USBD_Get_USB_Status>
 800a14a:	4603      	mov	r3, r0
 800a14c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a14e:	7bbb      	ldrb	r3, [r7, #14]
}
 800a150:	4618      	mov	r0, r3
 800a152:	3710      	adds	r7, #16
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b086      	sub	sp, #24
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	60f8      	str	r0, [r7, #12]
 800a160:	607a      	str	r2, [r7, #4]
 800a162:	603b      	str	r3, [r7, #0]
 800a164:	460b      	mov	r3, r1
 800a166:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a168:	2300      	movs	r3, #0
 800a16a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a16c:	2300      	movs	r3, #0
 800a16e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800a170:	68fb      	ldr	r3, [r7, #12]
 800a172:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a176:	7af9      	ldrb	r1, [r7, #11]
 800a178:	683b      	ldr	r3, [r7, #0]
 800a17a:	687a      	ldr	r2, [r7, #4]
 800a17c:	f7f7 fe78 	bl	8001e70 <HAL_PCD_EP_Transmit>
 800a180:	4603      	mov	r3, r0
 800a182:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a184:	7dfb      	ldrb	r3, [r7, #23]
 800a186:	4618      	mov	r0, r3
 800a188:	f000 f890 	bl	800a2ac <USBD_Get_USB_Status>
 800a18c:	4603      	mov	r3, r0
 800a18e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a190:	7dbb      	ldrb	r3, [r7, #22]
}
 800a192:	4618      	mov	r0, r3
 800a194:	3718      	adds	r7, #24
 800a196:	46bd      	mov	sp, r7
 800a198:	bd80      	pop	{r7, pc}

0800a19a <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800a19a:	b580      	push	{r7, lr}
 800a19c:	b086      	sub	sp, #24
 800a19e:	af00      	add	r7, sp, #0
 800a1a0:	60f8      	str	r0, [r7, #12]
 800a1a2:	607a      	str	r2, [r7, #4]
 800a1a4:	603b      	str	r3, [r7, #0]
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a1ae:	2300      	movs	r3, #0
 800a1b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	f8d3 02c4 	ldr.w	r0, [r3, #708]	; 0x2c4
 800a1b8:	7af9      	ldrb	r1, [r7, #11]
 800a1ba:	683b      	ldr	r3, [r7, #0]
 800a1bc:	687a      	ldr	r2, [r7, #4]
 800a1be:	f7f7 fe02 	bl	8001dc6 <HAL_PCD_EP_Receive>
 800a1c2:	4603      	mov	r3, r0
 800a1c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800a1c6:	7dfb      	ldrb	r3, [r7, #23]
 800a1c8:	4618      	mov	r0, r3
 800a1ca:	f000 f86f 	bl	800a2ac <USBD_Get_USB_Status>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800a1d2:	7dbb      	ldrb	r3, [r7, #22]
}
 800a1d4:	4618      	mov	r0, r3
 800a1d6:	3718      	adds	r7, #24
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b082      	sub	sp, #8
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	6078      	str	r0, [r7, #4]
 800a1e4:	460b      	mov	r3, r1
 800a1e6:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800a1e8:	687b      	ldr	r3, [r7, #4]
 800a1ea:	f8d3 32c4 	ldr.w	r3, [r3, #708]	; 0x2c4
 800a1ee:	78fa      	ldrb	r2, [r7, #3]
 800a1f0:	4611      	mov	r1, r2
 800a1f2:	4618      	mov	r0, r3
 800a1f4:	f7f7 fe24 	bl	8001e40 <HAL_PCD_EP_GetRxCount>
 800a1f8:	4603      	mov	r3, r0
}
 800a1fa:	4618      	mov	r0, r3
 800a1fc:	3708      	adds	r7, #8
 800a1fe:	46bd      	mov	sp, r7
 800a200:	bd80      	pop	{r7, pc}
	...

0800a204 <HAL_PCDEx_LPM_Callback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#else
void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800a204:	b580      	push	{r7, lr}
 800a206:	b082      	sub	sp, #8
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	460b      	mov	r3, r1
 800a20e:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN LPM_Callback */
  switch (msg)
 800a210:	78fb      	ldrb	r3, [r7, #3]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d002      	beq.n	800a21c <HAL_PCDEx_LPM_Callback+0x18>
 800a216:	2b01      	cmp	r3, #1
 800a218:	d013      	beq.n	800a242 <HAL_PCDEx_LPM_Callback+0x3e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
    }
    break;
  }
  /* USER CODE END LPM_Callback */
}
 800a21a:	e023      	b.n	800a264 <HAL_PCDEx_LPM_Callback+0x60>
    if (hpcd->Init.low_power_enable)
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	699b      	ldr	r3, [r3, #24]
 800a220:	2b00      	cmp	r3, #0
 800a222:	d007      	beq.n	800a234 <HAL_PCDEx_LPM_Callback+0x30>
      SystemClockConfig_Resume();
 800a224:	f000 f83c 	bl	800a2a0 <SystemClockConfig_Resume>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a228:	4b10      	ldr	r3, [pc, #64]	; (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a22a:	691b      	ldr	r3, [r3, #16]
 800a22c:	4a0f      	ldr	r2, [pc, #60]	; (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a22e:	f023 0306 	bic.w	r3, r3, #6
 800a232:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a23a:	4618      	mov	r0, r3
 800a23c:	f7fe fc96 	bl	8008b6c <USBD_LL_Resume>
    break;
 800a240:	e010      	b.n	800a264 <HAL_PCDEx_LPM_Callback+0x60>
    USBD_LL_Suspend(hpcd->pData);
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 32f0 	ldr.w	r3, [r3, #752]	; 0x2f0
 800a248:	4618      	mov	r0, r3
 800a24a:	f7fe fc79 	bl	8008b40 <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	699b      	ldr	r3, [r3, #24]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d005      	beq.n	800a262 <HAL_PCDEx_LPM_Callback+0x5e>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800a256:	4b05      	ldr	r3, [pc, #20]	; (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a258:	691b      	ldr	r3, [r3, #16]
 800a25a:	4a04      	ldr	r2, [pc, #16]	; (800a26c <HAL_PCDEx_LPM_Callback+0x68>)
 800a25c:	f043 0306 	orr.w	r3, r3, #6
 800a260:	6113      	str	r3, [r2, #16]
    break;
 800a262:	bf00      	nop
}
 800a264:	bf00      	nop
 800a266:	3708      	adds	r7, #8
 800a268:	46bd      	mov	sp, r7
 800a26a:	bd80      	pop	{r7, pc}
 800a26c:	e000ed00 	.word	0xe000ed00

0800a270 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800a270:	b480      	push	{r7}
 800a272:	b083      	sub	sp, #12
 800a274:	af00      	add	r7, sp, #0
 800a276:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800a278:	4b03      	ldr	r3, [pc, #12]	; (800a288 <USBD_static_malloc+0x18>)
}
 800a27a:	4618      	mov	r0, r3
 800a27c:	370c      	adds	r7, #12
 800a27e:	46bd      	mov	sp, r7
 800a280:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a284:	4770      	bx	lr
 800a286:	bf00      	nop
 800a288:	2000139c 	.word	0x2000139c

0800a28c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800a28c:	b480      	push	{r7}
 800a28e:	b083      	sub	sp, #12
 800a290:	af00      	add	r7, sp, #0
 800a292:	6078      	str	r0, [r7, #4]

}
 800a294:	bf00      	nop
 800a296:	370c      	adds	r7, #12
 800a298:	46bd      	mov	sp, r7
 800a29a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29e:	4770      	bx	lr

0800a2a0 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 800a2a0:	b580      	push	{r7, lr}
 800a2a2:	af00      	add	r7, sp, #0
  SystemClock_Config();
 800a2a4:	f7f6 f990 	bl	80005c8 <SystemClock_Config>
}
 800a2a8:	bf00      	nop
 800a2aa:	bd80      	pop	{r7, pc}

0800a2ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a2ac:	b480      	push	{r7}
 800a2ae:	b085      	sub	sp, #20
 800a2b0:	af00      	add	r7, sp, #0
 800a2b2:	4603      	mov	r3, r0
 800a2b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800a2b6:	2300      	movs	r3, #0
 800a2b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a2ba:	79fb      	ldrb	r3, [r7, #7]
 800a2bc:	2b03      	cmp	r3, #3
 800a2be:	d817      	bhi.n	800a2f0 <USBD_Get_USB_Status+0x44>
 800a2c0:	a201      	add	r2, pc, #4	; (adr r2, 800a2c8 <USBD_Get_USB_Status+0x1c>)
 800a2c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2c6:	bf00      	nop
 800a2c8:	0800a2d9 	.word	0x0800a2d9
 800a2cc:	0800a2df 	.word	0x0800a2df
 800a2d0:	0800a2e5 	.word	0x0800a2e5
 800a2d4:	0800a2eb 	.word	0x0800a2eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800a2d8:	2300      	movs	r3, #0
 800a2da:	73fb      	strb	r3, [r7, #15]
    break;
 800a2dc:	e00b      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800a2de:	2303      	movs	r3, #3
 800a2e0:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e2:	e008      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800a2e4:	2301      	movs	r3, #1
 800a2e6:	73fb      	strb	r3, [r7, #15]
    break;
 800a2e8:	e005      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800a2ea:	2303      	movs	r3, #3
 800a2ec:	73fb      	strb	r3, [r7, #15]
    break;
 800a2ee:	e002      	b.n	800a2f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800a2f0:	2303      	movs	r3, #3
 800a2f2:	73fb      	strb	r3, [r7, #15]
    break;
 800a2f4:	bf00      	nop
  }
  return usb_status;
 800a2f6:	7bfb      	ldrb	r3, [r7, #15]
}
 800a2f8:	4618      	mov	r0, r3
 800a2fa:	3714      	adds	r7, #20
 800a2fc:	46bd      	mov	sp, r7
 800a2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a302:	4770      	bx	lr

0800a304 <__libc_init_array>:
 800a304:	b570      	push	{r4, r5, r6, lr}
 800a306:	4d0d      	ldr	r5, [pc, #52]	; (800a33c <__libc_init_array+0x38>)
 800a308:	4c0d      	ldr	r4, [pc, #52]	; (800a340 <__libc_init_array+0x3c>)
 800a30a:	1b64      	subs	r4, r4, r5
 800a30c:	10a4      	asrs	r4, r4, #2
 800a30e:	2600      	movs	r6, #0
 800a310:	42a6      	cmp	r6, r4
 800a312:	d109      	bne.n	800a328 <__libc_init_array+0x24>
 800a314:	4d0b      	ldr	r5, [pc, #44]	; (800a344 <__libc_init_array+0x40>)
 800a316:	4c0c      	ldr	r4, [pc, #48]	; (800a348 <__libc_init_array+0x44>)
 800a318:	f000 f82e 	bl	800a378 <_init>
 800a31c:	1b64      	subs	r4, r4, r5
 800a31e:	10a4      	asrs	r4, r4, #2
 800a320:	2600      	movs	r6, #0
 800a322:	42a6      	cmp	r6, r4
 800a324:	d105      	bne.n	800a332 <__libc_init_array+0x2e>
 800a326:	bd70      	pop	{r4, r5, r6, pc}
 800a328:	f855 3b04 	ldr.w	r3, [r5], #4
 800a32c:	4798      	blx	r3
 800a32e:	3601      	adds	r6, #1
 800a330:	e7ee      	b.n	800a310 <__libc_init_array+0xc>
 800a332:	f855 3b04 	ldr.w	r3, [r5], #4
 800a336:	4798      	blx	r3
 800a338:	3601      	adds	r6, #1
 800a33a:	e7f2      	b.n	800a322 <__libc_init_array+0x1e>
 800a33c:	0800a3e8 	.word	0x0800a3e8
 800a340:	0800a3e8 	.word	0x0800a3e8
 800a344:	0800a3e8 	.word	0x0800a3e8
 800a348:	0800a3ec 	.word	0x0800a3ec

0800a34c <memcpy>:
 800a34c:	440a      	add	r2, r1
 800a34e:	4291      	cmp	r1, r2
 800a350:	f100 33ff 	add.w	r3, r0, #4294967295
 800a354:	d100      	bne.n	800a358 <memcpy+0xc>
 800a356:	4770      	bx	lr
 800a358:	b510      	push	{r4, lr}
 800a35a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a35e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a362:	4291      	cmp	r1, r2
 800a364:	d1f9      	bne.n	800a35a <memcpy+0xe>
 800a366:	bd10      	pop	{r4, pc}

0800a368 <memset>:
 800a368:	4402      	add	r2, r0
 800a36a:	4603      	mov	r3, r0
 800a36c:	4293      	cmp	r3, r2
 800a36e:	d100      	bne.n	800a372 <memset+0xa>
 800a370:	4770      	bx	lr
 800a372:	f803 1b01 	strb.w	r1, [r3], #1
 800a376:	e7f9      	b.n	800a36c <memset+0x4>

0800a378 <_init>:
 800a378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a37a:	bf00      	nop
 800a37c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a37e:	bc08      	pop	{r3}
 800a380:	469e      	mov	lr, r3
 800a382:	4770      	bx	lr

0800a384 <_fini>:
 800a384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a386:	bf00      	nop
 800a388:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a38a:	bc08      	pop	{r3}
 800a38c:	469e      	mov	lr, r3
 800a38e:	4770      	bx	lr
